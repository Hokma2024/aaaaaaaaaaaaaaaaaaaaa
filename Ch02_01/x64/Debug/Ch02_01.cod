; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34120.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__F3C15AE8_concurrencysal@h DB 01H
__C2C5E543_sal@h DB 01H
__CF4DA6E0_vadefs@h DB 01H
__0BD3CFF9_vcruntime@h DB 01H
__EF0E8AE4_xkeycheck@h DB 01H
__00B1953A_yvals_core@h DB 01H
__1B0272D9_corecrt@h DB 01H
__B9985323_float@h DB 01H
__A913E2DF_cfloat DB 01H
__0936E6B9_limits@h DB 01H
__12A8C904_climits DB 01H
__064C7562_vcruntime_new@h DB 01H
__E4C7762A_vcruntime_new_debug@h DB 01H
__935DC21B_crtdbg@h DB 01H
__B96DB034_crtdefs@h DB 01H
__3DCD2F8F_use_ansi@h DB 01H
__20075D49_yvals@h DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__9647EBF6_cstdlib DB 01H
__C6C31DC6_xtr1common DB 01H
__6E0C4417_intrin0@inl@h DB 01H
__A040093F_intrin0@h DB 01H
__A07FEBF4_cmath DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__DA572958_cstdio DB 01H
__61CC25A1_errno@h DB 01H
__DAE55B15_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__DAD54316_cstring DB 01H
__EF1F6BBA_corecrt_wconio@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__3D1D430C_corecrt_wdirect@h DB 01H
__8ECB7138_corecrt_share@h DB 01H
__DB7FEBA6_corecrt_wio@h DB 01H
__9A9F0068_corecrt_wprocess@h DB 01H
__369A9BC3_corecrt_wtime@h DB 01H
__CE789B9D_types@h DB 01H
__9901C817_stat@h DB 01H
__3FCAD62E_wchar@h DB 01H
__40DCFF0B_cwchar DB 01H
__031C7A3D_iosfwd DB 01H
__338C315B_cstddef DB 01H
__E9072CDB_initializer_list DB 01H
__B740C886_stdint@h DB 01H
__2B190A8B_cstdint DB 01H
__A1A74C2F_type_traits DB 01H
__A14A6E7D_utility DB 01H
__4A6017ED___msvc_iter_core@hpp DB 01H
__DB98B07B_xutility DB 01H
__CA34073B_iterator DB 01H
__F7972D0B_share@h DB 01H
__FFC24B2B___msvc_system_error_abi@hpp DB 01H
__47765DA3_cerrno DB 01H
__FA77ED4C_malloc@h DB 01H
__89766DA4_corecrt_terminate@h DB 01H
__35491E3A_eh@h DB 01H
__EC297378_vcruntime_exception@h DB 01H
__7132DEA2_exception DB 01H
__7BAE8CB3___msvc_sanitizer_annotate_container@hpp DB 01H
__B3B6A1BA___msvc_string_view@hpp DB 01H
__CFF5AFBB_limits DB 01H
__57FAB8BC_new DB 01H
__7B3E5274_xatomic@h DB 01H
__CBDF0DBE_xmemory DB 01H
__BF0C8B22_xstring DB 01H
__F87CE4FF_stdexcept DB 01H
__43294B6A_xcall_once@h DB 01H
__88924846_xerrc@h DB 01H
__6B878AB8___msvc_threads_core@hpp DB 01H
__0A9237D2_time@h DB 01H
__66CC77FC_ctime DB 01H
__6D5C533A_xtimec@h DB 01H
__5C83183C_xthreads@h DB 01H
__A4C0F379_atomic DB 01H
__FC74594A_system_error DB 01H
__5E8EF172_vcruntime_typeinfo@h DB 01H
__AB474362_typeinfo DB 01H
__735BA335_memory DB 01H
__5F1EF43A_xfacet DB 01H
__3664B593___msvc_xlocinfo_types@hpp DB 01H
__1EC467ED_ctype@h DB 01H
__D59CCEFF_cctype DB 01H
__791C33B7_locale@h DB 01H
__05EB3727_clocale DB 01H
__B4CEA0AA_xlocinfo DB 01H
__6032FF13_xlocale DB 01H
__8D2BD7B9_xiosbase DB 01H
__FADC5C43_streambuf DB 01H
__FEB59904_xlocnum DB 01H
__AF3782AA_ios DB 01H
__732225D7_ostream DB 01H
__10F210ED_istream DB 01H
__B9E1CA64_iostream DB 01H
__078825A9_string DB 01H
__D35CD36D_sstream DB 01H
__D5D78C3C_xlocmon DB 01H
__10D309B8_xloctime DB 01H
__EC30D6BF_iomanip DB 01H
__0A91C1A1_Ch02_01@h DB 01H
__28109234_Ch02_01@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	wmemcpy
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z	; std::_Char_traits<char,int>::copy
PUBLIC	?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z	; std::_Char_traits<char,int>::move
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?eq@?$_Narrow_char_traits@DH@std@@SA_NDD@Z	; std::_Narrow_char_traits<char,int>::eq
PUBLIC	?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
PUBLIC	?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?not_eof@?$_Narrow_char_traits@DH@std@@SAHH@Z	; std::_Narrow_char_traits<char,int>::not_eof
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$allocator@D@std@@QEAA@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QEAAPEAD_K@Z	; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged
PUBLIC	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Switch_to_buf
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Deallocate_for_capacity
PUBLIC	?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_empty
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPEA_WPEB_W@Z			; std::_Maklocwcs
PUBLIC	??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
PUBLIC	??$_Max_limit@_J@std@@YA_JXZ			; std::_Max_limit<__int64>
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	?ToStringI16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; XmmVal::ToStringI16
PUBLIC	?ToStringU16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; XmmVal::ToStringU16
PUBLIC	??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Get_buffer_view
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
PUBLIC	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
PUBLIC	??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2
PUBLIC	??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
PUBLIC	??$?6DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z ; XmmVal::ToStringInt<short>
PUBLIC	??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z ; XmmVal::ToStringUint<unsigned short>
PUBLIC	main
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ		; std::fpos<_Mbstatet>::operator __int64
PUBLIC	??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z		; std::max<char *>
PUBLIC	??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z ; std::_Allocate_at_least_helper<std::allocator<char> >
PUBLIC	??$_Unfancy@D@std@@YAPEADPEAD@Z			; std::_Unfancy<char>
PUBLIC	?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z ; std::pointer_traits<char *>::pointer_to
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$addressof@D@std@@YAPEADAEAD@Z		; std::addressof<char>
PUBLIC	??$max@_K@std@@YAAEB_KAEB_K0@Z			; std::max<unsigned __int64>
PUBLIC	??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z		; std::_Deallocate<16>
PUBLIC	??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Allocate_for_capacity<0>
PUBLIC	??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z	; std::addressof<char *>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits>
PUBLIC	??$addressof@V?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::addressof<std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Get_size_of_n@$00@std@@YA_K_K@Z		; std::_Get_size_of_n<1>
PUBLIC	??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
PUBLIC	??R<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@QEBD_K@Z@QEBA@QEAD10@Z ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign'::`2'::<lambda_1>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign'::`2'::<lambda_1>,char const *>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0DE@BPMGLBMJ@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@ ; `string'
PUBLIC	??_C@_1GI@IFFPLBNO@?$AAD?$AA?3?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?2?$AAV?$AAC?$AA?2?$AAT?$AAo@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0DE@LHAKIDGO@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@ ; `string'
PUBLIC	?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA ; `std::_Maklocwcs'::`1'::__LINE__Var
PUBLIC	??_C@_0DE@DEEHIBMP@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@ ; `string'
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_C@_0DA@IBEKOJDB@?6Results?5for?5AddI16_Iavx?5?9?5Wrap@ ; `string'
PUBLIC	??_C@_04KPNACMJI@a?3?5?5@			; `string'
PUBLIC	??_C@_04OIHAFGEI@b?3?5?5@			; `string'
PUBLIC	??_C@_04BDKANOFP@c1?3?5@			; `string'
PUBLIC	??_C@_0CP@MKGLNOBC@?6Results?5for?5AddI16_Iavx?5?9?5Satu@ ; `string'
PUBLIC	??_C@_04BBFHBLB@c2?3?5@				; `string'
PUBLIC	??_C@_0DA@OINKJKG@?6Results?5for?5AddU16_Iavx?5?9?5Wrap@ ; `string'
PUBLIC	??_C@_0CP@GILFLGMO@?6Results?5for?5AddU16_Iavx?5?9?5Satu@ ; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
PUBLIC	??_C@_04ODOJPIMC@?5?5?5?$HM@			; `string'
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__calloc_dbg:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	__imp_wcslen:PROC
EXTRN	strlen:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	_Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QEBAPEBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QEBAPEBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ:PROC
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ:PROC
EXTRN	__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z:PROC
EXTRN	__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z:PROC
EXTRN	__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD0@Z:PROC
EXTRN	__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z:PROC
EXTRN	__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ:PROC
EXTRN	__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ:PROC
EXTRN	__imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:PROC
EXTRN	__imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_J@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_K@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z:PROC	; std::setw
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z:PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	?AddI16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z:PROC	; AddI16_Iavx
EXTRN	?AddU16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z:PROC	; AddU16_Iavx
EXTRN	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue
EXTRN	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync
EXTRN	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAPEAV12@PEAD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
EXTRN	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
EXTRN	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
EXTRN	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow
EXTRN	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
EXTRN	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
EXTRN	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN4
	DD	imagerel $LN4+54
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wmemcpy DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$wmemcpy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN4
	DD	imagerel $LN4+117
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+125
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+97
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN5
	DD	imagerel $LN5+84
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+97
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN5
	DD	imagerel $LN5+84
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+86
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN5
	DD	imagerel $LN5+84
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+86
	DD	imagerel $unwind$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+86
	DD	imagerel $unwind$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+54
	DD	imagerel $unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+66
	DD	imagerel $unwind$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq@?$_Narrow_char_traits@DH@std@@SA_NDD@Z DD imagerel $LN6
	DD	imagerel $LN6+92
	DD	imagerel $unwind$?eq@?$_Narrow_char_traits@DH@std@@SA_NDD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z DD imagerel $LN4
	DD	imagerel $LN4+48
	DD	imagerel $unwind$?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z DD imagerel $LN4
	DD	imagerel $LN4+48
	DD	imagerel $unwind$?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z DD imagerel $LN6
	DD	imagerel $LN6+88
	DD	imagerel $unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?not_eof@?$_Narrow_char_traits@DH@std@@SAHH@Z DD imagerel $LN8
	DD	imagerel $LN8+117
	DD	imagerel $unwind$?not_eof@?$_Narrow_char_traits@DH@std@@SAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD imagerel $LN4
	DD	imagerel $LN4+43
	DD	imagerel $unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+456
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+86
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+55
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN8
	DD	imagerel $LN8+135
	DD	imagerel $unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+155
	DD	imagerel $unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+102
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen_string@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?_Xlen_string@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@D@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??0?$allocator@D@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD imagerel $LN13
	DD	imagerel $LN13+212
	DD	imagerel $unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD imagerel $LN5
	DD	imagerel $LN5+100
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+100
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD imagerel $LN6
	DD	imagerel $LN6+85
	DD	imagerel $unwind$?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+58
	DD	imagerel $unwind$?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+97
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+168
	DD	imagerel $unwind$?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+218
	DD	imagerel $unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+235
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel $LN4
	DD	imagerel $LN4+57
	DD	imagerel $unwind$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN4
	DD	imagerel $LN4+53
	DD	imagerel $unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN4
	DD	imagerel $LN4+227
	DD	imagerel $unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z DD imagerel $LN6
	DD	imagerel $LN6+272
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+203
	DD	imagerel $unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ DD imagerel $LN4
	DD	imagerel $LN4+57
	DD	imagerel $unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ DD imagerel $LN4
	DD	imagerel $LN4+57
	DD	imagerel $unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+45
	DD	imagerel $unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z DD imagerel $LN12
	DD	imagerel $LN12+588
	DD	imagerel $unwind$??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Maklocwcs@std@@YAPEA_WPEB_W@Z DD imagerel $LN4
	DD	imagerel $LN4+145
	DD	imagerel $unwind$?_Maklocwcs@std@@YAPEA_WPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z DD imagerel $LN7
	DD	imagerel $LN7+202
	DD	imagerel $unwind$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Max_limit@_J@std@@YA_JXZ DD imagerel $LN4
	DD	imagerel $LN4+56
	DD	imagerel $unwind$??$_Max_limit@_J@std@@YA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+357
	DD	imagerel $unwind$??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+357
	DD	imagerel $unwind$??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ToStringI16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD imagerel $LN5
	DD	imagerel $LN5+122
	DD	imagerel $unwind$?ToStringI16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ToStringU16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD imagerel $LN5
	DD	imagerel $LN5+122
	DD	imagerel $unwind$?ToStringU16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+271
	DD	imagerel $unwind$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA+67
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA DD imagerel ?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA+44
	DD	imagerel $unwind$?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+180
	DD	imagerel $unwind$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+105
	DD	imagerel $unwind$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD imagerel $LN4
	DD	imagerel $LN4+140
	DD	imagerel $unwind$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+86
	DD	imagerel $unwind$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ DD imagerel $LN8
	DD	imagerel $LN8+421
	DD	imagerel $unwind$?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN6
	DD	imagerel $LN6+237
	DD	imagerel $unwind$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA DD imagerel ?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA
	DD	imagerel ?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA+59
	DD	imagerel $unwind$?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z DD imagerel $LN16
	DD	imagerel $LN16+836
	DD	imagerel $unwind$?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z DD imagerel $LN6
	DD	imagerel $LN6+289
	DD	imagerel $unwind$?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ DD imagerel $LN8
	DD	imagerel $LN8+389
	DD	imagerel $unwind$?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z DD imagerel $LN31
	DD	imagerel $LN31+978
	DD	imagerel $unwind$?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z DD imagerel $LN18
	DD	imagerel $LN18+711
	DD	imagerel $unwind$?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+286
	DD	imagerel $unwind$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z DD imagerel $LN8
	DD	imagerel $LN8+139
	DD	imagerel $unwind$?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z DD imagerel $LN5
	DD	imagerel $LN5+84
	DD	imagerel $unwind$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z DD imagerel $LN5
	DD	imagerel $LN5+108
	DD	imagerel $unwind$??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+74
	DD	imagerel $unwind$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$??$?6DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN25
	DD	imagerel $LN25+945
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+80
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z DD imagerel $LN10
	DD	imagerel $LN10+404
	DD	imagerel $unwind$??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z@4HA DD imagerel ?dtor$0@?0???$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z@4HA
	DD	imagerel ?dtor$0@?0???$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z DD imagerel $LN10
	DD	imagerel $LN10+403
	DD	imagerel $unwind$??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z@4HA DD imagerel ?dtor$0@?0???$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z@4HA
	DD	imagerel ?dtor$0@?0???$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddI16@@YAXXZ DD imagerel ?AddI16@@YAXXZ
	DD	imagerel ?AddI16@@YAXXZ+1055
	DD	imagerel $unwind$?AddI16@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??AddI16@@YAXXZ@4HA DD imagerel ?dtor$0@?0??AddI16@@YAXXZ@4HA
	DD	imagerel ?dtor$0@?0??AddI16@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??AddI16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??AddI16@@YAXXZ@4HA DD imagerel ?dtor$1@?0??AddI16@@YAXXZ@4HA
	DD	imagerel ?dtor$1@?0??AddI16@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$1@?0??AddI16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??AddI16@@YAXXZ@4HA DD imagerel ?dtor$2@?0??AddI16@@YAXXZ@4HA
	DD	imagerel ?dtor$2@?0??AddI16@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$2@?0??AddI16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??AddI16@@YAXXZ@4HA DD imagerel ?dtor$3@?0??AddI16@@YAXXZ@4HA
	DD	imagerel ?dtor$3@?0??AddI16@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$3@?0??AddI16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$4@?0??AddI16@@YAXXZ@4HA DD imagerel ?dtor$4@?0??AddI16@@YAXXZ@4HA
	DD	imagerel ?dtor$4@?0??AddI16@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$4@?0??AddI16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$5@?0??AddI16@@YAXXZ@4HA DD imagerel ?dtor$5@?0??AddI16@@YAXXZ@4HA
	DD	imagerel ?dtor$5@?0??AddI16@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$5@?0??AddI16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddU16@@YAXXZ DD imagerel ?AddU16@@YAXXZ
	DD	imagerel ?AddU16@@YAXXZ+1055
	DD	imagerel $unwind$?AddU16@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??AddU16@@YAXXZ@4HA DD imagerel ?dtor$0@?0??AddU16@@YAXXZ@4HA
	DD	imagerel ?dtor$0@?0??AddU16@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??AddU16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??AddU16@@YAXXZ@4HA DD imagerel ?dtor$1@?0??AddU16@@YAXXZ@4HA
	DD	imagerel ?dtor$1@?0??AddU16@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$1@?0??AddU16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??AddU16@@YAXXZ@4HA DD imagerel ?dtor$2@?0??AddU16@@YAXXZ@4HA
	DD	imagerel ?dtor$2@?0??AddU16@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$2@?0??AddU16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??AddU16@@YAXXZ@4HA DD imagerel ?dtor$3@?0??AddU16@@YAXXZ@4HA
	DD	imagerel ?dtor$3@?0??AddU16@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$3@?0??AddU16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$4@?0??AddU16@@YAXXZ@4HA DD imagerel ?dtor$4@?0??AddU16@@YAXXZ@4HA
	DD	imagerel ?dtor$4@?0??AddU16@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$4@?0??AddU16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$5@?0??AddU16@@YAXXZ@4HA DD imagerel ?dtor$5@?0??AddU16@@YAXXZ@4HA
	DD	imagerel ?dtor$5@?0??AddU16@@YAXXZ@4HA+39
	DD	imagerel $unwind$?dtor$5@?0??AddU16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DD imagerel $LN23
	DD	imagerel $LN23+889
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA+80
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z DD imagerel $LN6
	DD	imagerel $LN6+120
	DD	imagerel $unwind$??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@D@std@@YAPEADPEAD@Z DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z DD imagerel $LN4
	DD	imagerel $LN4+54
	DD	imagerel $unwind$?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN6
	DD	imagerel $LN6+120
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+54
	DD	imagerel $unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@D@std@@YAPEADAEAD@Z DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??$addressof@D@std@@YAPEADAEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN6
	DD	imagerel $LN6+120
	DD	imagerel $unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+100
	DD	imagerel $unwind$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+150
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN7
	DD	imagerel $LN7+263
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN7
	DD	imagerel $LN7+118
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DD imagerel $LN26
	DD	imagerel $LN26+924
	DD	imagerel $unwind$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD imagerel ?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
	DD	imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA+80
	DD	imagerel $unwind$?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z DD imagerel $LN4
	DD	imagerel $LN4+99
	DD	imagerel $unwind$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+93
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+95
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@V?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??$addressof@V?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+74
	DD	imagerel $unwind$??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@QEBD_K@Z@QEBA@QEAD10@Z DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$??R<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@QEBD_K@Z@QEBA@QEAD10@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z DD imagerel $LN6
	DD	imagerel $LN6+402
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+280
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD imagerel ??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	imagerel ??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD imagerel ??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
data$rs	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$_Iosb@H@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD imagerel ??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	imagerel ??_R17?0A@EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
data$rs	SEGMENT
??_R0?AVios_base@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVios_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD imagerel ??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@ios_base@std@@8
	DD	imagerel ??_R17?0A@EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	imagerel ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	imagerel ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD imagerel ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	imagerel ??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allo'
	DB	'cator@D@2@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 01H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	088H
	DD	04H
	DD	imagerel ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	imagerel ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
	DD	imagerel ??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD imagerel ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 01H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	imagerel ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
	DD	imagerel ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_04ODOJPIMC@?5?5?5?$HM@
CONST	SEGMENT
??_C@_04ODOJPIMC@?5?5?5?$HM@ DB '   |', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@GILFLGMO@?6Results?5for?5AddU16_Iavx?5?9?5Satu@
CONST	SEGMENT
??_C@_0CP@GILFLGMO@?6Results?5for?5AddU16_Iavx?5?9?5Satu@ DB 0aH, 'Result'
	DB	's for AddU16_Iavx - Saturated Addition', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@OINKJKG@?6Results?5for?5AddU16_Iavx?5?9?5Wrap@
CONST	SEGMENT
??_C@_0DA@OINKJKG@?6Results?5for?5AddU16_Iavx?5?9?5Wrap@ DB 0aH, 'Results'
	DB	' for AddU16_Iavx - Wraparound Addition', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BBFHBLB@c2?3?5@
CONST	SEGMENT
??_C@_04BBFHBLB@c2?3?5@ DB 'c2: ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MKGLNOBC@?6Results?5for?5AddI16_Iavx?5?9?5Satu@
CONST	SEGMENT
??_C@_0CP@MKGLNOBC@?6Results?5for?5AddI16_Iavx?5?9?5Satu@ DB 0aH, 'Result'
	DB	's for AddI16_Iavx - Saturated Addition', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BDKANOFP@c1?3?5@
CONST	SEGMENT
??_C@_04BDKANOFP@c1?3?5@ DB 'c1: ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OIHAFGEI@b?3?5?5@
CONST	SEGMENT
??_C@_04OIHAFGEI@b?3?5?5@ DB 'b:  ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KPNACMJI@a?3?5?5@
CONST	SEGMENT
??_C@_04KPNACMJI@a?3?5?5@ DB 'a:  ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@IBEKOJDB@?6Results?5for?5AddI16_Iavx?5?9?5Wrap@
CONST	SEGMENT
??_C@_0DA@IBEKOJDB@?6Results?5for?5AddI16_Iavx?5?9?5Wrap@ DB 0aH, 'Result'
	DB	's for AddI16_Iavx - Wraparound Addition', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	088H
CONST	ENDS
;	COMDAT ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DQ FLAT:??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DQ	FLAT:??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DQ FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DQ	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
	DQ	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
	DQ	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
	DQ	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
	DQ	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
	DQ	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ
	DQ	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ
	DQ	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z
	DQ	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z
	DQ	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DQ	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DQ	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAPEAV12@PEAD_J@Z
	DQ	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0DE@DEEHIBMP@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@
CONST	SEGMENT
??_C@_0DE@DEEHIBMP@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@ DB 'D:\visual'
	DB	'\VC\Tools\MSVC\14.41.34120\include\xlocnum', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA DD 049H ; `std::_Maklocwcs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DE@LHAKIDGO@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@
CONST	SEGMENT
??_C@_0DE@LHAKIDGO@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@ DB 'D:\visual'
	DB	'\VC\Tools\MSVC\14.41.34120\include\xlocale', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@IFFPLBNO@?$AAD?$AA?3?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?2?$AAV?$AAC?$AA?2?$AAT?$AAo@
CONST	SEGMENT
??_C@_1GI@IFFPLBNO@?$AAD?$AA?3?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?2?$AAV?$AAC?$AA?2?$AAT?$AAo@ DB 'D'
	DB	00H, ':', 00H, '\', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '4', 00H, '1', 00H, '.', 00H, '3', 00H, '4', 00H, '1', 00H
	DB	'2', 00H, '0', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@BPMGLBMJ@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@
CONST	SEGMENT
??_C@_0DE@BPMGLBMJ@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@ DB 'D:\visual'
	DB	'\VC\Tools\MSVC\14.41.34120\include\xmemory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA DD 0a9H ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 035051301H
	DD	010e3313H
	DD	07007002bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0179H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z DD 025054c19H
	DD	011d2322H
	DD	07016002dH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign'::`2'::<lambda_1>,char const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	063H
	DB	061H
	DB	070H
	DB	061H
	DB	063H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+2
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z$rtcName$1 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign'::`2'::<lambda_1>,char const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z$rtcVarDesc DD 088H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign'::`2'::<lambda_1>,char const *>
	DD	08H
	DQ	FLAT:??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z$rtcName$0
	ORG $+96
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z$rtcFrameData DD 02H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign'::`2'::<lambda_1>,char const *>
	DD	00H
	DQ	FLAT:??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@QEBD_K@Z@QEBA@QEAD10@Z DD 025052201H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@V?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 025051819H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0383H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 0aH
	DB	00H
	DB	00H
	DB	0edH, 03H
	DB	02H
	DB	'<'
	DB	04H
	DB	'%', 08H
	DB	02H
	DB	'v'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
	DD	imagerel $tryMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
	DD	imagerel $ip2state$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DD 025054719H
	DD	0118231dH
	DD	070110031H
	DD	05010H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
	DD	0173H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcName$0 DB 05fH ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcVarDesc DD 068H ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
	DD	010H
	DQ	FLAT:??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcName$0
	ORG $+48
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcFrameData DD 01H ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
	DD	00H
	DQ	FLAT:??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 06H
	DB	00H
	DB	00H
	DB	'r'
	DB	02H
	DB	0f5H, 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025051811H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z DD 025051819H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@D@std@@YAPEADAEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03aH
	DW	0360H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 0aH
	DB	00H
	DB	00H
	DB	0ccH
	DB	02H
	DB	011H, 02H
	DB	04H
	DB	0b9H, 07H
	DB	02H
	DB	0c4H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DD 025054119H
	DD	01122317H
	DD	0700b0031H
	DD	0500aH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
	DD	0173H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcName$0 DB 05fH ; std::operator<<<std::char_traits<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcVarDesc DD 048H ; std::operator<<<std::char_traits<char> >
	DD	010H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcName$0
	ORG $+48
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcFrameData DD 01H ; std::operator<<<std::char_traits<char> >
	DD	00H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02aH
	DW	0406H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$5@?0??AddU16@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$4@?0??AddU16@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??AddU16@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??AddU16@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??AddU16@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??AddU16@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?AddU16@@YAXXZ DB 01aH
	DB	00H
	DB	00H
	DB	01dH, 07H
	DB	02H
	DB	'Z'
	DB	00H
	DB	'd'
	DB	04H
	DB	'Z'
	DB	00H
	DB	'j'
	DB	06H
	DB	'Z'
	DB	00H
	DB	08cH
	DB	08H
	DB	'Z'
	DB	00H
	DB	'd'
	DB	0aH
	DB	'Z'
	DB	00H
	DB	'j'
	DB	0cH
	DB	'Z'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?AddU16@@YAXXZ DB 0cH
	DB	0eH
	DD	imagerel ?dtor$0@?0??AddU16@@YAXXZ@4HA
	DB	036H
	DD	imagerel ?dtor$1@?0??AddU16@@YAXXZ@4HA
	DB	05eH
	DD	imagerel ?dtor$2@?0??AddU16@@YAXXZ@4HA
	DB	086H
	DD	imagerel ?dtor$3@?0??AddU16@@YAXXZ@4HA
	DB	0aeH
	DD	imagerel ?dtor$4@?0??AddU16@@YAXXZ@4HA
	DB	0d6H
	DD	imagerel ?dtor$5@?0??AddU16@@YAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?AddU16@@YAXXZ DB 028H
	DD	imagerel $stateUnwindMap$?AddU16@@YAXXZ
	DD	imagerel $ip2state$?AddU16@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddU16@@YAXXZ DD 025053119H
	DD	010a230fH
	DD	070030083H
	DD	05002H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?AddU16@@YAXXZ
	DD	040aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddU16@@YAXXZ$rtcName$0 DB 061H			; AddU16
	DB	00H
	ORG $+2
?AddU16@@YAXXZ$rtcName$1 DB 062H			; AddU16
	DB	00H
	ORG $+2
?AddU16@@YAXXZ$rtcName$2 DB 063H			; AddU16
	DB	031H
	DB	00H
	ORG $+1
?AddU16@@YAXXZ$rtcName$3 DB 063H			; AddU16
	DB	032H
	DB	00H
	ORG $+1
?AddU16@@YAXXZ$rtcVarDesc DD 0e0H			; AddU16
	DD	010H
	DQ	FLAT:?AddU16@@YAXXZ$rtcName$3
	DD	0b0H
	DD	010H
	DQ	FLAT:?AddU16@@YAXXZ$rtcName$2
	DD	080H
	DD	010H
	DQ	FLAT:?AddU16@@YAXXZ$rtcName$1
	DD	050H
	DD	010H
	DQ	FLAT:?AddU16@@YAXXZ$rtcName$0
	ORG $+192
?AddU16@@YAXXZ$rtcFrameData DD 04H			; AddU16
	DD	00H
	DQ	FLAT:?AddU16@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02aH
	DW	0406H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$5@?0??AddI16@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$4@?0??AddI16@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??AddI16@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??AddI16@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??AddI16@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??AddI16@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?AddI16@@YAXXZ DB 01aH
	DB	00H
	DB	00H
	DB	01dH, 07H
	DB	02H
	DB	'Z'
	DB	00H
	DB	'd'
	DB	04H
	DB	'Z'
	DB	00H
	DB	'j'
	DB	06H
	DB	'Z'
	DB	00H
	DB	08cH
	DB	08H
	DB	'Z'
	DB	00H
	DB	'd'
	DB	0aH
	DB	'Z'
	DB	00H
	DB	'j'
	DB	0cH
	DB	'Z'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?AddI16@@YAXXZ DB 0cH
	DB	0eH
	DD	imagerel ?dtor$0@?0??AddI16@@YAXXZ@4HA
	DB	036H
	DD	imagerel ?dtor$1@?0??AddI16@@YAXXZ@4HA
	DB	05eH
	DD	imagerel ?dtor$2@?0??AddI16@@YAXXZ@4HA
	DB	086H
	DD	imagerel ?dtor$3@?0??AddI16@@YAXXZ@4HA
	DB	0aeH
	DD	imagerel ?dtor$4@?0??AddI16@@YAXXZ@4HA
	DB	0d6H
	DD	imagerel ?dtor$5@?0??AddI16@@YAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?AddI16@@YAXXZ DB 028H
	DD	imagerel $stateUnwindMap$?AddI16@@YAXXZ
	DD	imagerel $ip2state$?AddI16@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddI16@@YAXXZ DD 025053119H
	DD	010a230fH
	DD	070030083H
	DD	05002H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?AddI16@@YAXXZ
	DD	040aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddI16@@YAXXZ$rtcName$0 DB 061H			; AddI16
	DB	00H
	ORG $+2
?AddI16@@YAXXZ$rtcName$1 DB 062H			; AddI16
	DB	00H
	ORG $+2
?AddI16@@YAXXZ$rtcName$2 DB 063H			; AddI16
	DB	031H
	DB	00H
	ORG $+1
?AddI16@@YAXXZ$rtcName$3 DB 063H			; AddI16
	DB	032H
	DB	00H
	ORG $+1
?AddI16@@YAXXZ$rtcVarDesc DD 0e0H			; AddI16
	DD	010H
	DQ	FLAT:?AddI16@@YAXXZ$rtcName$3
	DD	0b0H
	DD	010H
	DQ	FLAT:?AddI16@@YAXXZ$rtcName$2
	DD	080H
	DD	010H
	DQ	FLAT:?AddI16@@YAXXZ$rtcName$1
	DD	050H
	DD	010H
	DQ	FLAT:?AddI16@@YAXXZ$rtcName$0
	ORG $+192
?AddI16@@YAXXZ$rtcFrameData DD 04H			; AddI16
	DD	00H
	DQ	FLAT:?AddI16@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	017aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z DB 06H
	DB	00H
	DB	00H
	DB	01H, 02H
	DB	02H
	DB	'M', 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z DB 028H
	DD	imagerel $stateUnwindMap$??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z
	DD	imagerel $ip2state$??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z DD 025054c19H
	DD	011d2322H
	DD	07016004fH
	DD	05015H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z
	DD	0262H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z$rtcName$0 DB 06fH ; XmmVal::ToStringUint<unsigned short>
	DB	073H
	DB	073H
	DB	00H
	ORG $+12
??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z$rtcVarDesc DD 030H ; XmmVal::ToStringUint<unsigned short>
	DD	0e8H
	DQ	FLAT:??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z$rtcName$0
	ORG $+48
??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z$rtcFrameData DD 01H ; XmmVal::ToStringUint<unsigned short>
	DD	00H
	DQ	FLAT:??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	017bH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z DB 06H
	DB	00H
	DB	00H
	DB	01H, 02H
	DB	02H
	DB	'Q', 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z DB 028H
	DD	imagerel $stateUnwindMap$??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z
	DD	imagerel $ip2state$??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z DD 025054c19H
	DD	011d2322H
	DD	07016004fH
	DD	05015H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z
	DD	0262H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z$rtcName$0 DB 06fH ; XmmVal::ToStringInt<short>
	DB	073H
	DB	073H
	DB	00H
	ORG $+12
??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z$rtcVarDesc DD 030H ; XmmVal::ToStringInt<short>
	DD	0e8H
	DQ	FLAT:??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z$rtcName$0
	ORG $+48
??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z$rtcFrameData DD 01H ; XmmVal::ToStringInt<short>
	DD	00H
	DQ	FLAT:??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0398H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 0aH
	DB	00H
	DB	00H
	DB	'E', 04H
	DB	02H
	DB	'<'
	DB	04H
	DB	'!', 08H
	DB	02H
	DB	'v'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 025054219H
	DD	01132318H
	DD	0700c0035H
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	0193H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0 DB 05fH ; std::operator<<<std::char_traits<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc DD 088H ; std::operator<<<std::char_traits<char> >
	DD	010H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0
	ORG $+48
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData DD 01H ; std::operator<<<std::char_traits<char> >
	DD	00H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z DD 05051601H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z DD 025051201H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ DD 025051319H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z DD 025052201H
	DD	011d2322H
	DD	07016003dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z DD 025052201H
	DD	011d2322H
	DD	070160041H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	016cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ DD 025053d19H
	DD	010e2313H
	DD	07007002bH
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0140H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ$rtcName$0 DB 05fH ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
	DB	050H
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+10
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ$rtcVarDesc DD 048H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
	DD	08H
	DQ	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ$rtcName$0
	ORG $+48
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ$rtcFrameData DD 01H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
	DD	00H
	DQ	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03aH
	DW	032bH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z DD 025054119H
	DD	01122317H
	DD	0700b0039H
	DD	0500aH
	DD	imagerel __GSHandlerCheck
	DD	01b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z$rtcName$0 DB 05fH ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
	DB	04eH
	DB	065H
	DB	077H
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+7
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z$rtcVarDesc DD 0a8H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
	DD	08H
	DQ	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z$rtcName$0
	ORG $+48
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z$rtcFrameData DD 01H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
	DD	00H
	DQ	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03bH
	DB	0d3H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DB 04H
	DB	00H
	DB	00H
	DB	084H
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DB 028H
	DD	imagerel $stateUnwindMap$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	imagerel $ip2state$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 025054219H
	DD	01132318H
	DD	0700c0031H
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	0172H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcName$0 DB 05fH ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
	DB	052H
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcName$1 DB 05fH ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
	DB	056H
	DB	069H
	DB	065H
	DB	077H
	DB	00H
	ORG $+2
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcVarDesc DD 068H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
	DD	018H
	DQ	FLAT:?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcName$1
	DD	028H
	DD	028H
	DQ	FLAT:?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcName$0
	ORG $+96
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcFrameData DD 02H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
	DD	00H
	DQ	FLAT:?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ DD 025053101H
	DD	01132318H
	DD	0700c0033H
	DD	0500bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ$rtcName$0 DB 05fH ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Get_buffer_view
	DB	052H
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ$rtcName$1 DB 05fH ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Get_buffer_view
	DB	05fH
	DB	024H
	DB	041H
	DB	072H
	DB	072H
	DB	061H
	DB	079H
	DB	050H
	DB	061H
	DB	064H
	DB	00H
	ORG $+12
?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ$rtcVarDesc DD 098H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Get_buffer_view
	DD	08H
	DQ	FLAT:?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ$rtcName$1
	DD	028H
	DD	018H
	DQ	FLAT:?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ$rtcName$0
	ORG $+96
?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ$rtcFrameData DD 02H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Get_buffer_view
	DD	00H
	DQ	FLAT:?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DB 08H
	DB	00H
	DB	00H
	DB	0beH
	DB	02H
	DB	'r'
	DB	04H
	DB	0ccH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DB 028H
	DD	imagerel $stateUnwindMap$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DD	imagerel $ip2state$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 025051711H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ToStringU16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 035051801H
	DD	01133318H
	DD	0700c0023H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ToStringI16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 035051801H
	DD	01133318H
	DD	0700c0023H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD 025061e01H
	DD	0119231eH
	DD	070120026H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD 025061e01H
	DD	0119231eH
	DD	070120026H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Max_limit@_J@std@@YA_JXZ DD 025050f01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z DD 035051d01H
	DD	0118331dH
	DD	07011002bH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Maklocwcs@std@@YAPEA_WPEB_W@Z DD 035051301H
	DD	010e3313H
	DD	070070027H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0233H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z DD 035054719H
	DD	0118331dH
	DD	070110047H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0228H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$0 DB 05fH ; std::_Maklocstr<wchar_t>
	DB	057H
	DB	063H
	DB	00H
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$1 DB 05fH ; std::_Maklocstr<wchar_t>
	DB	04dH
	DB	062H
	DB	073H
	DB	074H
	DB	031H
	DB	00H
	ORG $+1
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$2 DB 05fH ; std::_Maklocstr<wchar_t>
	DB	04dH
	DB	062H
	DB	073H
	DB	074H
	DB	032H
	DB	00H
	ORG $+13
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcVarDesc DD 0158H ; std::_Maklocstr<wchar_t>
	DD	08H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$2
	DD	0f8H
	DD	08H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$1
	DD	0d4H
	DD	02H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$0
	ORG $+144
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcFrameData DD 03H ; std::_Maklocstr<wchar_t>
	DD	00H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070029H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	040H
	DB	0f7H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z DD 025054719H
	DD	0118231dH
	DD	070110025H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DB	04dH
	DB	061H
	DB	073H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+8
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcVarDesc DD 028H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DD	08H
	DQ	FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcName$0
	ORG $+48
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DD	00H
	DQ	FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	036H
	DB	0caH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 025053d19H
	DD	010e2313H
	DD	070070031H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+5
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcVarDesc DD 028H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DD	08H
	DQ	FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcName$0
	ORG $+48
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DD	00H
	DQ	FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD 025051d01H
	DD	0118231dH
	DD	070110029H
	DD	05010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	036H
	DB	0c1H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 025053d19H
	DD	010e2313H
	DD	070070029H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	053H
	DB	034H
	DB	00H
	ORG $+12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcVarDesc DD 044H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	01H
	DQ	FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	00H
	DQ	FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070029H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z DB 060H
	DD	imagerel $ip2state$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z DD 025051d19H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z DB 060H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z DD 025051819H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD 035051d01H
	DD	0118331dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@D@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen_string@std@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	036H
	DB	082H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD 025053d19H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all_locked_v3
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	04H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	00H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 035051801H
	DD	01133318H
	DD	0700c002fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030023H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?not_eof@?$_Narrow_char_traits@DH@std@@SAHH@Z DD 025051201H
	DD	010d2312H
	DD	07006001fH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z DD 025051601H
	DD	01112316H
	DD	0700a001fH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z DD 025051201H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z DD 025051201H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq@?$_Narrow_char_traits@DH@std@@SA_NDD@Z DD 025051601H
	DD	01112316H
	DD	0700a001fH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wmemcpy DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
_TEXT	SEGMENT
??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor', COMDAT
  00000	48 63 41 fc	 movsxd	 rax, DWORD PTR [rcx-4]
  00004	48 2b c8	 sub	 rcx, rax
  00007	e9 00 00 00 00	 jmp	 ??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 8
_Ptr_container$ = 40
_Ptr$ = 72
_Bytes$ = 320
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 151  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 152  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 153  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00020	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  00027	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  0002b	48 89 45 08	 mov	 QWORD PTR _Block_size$[rbp], rax

; 154  :     if (_Block_size <= _Bytes) {

  0002f	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  00036	48 39 45 08	 cmp	 QWORD PTR _Block_size$[rbp], rax
  0003a	77 06		 ja	 SHORT $LN8@Allocate_m

; 155  :         _Throw_bad_array_new_length(); // add overflow

  0003c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
  00041	90		 npad	 1
$LN8@Allocate_m:

; 156  :     }
; 157  : 
; 158  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00042	48 8b 4d 08	 mov	 rcx, QWORD PTR _Block_size$[rbp]
  00046	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  0004b	48 89 45 28	 mov	 QWORD PTR _Ptr_container$[rbp], rax
$LN4@Allocate_m:

; 159  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0004f	48 83 7d 28 00	 cmp	 QWORD PTR _Ptr_container$[rbp], 0
  00054	74 02		 je	 SHORT $LN9@Allocate_m
  00056	eb 6c		 jmp	 SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  0005f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00064	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0006b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00070	45 33 c9	 xor	 r9d, r9d
  00073	41 b8 9f 00 00
	00		 mov	 r8d, 159		; 0000009fH
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@BPMGLBMJ@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@
  00080	b9 02 00 00 00	 mov	 ecx, 2
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0008b	83 f8 01	 cmp	 eax, 1
  0008e	75 03		 jne	 SHORT $LN12@Allocate_m
  00090	cc		 int	 3
  00091	33 c0		 xor	 eax, eax
$LN12@Allocate_m:
  00093	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0009c	41 b9 9f 00 00
	00		 mov	 r9d, 159		; 0000009fH
  000a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1GI@IFFPLBNO@?$AAD?$AA?3?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?2?$AAV?$AAC?$AA?2?$AAT?$AAo@
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000bd	90		 npad	 1
  000be	33 c0		 xor	 eax, eax
  000c0	85 c0		 test	 eax, eax
  000c2	75 94		 jne	 SHORT $LN7@Allocate_m
$LN10@Allocate_m:
  000c4	33 c0		 xor	 eax, eax
  000c6	85 c0		 test	 eax, eax
  000c8	75 85		 jne	 SHORT $LN4@Allocate_m

; 160  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  000ca	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr_container$[rbp]
  000ce	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  000d2	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
  000d6	48 89 45 48	 mov	 QWORD PTR _Ptr$[rbp], rax

; 161  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  000da	b8 08 00 00 00	 mov	 eax, 8
  000df	48 6b c0 ff	 imul	 rax, rax, -1
  000e3	48 8b 4d 48	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000e7	48 8b 55 28	 mov	 rdx, QWORD PTR _Ptr_container$[rbp]
  000eb	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 162  : 
; 163  : #ifdef _DEBUG
; 164  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

  000ef	b8 08 00 00 00	 mov	 eax, 8
  000f4	48 6b c0 fe	 imul	 rax, rax, -2
  000f8	48 8b 4d 48	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000fc	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  00106	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 165  : #endif // defined(_DEBUG)
; 166  :     return _Ptr;

  0010a	48 8b 45 48	 mov	 rax, QWORD PTR _Ptr$[rbp]
$LN11@Allocate_m:

; 167  : }

  0010e	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00115	5f		 pop	 rdi
  00116	5d		 pop	 rbp
  00117	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
_Al$ = 224
_Ptr$ = 232
_Count$ = 240
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 682  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1

; 683  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 684  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 685  :         if (_STD is_constant_evaluated()) {
; 686  :             _Al.deallocate(_Ptr, _Count);
; 687  :         } else
; 688  : #endif // _HAS_CXX20
; 689  :         {
; 690  :             (void) _Al;
; 691  :             _STD _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0002a	48 6b 85 f0 00
	00 00 10	 imul	 rax, QWORD PTR _Count$[rbp], 16
  00032	48 8b d0	 mov	 rdx, rax
  00035	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  0003c	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z ; std::_Deallocate<16>
  00041	90		 npad	 1

; 692  :         }
; 693  :     }

  00042	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00049	5f		 pop	 rdi
  0004a	5d		 pop	 rbp
  0004b	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\type_traits
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 1558 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A1A74C2F_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1559 :     return __builtin_addressof(_Val);

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 1560 : }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z
_TEXT	SEGMENT
_Old_capacity$ = 8
_New_capacity$ = 40
_Al$ = 72
_New_ptr$ = 104
__$ArrayPad$ = 312
this$ = 352
_New_size$ = 360
_Fn$ = 368
<_Args_0>$ = 376
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign'::`2'::<lambda_1>,char const *>, COMDAT

; 2970 :     _CONSTEXPR20 basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00027	b9 22 00 00 00	 mov	 ecx, 34			; 00000022H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  00053	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00058	90		 npad	 1

; 2971 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 2972 :         // _Fn(_New_ptr, _New_size, _Args...)
; 2973 :         if (_New_size > max_size()) {

  00059	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00060	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00065	48 39 85 68 01
	00 00		 cmp	 QWORD PTR _New_size$[rbp], rax
  0006c	76 06		 jbe	 SHORT $LN2@Reallocate

; 2974 :             _Xlen_string(); // result too long

  0006e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
  00073	90		 npad	 1
$LN2@Reallocate:

; 2975 :         }
; 2976 : 
; 2977 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00074	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007f	48 89 45 08	 mov	 QWORD PTR _Old_capacity$[rbp], rax

; 2978 :         size_type _New_capacity       = _Calculate_growth(_New_size);

  00083	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR _New_size$[rbp]
  0008a	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00091	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00096	48 89 45 28	 mov	 QWORD PTR _New_capacity$[rbp], rax

; 2979 :         auto& _Al                     = _Getal();

  0009a	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a1	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  000a6	48 89 45 48	 mov	 QWORD PTR _Al$[rbp], rax

; 2980 :         const pointer _New_ptr        = _Allocate_for_capacity(_Al, _New_capacity); // throws

  000aa	48 8d 55 28	 lea	 rdx, QWORD PTR _New_capacity$[rbp]
  000ae	48 8b 4d 48	 mov	 rcx, QWORD PTR _Al$[rbp]
  000b2	e8 00 00 00 00	 call	 ??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Allocate_for_capacity<0>
  000b7	48 89 45 68	 mov	 QWORD PTR _New_ptr$[rbp], rax

; 2981 : 
; 2982 :         _Mypair._Myval2._Orphan_all();

  000bb	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c2	48 8b c8	 mov	 rcx, rax
  000c5	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all
  000ca	90		 npad	 1

; 2983 :         _ASAN_STRING_REMOVE(*this);
; 2984 :         _Mypair._Myval2._Mysize = _New_size;

  000cb	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d2	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _New_size$[rbp]
  000d9	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2985 :         _Mypair._Myval2._Myres  = _New_capacity;

  000dd	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e4	48 8b 4d 28	 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  000e8	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 2986 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  000ec	48 8b 4d 68	 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  000f0	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  000f5	4c 8b 8d 78 01
	00 00		 mov	 r9, QWORD PTR <_Args_0>$[rbp]
  000fc	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR _New_size$[rbp]
  00103	48 8b d0	 mov	 rdx, rax
  00106	48 8d 8d 70 01
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  0010d	e8 00 00 00 00	 call	 ??R<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@QEBD_K@Z@QEBA@QEAD10@Z ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign'::`2'::<lambda_1>::operator()
  00112	90		 npad	 1

; 2987 :         if (_Old_capacity > _Small_string_capacity) {

  00113	48 83 7d 08 0f	 cmp	 QWORD PTR _Old_capacity$[rbp], 15
  00118	76 2a		 jbe	 SHORT $LN3@Reallocate

; 2988 :             _Deallocate_for_capacity(_Al, _Mypair._Myval2._Bx._Ptr, _Old_capacity);

  0011a	4c 8b 45 08	 mov	 r8, QWORD PTR _Old_capacity$[rbp]
  0011e	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00125	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00129	48 8b 4d 48	 mov	 rcx, QWORD PTR _Al$[rbp]
  0012d	e8 00 00 00 00	 call	 ?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Deallocate_for_capacity
  00132	90		 npad	 1

; 2989 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  00133	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0013a	48 8b 4d 68	 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0013e	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2990 :         } else {

  00142	eb 18		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 2991 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00144	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0014b	48 83 c0 08	 add	 rax, 8
  0014f	48 8d 55 68	 lea	 rdx, QWORD PTR _New_ptr$[rbp]
  00153	48 8b c8	 mov	 rcx, rax
  00156	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
  0015b	90		 npad	 1
$LN4@Reallocate:

; 2992 :         }
; 2993 : 
; 2994 :         _ASAN_STRING_CREATE(*this);
; 2995 :         return *this;

  0015c	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN5@Reallocate:

; 2996 :     }

  00163	48 8b f8	 mov	 rdi, rax
  00166	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0016a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z$rtcFrameData
  00171	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00176	48 8b c7	 mov	 rax, rdi
  00179	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00180	48 33 cd	 xor	 rcx, rbp
  00183	e8 00 00 00 00	 call	 __security_check_cookie
  00188	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  0018f	5f		 pop	 rdi
  00190	5d		 pop	 rbp
  00191	c3		 ret	 0
??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign'::`2'::<lambda_1>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??R<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@QEBD_K@Z@QEBA@QEAD10@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_New_ptr$ = 264
_Count$ = 272
_Ptr$ = 280
??R<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@QEBD_K@Z@QEBA@QEAD10@Z PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign'::`2'::<lambda_1>::operator(), COMDAT

; 1617 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) _STATIC_CALL_OPERATOR {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002e	90		 npad	 1

; 1618 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

  0002f	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00036	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0003d	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00044	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy
  00049	90		 npad	 1

; 1619 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0004a	c6 85 c4 00 00
	00 00		 mov	 BYTE PTR $T1[rbp], 0
  00051	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00058	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0005f	48 03 c8	 add	 rcx, rax
  00062	48 8b c1	 mov	 rax, rcx
  00065	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0006c	48 8b c8	 mov	 rcx, rax
  0006f	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
  00074	90		 npad	 1

; 1620 :             },

  00075	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007c	5f		 pop	 rdi
  0007d	5d		 pop	 rbp
  0007e	c3		 ret	 0
??R<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@QEBD_K@Z@QEBA@QEAD10@Z ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign'::`2'::<lambda_1>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
_Val1$ = 240
??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>, COMDAT

; 1500 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  00023	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00028	90		 npad	 1
  00029	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  00038	90		 npad	 1
  00039	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00047	5f		 pop	 rdi
  00048	5d		 pop	 rbp
  00049	c3		 ret	 0
??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 4
_Count$ = 256
??$_Get_size_of_n@$00@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<1>, COMDAT

; 79   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 80   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00020	c6 45 04 00	 mov	 BYTE PTR _Overflow_is_possible$[rbp], 0

; 81   : 
; 82   :     if constexpr (_Overflow_is_possible) {
; 83   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 84   :         if (_Count > _Max_possible) {
; 85   :             _Throw_bad_array_new_length(); // multiply overflow
; 86   :         }
; 87   :     }
; 88   : 
; 89   :     return _Count * _Ty_size;

  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]

; 90   : }

  0002b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\type_traits
;	COMDAT ??$addressof@V?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@V?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z PROC ; std::addressof<std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 1558 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A1A74C2F_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1559 :     return __builtin_addressof(_Val);

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 1560 : }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
??$addressof@V?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ENDP ; std::addressof<std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 224
??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits>, COMDAT

; 194  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 195  :     // allocate _Bytes
; 196  :     if (_Bytes == 0) {

  00020	48 83 bd e0 00
	00 00 00	 cmp	 QWORD PTR _Bytes$[rbp], 0
  00028	75 04		 jne	 SHORT $LN2@Allocate

; 197  :         return nullptr;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 27		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 198  :     }
; 199  : 
; 200  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 201  :     if (_STD is_constant_evaluated()) {
; 202  :         return _Traits::_Allocate(_Bytes);
; 203  :     }
; 204  : #endif // _HAS_CXX20
; 205  : 
; 206  : #ifdef __cpp_aligned_new
; 207  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 208  :         size_t _Passed_align = _Align;
; 209  : #if defined(_M_IX86) || defined(_M_X64)
; 210  :         if (_Bytes >= _Big_allocation_threshold) {
; 211  :             // boost the alignment of big allocations to help autovectorization
; 212  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 213  :         }
; 214  : #endif // defined(_M_IX86) || defined(_M_X64)
; 215  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 216  :     } else
; 217  : #endif // defined(__cpp_aligned_new)
; 218  :     {
; 219  : #if defined(_M_IX86) || defined(_M_X64)
; 220  :         if (_Bytes >= _Big_allocation_threshold) {

  0002e	48 81 bd e0 00
	00 00 00 10 00
	00		 cmp	 QWORD PTR _Bytes$[rbp], 4096 ; 00001000H
  00039	72 0e		 jb	 SHORT $LN3@Allocate

; 221  :             // boost the alignment of big allocations to help autovectorization
; 222  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0003b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00042	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00047	eb 0c		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 223  :         }
; 224  : #endif // defined(_M_IX86) || defined(_M_X64)
; 225  :         return _Traits::_Allocate(_Bytes);

  00049	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00050	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
$LN1@Allocate:

; 226  :     }
; 227  : }

  00055	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 4
_Max_possible$1 = 40
_Count$ = 288
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 79   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 80   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00020	c6 45 04 01	 mov	 BYTE PTR _Overflow_is_possible$[rbp], 1

; 81   : 
; 82   :     if constexpr (_Overflow_is_possible) {
; 83   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00024	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  0002e	48 89 45 28	 mov	 QWORD PTR _Max_possible$1[rbp], rax

; 84   :         if (_Count > _Max_possible) {

  00032	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  0003c	48 39 85 20 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  00043	76 06		 jbe	 SHORT $LN2@Get_size_o

; 85   :             _Throw_bad_array_new_length(); // multiply overflow

  00045	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
  0004a	90		 npad	 1
$LN2@Get_size_o:

; 86   :         }
; 87   :     }
; 88   : 
; 89   :     return _Count * _Ty_size;

  0004b	48 6b 85 20 01
	00 00 10	 imul	 rax, QWORD PTR _Count$[rbp], 16
$LN3@Get_size_o:

; 90   : }

  00053	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\type_traits
;	COMDAT ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z PROC		; std::addressof<char *>, COMDAT

; 1558 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A1A74C2F_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1559 :     return __builtin_addressof(_Val);

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 1560 : }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xutility
;	COMDAT ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z
_TEXT	SEGMENT
$T1 = 200
_Obj$ = 256
<_Args_0>$ = 264
??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 396  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DB98B07B_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 397  : #if _HAS_CXX20
; 398  :     if (_STD is_constant_evaluated()) {
; 399  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 400  :     } else
; 401  : #endif // _HAS_CXX20
; 402  :     {
; 403  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00025	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Obj$[rbp]
  0002c	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char *>
  00031	48 8b d0	 mov	 rdx, rax
  00034	b9 08 00 00 00	 mov	 ecx, 8
  00039	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0003e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00045	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]
  0004c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00053	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00056	48 89 08	 mov	 QWORD PTR [rax], rcx

; 404  :     }
; 405  : }

  00059	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z
_TEXT	SEGMENT
_Fancy_ptr$ = 8
_Al$ = 256
_Capacity$ = 264
??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Allocate_for_capacity<0>, COMDAT

; 804  :     _NODISCARD static _CONSTEXPR20 pointer _Allocate_for_capacity(_Alty& _Al, size_type& _Capacity) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 805  :         _STL_INTERNAL_CHECK(_Capacity > _Small_string_capacity);
; 806  :         ++_Capacity; // Take null terminator into consideration

  00025	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Capacity$[rbp]
  0002c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002f	48 ff c0	 inc	 rax
  00032	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Capacity$[rbp]
  00039	48 89 01	 mov	 QWORD PTR [rcx], rax

; 807  : 
; 808  :         pointer _Fancy_ptr = nullptr;

  0003c	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR _Fancy_ptr$[rbp], 0

; 809  :         if constexpr (_Policy == _Allocation_policy::_At_least) {
; 810  :             _Fancy_ptr = _Allocate_at_least_helper(_Al, _Capacity);

  00044	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Capacity$[rbp]
  0004b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00052	e8 00 00 00 00	 call	 ??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z ; std::_Allocate_at_least_helper<std::allocator<char> >
  00057	48 89 45 08	 mov	 QWORD PTR _Fancy_ptr$[rbp], rax

; 811  :         } else {
; 812  :             _STL_INTERNAL_STATIC_ASSERT(_Policy == _Allocation_policy::_Exactly);
; 813  :             _Fancy_ptr = _Al.allocate(_Capacity);
; 814  :         }
; 815  : 
; 816  : #if _HAS_CXX20
; 817  :         // Start element lifetimes to avoid UB. This is a more general mechanism than _String_val::_Activate_SSO_buffer,
; 818  :         // but likely more impactful to throughput.
; 819  :         if (_STD is_constant_evaluated()) {
; 820  :             _Elem* const _Ptr = _Unfancy(_Fancy_ptr);
; 821  :             for (size_type _Idx = 0; _Idx < _Capacity; ++_Idx) {
; 822  :                 _STD construct_at(_Ptr + _Idx);
; 823  :             }
; 824  :         }
; 825  : #endif // _HAS_CXX20
; 826  :         --_Capacity;

  0005b	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Capacity$[rbp]
  00062	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00065	48 ff c8	 dec	 rax
  00068	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Capacity$[rbp]
  0006f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 827  :         return _Fancy_ptr;

  00072	48 8b 45 08	 mov	 rax, QWORD PTR _Fancy_ptr$[rbp]

; 828  :     }

  00076	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007d	5f		 pop	 rdi
  0007e	5d		 pop	 rbp
  0007f	c3		 ret	 0
??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Allocate_for_capacity<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 35   : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 36   :     return _Ptr;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]

; 37   : }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 224
_Ptr$ = 232
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1099 : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 1100 :     // deallocate a plain pointer using an allocator
; 1101 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1102 :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 1103 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

  00025	41 b8 01 00 00
	00		 mov	 r8d, 1
  0002b	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00032	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00039	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  0003e	90		 npad	 1

; 1104 :     } else {
; 1105 :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 1106 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1107 :     }
; 1108 : }

  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
_TEXT	SEGMENT
_State$ = 4
_Pad$ = 40
_Ok$ = 72
$T4 = 312
tv279 = 324
tv281 = 324
tv136 = 328
tv291 = 328
tv292 = 328
__$ArrayPad$ = 336
_Ostr$ = 384
_Data$ = 392
_Size$ = 400
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z PROC ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>, COMDAT

; 468  :     basic_ostream<_Elem, _Traits>& _Ostr, const _Elem* const _Data, const _SizeT _Size) {

$LN26:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 50 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B3B6A1BA___msvc_string_view@hpp
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00053	90		 npad	 1

; 469  :     // insert a character-type sequence into _Ostr as if through a basic_string copy
; 470  :     using _Ostr_t                    = basic_ostream<_Elem, _Traits>;
; 471  :     typename _Ostr_t::iostate _State = _Ostr_t::goodbit;

  00054	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 472  : 
; 473  :     _SizeT _Pad;
; 474  :     if (_Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size) {

  0005b	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00062	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00065	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00069	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00070	48 03 c8	 add	 rcx, rax
  00073	48 8b c1	 mov	 rax, rcx
  00076	48 8b c8	 mov	 rcx, rax
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0007f	48 85 c0	 test	 rax, rax
  00082	7e 2d		 jle	 SHORT $LN10@Insert_str
  00084	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0008b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00092	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00099	48 03 c8	 add	 rcx, rax
  0009c	48 8b c1	 mov	 rax, rcx
  0009f	48 8b c8	 mov	 rcx, rax
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000a8	48 3b 85 90 01
	00 00		 cmp	 rax, QWORD PTR _Size$[rbp]
  000af	77 0a		 ja	 SHORT $LN8@Insert_str
$LN10@Insert_str:

; 475  :         _Pad = 0;

  000b1	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR _Pad$[rbp], 0

; 476  :     } else {

  000b9	eb 2f		 jmp	 SHORT $LN9@Insert_str
$LN8@Insert_str:

; 477  :         _Pad = static_cast<_SizeT>(_Ostr.width()) - _Size;

  000bb	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000c9	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000d0	48 03 c8	 add	 rcx, rax
  000d3	48 8b c1	 mov	 rax, rcx
  000d6	48 8b c8	 mov	 rcx, rax
  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000df	48 2b 85 90 01
	00 00		 sub	 rax, QWORD PTR _Size$[rbp]
  000e6	48 89 45 28	 mov	 QWORD PTR _Pad$[rbp], rax
$LN9@Insert_str:

; 478  :     }
; 479  : 
; 480  :     const typename _Ostr_t::sentry _Ok(_Ostr);

  000ea	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  000f1	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  000f5	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000fa	90		 npad	 1

; 481  : 
; 482  :     if (!_Ok) {

  000fb	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  000ff	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00104	0f b6 c0	 movzx	 eax, al
  00107	85 c0		 test	 eax, eax
  00109	75 0e		 jne	 SHORT $LN11@Insert_str

; 483  :         _State |= _Ostr_t::badbit;

  0010b	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0010e	83 c8 04	 or	 eax, 4
  00111	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 484  :     } else { // state okay, insert characters

  00114	e9 0b 02 00 00	 jmp	 $LN12@Insert_str
$LN11@Insert_str:

; 485  :         _TRY_IO_BEGIN
; 486  :         if ((_Ostr.flags() & _Ostr_t::adjustfield) != _Ostr_t::left) {

  00119	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00120	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00123	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00127	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0012e	48 03 c8	 add	 rcx, rax
  00131	48 8b c1	 mov	 rax, rcx
  00134	48 8b c8	 mov	 rcx, rax
  00137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  0013d	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00142	83 f8 40	 cmp	 eax, 64			; 00000040H
  00145	0f 84 a5 00 00
	00		 je	 $LN14@Insert_str

; 487  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0014b	eb 0b		 jmp	 SHORT $LN4@Insert_str
$LN2@Insert_str:
  0014d	48 8b 45 28	 mov	 rax, QWORD PTR _Pad$[rbp]
  00151	48 ff c8	 dec	 rax
  00154	48 89 45 28	 mov	 QWORD PTR _Pad$[rbp], rax
$LN4@Insert_str:
  00158	48 83 7d 28 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  0015d	0f 86 8d 00 00
	00		 jbe	 $LN14@Insert_str

; 488  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00163	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0016a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0016d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00171	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00178	48 03 c8	 add	 rcx, rax
  0017b	48 8b c1	 mov	 rax, rcx
  0017e	48 8b c8	 mov	 rcx, rax
  00181	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  00187	88 85 44 01 00
	00		 mov	 BYTE PTR tv281[rbp], al
  0018d	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00194	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00197	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  0019b	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  001a2	48 03 d1	 add	 rdx, rcx
  001a5	48 8b ca	 mov	 rcx, rdx
  001a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001ae	0f b6 8d 44 01
	00 00		 movzx	 ecx, BYTE PTR tv281[rbp]
  001b5	0f b6 d1	 movzx	 edx, cl
  001b8	48 8b c8	 mov	 rcx, rax
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001c1	89 85 48 01 00
	00		 mov	 DWORD PTR tv136[rbp], eax
  001c7	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001cc	8b 95 48 01 00
	00		 mov	 edx, DWORD PTR tv136[rbp]
  001d2	8b c8		 mov	 ecx, eax
  001d4	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  001d9	0f b6 c0	 movzx	 eax, al
  001dc	85 c0		 test	 eax, eax
  001de	74 0b		 je	 SHORT $LN15@Insert_str

; 489  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  001e0	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  001e3	83 c8 04	 or	 eax, 4
  001e6	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 490  :                     break;

  001e9	eb 05		 jmp	 SHORT $LN14@Insert_str
$LN15@Insert_str:

; 491  :                 }
; 492  :             }

  001eb	e9 5d ff ff ff	 jmp	 $LN2@Insert_str
$LN14@Insert_str:

; 493  :         }
; 494  : 
; 495  :         if (_State == _Ostr_t::goodbit
; 496  :             && _Ostr.rdbuf()->sputn(_Data, static_cast<streamsize>(_Size)) != static_cast<streamsize>(_Size)) {

  001f0	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  001f4	75 60		 jne	 SHORT $LN16@Insert_str
  001f6	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  001fd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00200	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00204	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0020b	48 03 c8	 add	 rcx, rax
  0020e	48 8b c1	 mov	 rax, rcx
  00211	48 8b c8	 mov	 rcx, rax
  00214	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0021a	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR _Size$[rbp]
  00221	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR _Data$[rbp]
  00228	48 8b c8	 mov	 rcx, rax
  0022b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  00231	48 89 85 48 01
	00 00		 mov	 QWORD PTR tv291[rbp], rax
  00238	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR _Size$[rbp]
  0023f	48 39 85 48 01
	00 00		 cmp	 QWORD PTR tv291[rbp], rax
  00246	74 0e		 je	 SHORT $LN16@Insert_str

; 497  :             _State |= _Ostr_t::badbit;

  00248	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0024b	83 c8 04	 or	 eax, 4
  0024e	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 498  :         } else {

  00251	e9 a5 00 00 00	 jmp	 $LN17@Insert_str
$LN16@Insert_str:

; 499  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00256	eb 0b		 jmp	 SHORT $LN7@Insert_str
$LN5@Insert_str:
  00258	48 8b 45 28	 mov	 rax, QWORD PTR _Pad$[rbp]
  0025c	48 ff c8	 dec	 rax
  0025f	48 89 45 28	 mov	 QWORD PTR _Pad$[rbp], rax
$LN7@Insert_str:
  00263	48 83 7d 28 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  00268	0f 86 8d 00 00
	00		 jbe	 $LN17@Insert_str

; 500  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0026e	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00275	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00278	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0027c	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00283	48 03 c8	 add	 rcx, rax
  00286	48 8b c1	 mov	 rax, rcx
  00289	48 8b c8	 mov	 rcx, rax
  0028c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  00292	88 85 44 01 00
	00		 mov	 BYTE PTR tv279[rbp], al
  00298	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0029f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002a2	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  002a6	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  002ad	48 03 d1	 add	 rdx, rcx
  002b0	48 8b ca	 mov	 rcx, rdx
  002b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002b9	0f b6 8d 44 01
	00 00		 movzx	 ecx, BYTE PTR tv279[rbp]
  002c0	0f b6 d1	 movzx	 edx, cl
  002c3	48 8b c8	 mov	 rcx, rax
  002c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  002cc	89 85 48 01 00
	00		 mov	 DWORD PTR tv292[rbp], eax
  002d2	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  002d7	8b 95 48 01 00
	00		 mov	 edx, DWORD PTR tv292[rbp]
  002dd	8b c8		 mov	 ecx, eax
  002df	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  002e4	0f b6 c0	 movzx	 eax, al
  002e7	85 c0		 test	 eax, eax
  002e9	74 0b		 je	 SHORT $LN18@Insert_str

; 501  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  002eb	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  002ee	83 c8 04	 or	 eax, 4
  002f1	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 502  :                     break;

  002f4	eb 05		 jmp	 SHORT $LN17@Insert_str
$LN18@Insert_str:

; 503  :                 }
; 504  :             }

  002f6	e9 5d ff ff ff	 jmp	 $LN5@Insert_str
$LN17@Insert_str:

; 505  :         }
; 506  : 
; 507  :         _Ostr.width(0);

  002fb	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00302	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00305	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00309	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00310	48 03 c8	 add	 rcx, rax
  00313	48 8b c1	 mov	 rax, rcx
  00316	33 d2		 xor	 edx, edx
  00318	48 8b c8	 mov	 rcx, rax
  0031b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  00321	90		 npad	 1
  00322	eb 00		 jmp	 SHORT $LN12@Insert_str
$LN24@Insert_str:
$LN12@Insert_str:

; 508  :         _CATCH_IO_(_Ostr_t, _Ostr)
; 509  :     }
; 510  : 
; 511  :     _Ostr.setstate(_State);

  00324	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0032b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0032e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00332	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00339	48 03 c8	 add	 rcx, rax
  0033c	48 8b c1	 mov	 rax, rcx
  0033f	45 33 c0	 xor	 r8d, r8d
  00342	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  00345	48 8b c8	 mov	 rcx, rax
  00348	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0034e	90		 npad	 1

; 512  :     return _Ostr;

  0034f	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00356	48 89 85 38 01
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  0035d	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00361	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00366	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR $T4[rbp]

; 513  : }

  0036d	48 8b f8	 mov	 rdi, rax
  00370	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00374	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcFrameData
  0037b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00380	48 8b c7	 mov	 rax, rdi
  00383	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0038a	48 33 cd	 xor	 rcx, rbp
  0038d	e8 00 00 00 00	 call	 __security_check_cookie
  00392	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00399	5f		 pop	 rdi
  0039a	5d		 pop	 rbp
  0039b	c3		 ret	 0
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z ENDP ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Pad$ = 40
_Ok$ = 72
$T4 = 312
tv279 = 324
tv281 = 324
tv136 = 328
tv291 = 328
tv292 = 328
__$ArrayPad$ = 336
_Ostr$ = 384
_Data$ = 392
_Size$ = 400
?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA PROC ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA ENDP ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Pad$ = 40
_Ok$ = 72
$T4 = 312
tv279 = 324
tv281 = 324
tv136 = 328
tv291 = 328
tv292 = 328
__$ArrayPad$ = 336
_Ostr$ = 384
_Data$ = 392
_Size$ = 400
?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA PROC ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::catch$1

; 508  :         _CATCH_IO_(_Ostr_t, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$0:
  00014	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN24@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA ENDP ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 128  :         explicit __CLR_OR_THIS_CALL operator bool() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__732225D7_ostream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 129  :             return _Ok;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]

; 130  :         }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Zero_uncaught_exceptions$ = 4
tv72 = 212
this$ = 256
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 113  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__732225D7_ostream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 114  : #if !_HAS_EXCEPTIONS
; 115  :             const bool _Zero_uncaught_exceptions = true;
; 116  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00020	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00025	0f b6 c0	 movzx	 eax, al
  00028	85 c0		 test	 eax, eax
  0002a	75 09		 jne	 SHORT $LN4@sentry
  0002c	c6 85 d4 00 00
	00 01		 mov	 BYTE PTR tv72[rbp], 1
  00033	eb 07		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  00035	c6 85 d4 00 00
	00 00		 mov	 BYTE PTR tv72[rbp], 0
$LN5@sentry:
  0003c	0f b6 85 d4 00
	00 00		 movzx	 eax, BYTE PTR tv72[rbp]
  00043	88 45 04	 mov	 BYTE PTR _Zero_uncaught_exceptions$[rbp], al

; 118  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 119  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 120  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 121  : 
; 122  :             if (_Zero_uncaught_exceptions) {

  00046	0f b6 45 04	 movzx	 eax, BYTE PTR _Zero_uncaught_exceptions$[rbp]
  0004a	85 c0		 test	 eax, eax
  0004c	74 11		 je	 SHORT $LN2@sentry

; 123  :                 this->_Myostr._Osfx();

  0004e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00055	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  0005e	90		 npad	 1
$LN2@sentry:

; 124  :             }
; 125  :         }

  0005f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0006b	90		 npad	 1
  0006c	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00073	5f		 pop	 rdi
  00074	5d		 pop	 rbp
  00075	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 96   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__732225D7_ostream
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  0002c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00033	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00038	90		 npad	 1

; 97   :             if (!_Ostr.good()) {

  00039	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00040	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00043	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00047	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0004e	48 03 c8	 add	 rcx, rax
  00051	48 8b c1	 mov	 rax, rcx
  00054	48 8b c8	 mov	 rcx, rax
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  0005d	0f b6 c0	 movzx	 eax, al
  00060	85 c0		 test	 eax, eax
  00062	75 10		 jne	 SHORT $LN2@sentry

; 98   :                 _Ok = false;

  00064	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006b	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0

; 99   :                 return;

  0006f	e9 82 00 00 00	 jmp	 $LN1@sentry
$LN2@sentry:

; 100  :             }
; 101  : 
; 102  :             const auto _Tied = _Ostr.tie();

  00074	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00082	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00089	48 03 c8	 add	 rcx, rax
  0008c	48 8b c1	 mov	 rax, rcx
  0008f	48 8b c8	 mov	 rcx, rax
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  00098	48 89 45 08	 mov	 QWORD PTR _Tied$[rbp], rax

; 103  :             if (!_Tied || _Tied == &_Ostr) {

  0009c	48 83 7d 08 00	 cmp	 QWORD PTR _Tied$[rbp], 0
  000a1	74 0d		 je	 SHORT $LN4@sentry
  000a3	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000aa	48 39 45 08	 cmp	 QWORD PTR _Tied$[rbp], rax
  000ae	75 0d		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 104  :                 _Ok = true;

  000b0	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b7	c6 40 08 01	 mov	 BYTE PTR [rax+8], 1

; 105  :                 return;

  000bb	eb 39		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 106  :             }
; 107  : 
; 108  :             _Tied->flush();

  000bd	48 8b 4d 08	 mov	 rcx, QWORD PTR _Tied$[rbp]
  000c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
  000c7	90		 npad	 1

; 109  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000c8	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000cf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d2	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000d6	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000dd	48 03 c8	 add	 rcx, rax
  000e0	48 8b c1	 mov	 rax, rcx
  000e3	48 8b c8	 mov	 rcx, rax
  000e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  000ec	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f3	88 41 08	 mov	 BYTE PTR [rcx+8], al
$LN1@sentry:

; 110  :         }

  000f6	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fd	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00104	5f		 pop	 rdi
  00105	5d		 pop	 rbp
  00106	c3		 ret	 0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Rdbuf$ = 8
tv72 = 216
this$ = 256
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 82   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__732225D7_ostream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 83   :             const auto _Rdbuf = _Myostr.rdbuf();

  00020	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002a	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  00031	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv72[rbp]
  00038	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003b	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0003f	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv72[rbp]
  00046	48 03 c8	 add	 rcx, rax
  00049	48 8b c1	 mov	 rax, rcx
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00055	48 89 45 08	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 84   :             if (_Rdbuf) {

  00059	48 83 7d 08 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  0005e	74 0f		 je	 SHORT $LN2@Sentry_bas

; 85   :                 _Rdbuf->_Unlock();

  00060	48 8b 45 08	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  00064	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00067	48 8b 4d 08	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  0006b	ff 50 10	 call	 QWORD PTR [rax+16]
  0006e	90		 npad	 1
$LN2@Sentry_bas:

; 86   :             }
; 87   :         }

  0006f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00076	5f		 pop	 rdi
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Rdbuf$ = 8
tv73 = 216
this$ = 256
_Ostr$ = 264
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 75   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__732225D7_ostream
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00033	48 89 08	 mov	 QWORD PTR [rax], rcx

; 76   :             const auto _Rdbuf = _Myostr.rdbuf();

  00036	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00040	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv73[rbp], rax
  00047	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv73[rbp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00055	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv73[rbp]
  0005c	48 03 c8	 add	 rcx, rax
  0005f	48 8b c1	 mov	 rax, rcx
  00062	48 8b c8	 mov	 rcx, rax
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006b	48 89 45 08	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 77   :             if (_Rdbuf) {

  0006f	48 83 7d 08 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  00074	74 0f		 je	 SHORT $LN2@Sentry_bas

; 78   :                 _Rdbuf->_Lock();

  00076	48 8b 45 08	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 4d 08	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  00081	ff 50 08	 call	 QWORD PTR [rax+8]
  00084	90		 npad	 1
$LN2@Sentry_bas:

; 79   :             }
; 80   :         }

  00085	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00093	5f		 pop	 rdi
  00094	5d		 pop	 rbp
  00095	c3		 ret	 0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z
_TEXT	SEGMENT
_Obj$ = 224
??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z PROC	; std::_Destroy_in_place<char *>, COMDAT

; 289  : _CONSTEXPR20 void _Destroy_in_place(_Ty& _Obj) noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 290  :     if constexpr (is_array_v<_Ty>) {
; 291  :         _STD _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 292  :     } else {
; 293  :         _Obj.~_Ty();
; 294  :     }
; 295  : }

  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z ENDP	; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 224
_Bytes$ = 232
??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16>, COMDAT

; 230  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 231  :     // deallocate storage allocated by _Allocate
; 232  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 233  :     if (_STD is_constant_evaluated()) {
; 234  :         ::operator delete(_Ptr);
; 235  :         return;
; 236  :     }
; 237  : #endif // _HAS_CXX20
; 238  : 
; 239  : #ifdef __cpp_aligned_new
; 240  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 241  :         size_t _Passed_align = _Align;
; 242  : #if defined(_M_IX86) || defined(_M_X64)
; 243  :         if (_Bytes >= _Big_allocation_threshold) {
; 244  :             // boost the alignment of big allocations to help autovectorization
; 245  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 246  :         }
; 247  : #endif // defined(_M_IX86) || defined(_M_X64)
; 248  :         ::operator delete(_Ptr, _Bytes, align_val_t{_Passed_align});
; 249  :     } else
; 250  : #endif // defined(__cpp_aligned_new)
; 251  :     {
; 252  : #if defined(_M_IX86) || defined(_M_X64)
; 253  :         if (_Bytes >= _Big_allocation_threshold) {

  00025	48 81 bd e8 00
	00 00 00 10 00
	00		 cmp	 QWORD PTR _Bytes$[rbp], 4096 ; 00001000H
  00030	72 14		 jb	 SHORT $LN2@Deallocate

; 254  :             // boost the alignment of big allocations to help autovectorization
; 255  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  00032	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR _Bytes$[rbp]
  00039	48 8d 8d e0 00
	00 00		 lea	 rcx, QWORD PTR _Ptr$[rbp]
  00040	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
  00045	90		 npad	 1
$LN2@Deallocate:

; 256  :         }
; 257  : #endif // defined(_M_IX86) || defined(_M_X64)
; 258  :         ::operator delete(_Ptr, _Bytes);

  00046	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Bytes$[rbp]
  0004d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00054	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00059	90		 npad	 1

; 259  :     }
; 260  : }

  0005a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00061	5f		 pop	 rdi
  00062	5d		 pop	 rbp
  00063	c3		 ret	 0
??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\utility
;	COMDAT ??$max@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 200
tv65 = 216
_Left$ = 256
_Right$ = 264
??$max@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::max<unsigned __int64>, COMDAT

; 72   :     (max) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A14A6E7D_utility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 73   :     // return larger of _Left and _Right
; 74   :     return _Left < _Right ? _Right : _Left;

  00025	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00033	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00036	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00039	73 10		 jae	 SHORT $LN3@max
  0003b	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00042	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  00049	eb 0e		 jmp	 SHORT $LN4@max
$LN3@max:
  0004b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00052	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@max:
  00059	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  00060	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00067	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]

; 75   : }

  0006e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
??$max@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::max<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\type_traits
;	COMDAT ??$addressof@D@std@@YAPEADAEAD@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@D@std@@YAPEADAEAD@Z PROC			; std::addressof<char>, COMDAT

; 1558 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A1A74C2F_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1559 :     return __builtin_addressof(_Val);

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 1560 : }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
??$addressof@D@std@@YAPEADAEAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT

; 942  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00033	5f		 pop	 rdi
  00034	5d		 pop	 rbp
  00035	c3		 ret	 0
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
_New_proxy$ = 8
$T1 = 232
this$ = 288
_Al$ = 296
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT

; 1183 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 1184 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

  00025	ba 01 00 00 00	 mov	 edx, 1
  0002a	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00031	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0003e	48 89 45 08	 mov	 QWORD PTR _New_proxy$[rbp], rax

; 1185 :         _Construct_in_place(*_New_proxy, this);

  00042	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00050	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00057	48 8b 4d 08	 mov	 rcx, QWORD PTR _New_proxy$[rbp]
  0005b	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
  00060	90		 npad	 1

; 1186 :         _Myproxy            = _New_proxy;

  00061	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00068	48 8b 4d 08	 mov	 rcx, QWORD PTR _New_proxy$[rbp]
  0006c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1187 :         _New_proxy->_Mycont = this;

  0006f	48 8b 45 08	 mov	 rax, QWORD PTR _New_proxy$[rbp]
  00073	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1188 :     }

  0007d	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00084	5f		 pop	 rdi
  00085	5d		 pop	 rbp
  00086	c3		 ret	 0
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 224
_Ptr$ = 232
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 1111 : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 1112 :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1113 :     using _Ty = typename _Alloc::value_type;
; 1114 :     _Ptr->~_Ty();
; 1115 :     _STD _Deallocate_plain(_Al, _Ptr);

  00025	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0002c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00033	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
  00038	90		 npad	 1

; 1116 : }

  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 224
_Count$ = 232
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 952  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 953  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 954  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00025	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0002c	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ; std::_Get_size_of_n<16>
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits>

; 955  :     }

  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 200
tv65 = 216
_Left$ = 256
_Right$ = 264
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 95   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A14A6E7D_utility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 96   :     // return smaller of _Left and _Right
; 97   :     return _Right < _Left ? _Right : _Left;

  00025	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0002c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00033	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00036	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00039	73 10		 jae	 SHORT $LN3@min
  0003b	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00042	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  00049	eb 0e		 jmp	 SHORT $LN4@min
$LN3@min:
  0004b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00052	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@min:
  00059	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  00060	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00067	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]

; 98   : }

  0006e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xutility
;	COMDAT ?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z
_TEXT	SEGMENT
_Val$ = 224
?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z PROC ; std::pointer_traits<char *>::pointer_to, COMDAT

; 454  :     _NODISCARD static _CONSTEXPR20 pointer pointer_to(_Reftype _Val) noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DB98B07B_xutility
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 455  :         return _STD addressof(_Val);

  00020	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Val$[rbp]
  00027	e8 00 00 00 00	 call	 ??$addressof@D@std@@YAPEADAEAD@Z ; std::addressof<char>

; 456  :     }

  0002c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00033	5f		 pop	 rdi
  00034	5d		 pop	 rbp
  00035	c3		 ret	 0
?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z ENDP ; std::pointer_traits<char *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Unfancy@D@std@@YAPEADPEAD@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@D@std@@YAPEADPEAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 35   : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 36   :     return _Ptr;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]

; 37   : }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
??$_Unfancy@D@std@@YAPEADPEAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z
_TEXT	SEGMENT
_Al$ = 224
_Count$ = 232
??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z PROC ; std::_Allocate_at_least_helper<std::allocator<char> >, COMDAT

; 2173 :     _Alloc& _Al, _CRT_GUARDOVERFLOW typename allocator_traits<_Alloc>::size_type& _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 2174 : #if _HAS_CXX23
; 2175 :     if constexpr (_Should_allocate_at_least<_Alloc>) {
; 2176 :         auto [_Ptr, _Allocated] = _Al.allocate_at_least(_Count);
; 2177 :         _Count                  = _Allocated;
; 2178 :         return _Ptr;
; 2179 :     } else
; 2180 : #endif // _HAS_CXX23
; 2181 :     {
; 2182 :         return _Al.allocate(_Count);

  00025	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  0002c	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0002f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00036	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate

; 2183 :     }
; 2184 : }

  0003b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00042	5f		 pop	 rdi
  00043	5d		 pop	 rbp
  00044	c3		 ret	 0
??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z ENDP ; std::_Allocate_at_least_helper<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\utility
;	COMDAT ??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z
_TEXT	SEGMENT
$T1 = 200
tv65 = 216
_Left$ = 256
_Right$ = 264
??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z PROC		; std::max<char *>, COMDAT

; 72   :     (max) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A14A6E7D_utility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 73   :     // return larger of _Left and _Right
; 74   :     return _Left < _Right ? _Right : _Left;

  00025	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00033	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00036	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00039	73 10		 jae	 SHORT $LN3@max
  0003b	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00042	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  00049	eb 0e		 jmp	 SHORT $LN4@max
$LN3@max:
  0004b	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00052	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@max:
  00059	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  00060	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00067	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]

; 75   : }

  0006e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z ENDP		; std::max<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\iosfwd
;	COMDAT ??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ
_TEXT	SEGMENT
this$ = 224
??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ PROC		; std::fpos<_Mbstatet>::operator __int64, COMDAT

; 64   :     operator streamoff() const noexcept /* strengthened */ {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__031C7A3D_iosfwd
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 65   :         // TRANSITION, ABI: We currently always set _Fpos to 0 but older .objs containing old
; 66   :         // basic_filebuf would set _Fpos.
; 67   :         return _Myoff + _Fpos;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00031	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]

; 68   :     }

  00035	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003c	5f		 pop	 rdi
  0003d	5d		 pop	 rbp
  0003e	c3		 ret	 0
??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ ENDP		; std::fpos<_Mbstatet>::operator __int64
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 224
_Off$ = 232
??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z PROC		; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT

; 52   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__031C7A3D_iosfwd
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  00033	48 89 08	 mov	 QWORD PTR [rax], rcx
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00045	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004c	48 83 c0 10	 add	 rax, 16
  00050	48 8b f8	 mov	 rdi, rax
  00053	33 c0		 xor	 eax, eax
  00055	b9 08 00 00 00	 mov	 ecx, 8
  0005a	f3 aa		 rep stosb
  0005c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00063	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006a	5f		 pop	 rdi
  0006b	5d		 pop	 rbp
  0006c	c3		 ret	 0
??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ENDP		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
_TEXT	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 312
tv271 = 324
tv274 = 324
tv284 = 324
tv65 = 328
tv130 = 328
tv285 = 328
__$ArrayPad$ = 336
_Ostr$ = 384
_Ch$ = 392
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 819  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, char _Ch) {

$LN23:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001c	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00037	48 33 c5	 xor	 rax, rbp
  0003a	48 89 85 50 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__732225D7_ostream
  00048	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004d	90		 npad	 1

; 820  :     // insert a char into char stream
; 821  :     using _Elem = char;
; 822  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 823  : 
; 824  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 825  :     const typename _Myos::sentry _Ok(_Ostr);

  00055	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  0005c	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00060	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00065	90		 npad	 1

; 826  : 
; 827  :     if (_Ok) { // state okay, insert

  00066	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0006a	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0006f	0f b6 c0	 movzx	 eax, al
  00072	85 c0		 test	 eax, eax
  00074	0f 84 60 02 00
	00		 je	 $LN8@operator

; 828  :         streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  0007a	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00081	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00084	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00088	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0008f	48 03 c8	 add	 rcx, rax
  00092	48 8b c1	 mov	 rax, rcx
  00095	48 8b c8	 mov	 rcx, rax
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0009e	48 83 f8 01	 cmp	 rax, 1
  000a2	7f 0d		 jg	 SHORT $LN15@operator
  000a4	48 c7 85 48 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv130[rbp], 0
  000af	eb 2e		 jmp	 SHORT $LN16@operator
$LN15@operator:
  000b1	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000b8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000bb	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000bf	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000c6	48 03 c8	 add	 rcx, rax
  000c9	48 8b c1	 mov	 rax, rcx
  000cc	48 8b c8	 mov	 rcx, rax
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000d5	48 ff c8	 dec	 rax
  000d8	48 89 85 48 01
	00 00		 mov	 QWORD PTR tv130[rbp], rax
$LN16@operator:
  000df	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR tv130[rbp]
  000e6	48 89 45 58	 mov	 QWORD PTR _Pad$4[rbp], rax

; 829  : 
; 830  :         _TRY_IO_BEGIN
; 831  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000ea	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000f1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f4	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000f8	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000ff	48 03 c8	 add	 rcx, rax
  00102	48 8b c1	 mov	 rax, rcx
  00105	48 8b c8	 mov	 rcx, rax
  00108	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  0010e	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00113	83 f8 40	 cmp	 eax, 64			; 00000040H
  00116	0f 84 ad 00 00
	00		 je	 $LN10@operator

; 832  :             for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on left

  0011c	eb 0b		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0011e	48 8b 45 58	 mov	 rax, QWORD PTR _Pad$4[rbp]
  00122	48 ff c8	 dec	 rax
  00125	48 89 45 58	 mov	 QWORD PTR _Pad$4[rbp], rax
$LN4@operator:
  00129	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  0012d	0f 85 96 00 00
	00		 jne	 $LN10@operator
  00133	48 83 7d 58 00	 cmp	 QWORD PTR _Pad$4[rbp], 0
  00138	0f 8e 8b 00 00
	00		 jle	 $LN10@operator

; 833  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0013e	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00145	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00148	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0014c	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00153	48 03 c8	 add	 rcx, rax
  00156	48 8b c1	 mov	 rax, rcx
  00159	48 8b c8	 mov	 rcx, rax
  0015c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  00162	88 85 44 01 00
	00		 mov	 BYTE PTR tv274[rbp], al
  00168	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0016f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00172	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  00176	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  0017d	48 03 d1	 add	 rdx, rcx
  00180	48 8b ca	 mov	 rcx, rdx
  00183	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00189	0f b6 8d 44 01
	00 00		 movzx	 ecx, BYTE PTR tv274[rbp]
  00190	0f b6 d1	 movzx	 edx, cl
  00193	48 8b c8	 mov	 rcx, rax
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  0019c	89 85 48 01 00
	00		 mov	 DWORD PTR tv65[rbp], eax
  001a2	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001a7	8b 95 48 01 00
	00		 mov	 edx, DWORD PTR tv65[rbp]
  001ad	8b c8		 mov	 ecx, eax
  001af	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  001b4	0f b6 c0	 movzx	 eax, al
  001b7	85 c0		 test	 eax, eax
  001b9	74 09		 je	 SHORT $LN11@operator

; 834  :                     _State |= ios_base::badbit;

  001bb	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  001be	83 c8 04	 or	 eax, 4
  001c1	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN11@operator:

; 835  :                 }
; 836  :             }

  001c4	e9 55 ff ff ff	 jmp	 $LN2@operator
$LN10@operator:

; 837  :         }
; 838  : 
; 839  :         if (_State == ios_base::goodbit && _Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ch))) {

  001c9	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  001cd	75 5c		 jne	 SHORT $LN12@operator
  001cf	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  001d6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001d9	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001dd	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  001e4	48 03 c8	 add	 rcx, rax
  001e7	48 8b c1	 mov	 rax, rcx
  001ea	48 8b c8	 mov	 rcx, rax
  001ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001f3	0f b6 95 88 01
	00 00		 movzx	 edx, BYTE PTR _Ch$[rbp]
  001fa	48 8b c8	 mov	 rcx, rax
  001fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  00203	89 85 44 01 00
	00		 mov	 DWORD PTR tv284[rbp], eax
  00209	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0020e	8b 95 44 01 00
	00		 mov	 edx, DWORD PTR tv284[rbp]
  00214	8b c8		 mov	 ecx, eax
  00216	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0021b	0f b6 c0	 movzx	 eax, al
  0021e	85 c0		 test	 eax, eax
  00220	74 09		 je	 SHORT $LN12@operator

; 840  :             _State |= ios_base::badbit;

  00222	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00225	83 c8 04	 or	 eax, 4
  00228	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN12@operator:

; 841  :         }
; 842  : 
; 843  :         for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on right

  0022b	eb 0b		 jmp	 SHORT $LN7@operator
$LN5@operator:
  0022d	48 8b 45 58	 mov	 rax, QWORD PTR _Pad$4[rbp]
  00231	48 ff c8	 dec	 rax
  00234	48 89 45 58	 mov	 QWORD PTR _Pad$4[rbp], rax
$LN7@operator:
  00238	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  0023c	0f 85 96 00 00
	00		 jne	 $LN6@operator
  00242	48 83 7d 58 00	 cmp	 QWORD PTR _Pad$4[rbp], 0
  00247	0f 8e 8b 00 00
	00		 jle	 $LN6@operator

; 844  :             if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0024d	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00254	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00257	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0025b	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00262	48 03 c8	 add	 rcx, rax
  00265	48 8b c1	 mov	 rax, rcx
  00268	48 8b c8	 mov	 rcx, rax
  0026b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  00271	88 85 44 01 00
	00		 mov	 BYTE PTR tv271[rbp], al
  00277	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0027e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00281	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  00285	48 8b 95 80 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  0028c	48 03 d1	 add	 rdx, rcx
  0028f	48 8b ca	 mov	 rcx, rdx
  00292	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00298	0f b6 8d 44 01
	00 00		 movzx	 ecx, BYTE PTR tv271[rbp]
  0029f	0f b6 d1	 movzx	 edx, cl
  002a2	48 8b c8	 mov	 rcx, rax
  002a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  002ab	89 85 48 01 00
	00		 mov	 DWORD PTR tv285[rbp], eax
  002b1	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  002b6	8b 95 48 01 00
	00		 mov	 edx, DWORD PTR tv285[rbp]
  002bc	8b c8		 mov	 ecx, eax
  002be	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  002c3	0f b6 c0	 movzx	 eax, al
  002c6	85 c0		 test	 eax, eax
  002c8	74 09		 je	 SHORT $LN13@operator

; 845  :                 _State |= ios_base::badbit;

  002ca	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  002cd	83 c8 04	 or	 eax, 4
  002d0	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN13@operator:

; 846  :             }
; 847  :         }

  002d3	e9 55 ff ff ff	 jmp	 $LN5@operator
$LN6@operator:
  002d8	eb 00		 jmp	 SHORT $LN8@operator
$LN21@operator:
$LN8@operator:

; 848  :         _CATCH_IO_(ios_base, _Ostr)
; 849  :     }
; 850  : 
; 851  :     _Ostr.width(0);

  002da	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002e1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002e4	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002e8	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002ef	48 03 c8	 add	 rcx, rax
  002f2	48 8b c1	 mov	 rax, rcx
  002f5	33 d2		 xor	 edx, edx
  002f7	48 8b c8	 mov	 rcx, rax
  002fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  00300	90		 npad	 1

; 852  :     _Ostr.setstate(_State);

  00301	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00308	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0030b	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0030f	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00316	48 03 c8	 add	 rcx, rax
  00319	48 8b c1	 mov	 rax, rcx
  0031c	45 33 c0	 xor	 r8d, r8d
  0031f	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  00322	48 8b c8	 mov	 rcx, rax
  00325	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  0032b	90		 npad	 1

; 853  :     return _Ostr;

  0032c	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00333	48 89 85 38 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  0033a	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0033e	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00343	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR $T5[rbp]

; 854  : }

  0034a	48 8b f8	 mov	 rdi, rax
  0034d	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00351	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcFrameData
  00358	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0035d	48 8b c7	 mov	 rax, rdi
  00360	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00367	48 33 cd	 xor	 rcx, rbp
  0036a	e8 00 00 00 00	 call	 __security_check_cookie
  0036f	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00376	5f		 pop	 rdi
  00377	5d		 pop	 rbp
  00378	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 312
tv271 = 324
tv274 = 324
tv284 = 324
tv65 = 328
tv130 = 328
tv285 = 328
__$ArrayPad$ = 336
_Ostr$ = 384
_Ch$ = 392
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 312
tv271 = 324
tv274 = 324
tv284 = 324
tv65 = 328
tv130 = 328
tv285 = 328
__$ArrayPad$ = 336
_Ostr$ = 384
_Ch$ = 392
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 848  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$0:
  00014	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN21@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
tv66 = 192
_Ostr$ = 240
_Str$ = 248
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3421 :     basic_ostream<_Elem, _Traits>& _Ostr, const basic_string<_Elem, _Traits, _Alloc>& _Str) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 3422 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  00025	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  0002c	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00031	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv66[rbp], rax
  00038	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  0003f	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  00044	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv66[rbp]
  0004b	4c 8b c1	 mov	 r8, rcx
  0004e	48 8b d0	 mov	 rdx, rax
  00051	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00058	e8 00 00 00 00	 call	 ??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>

; 3423 : }

  0005d	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\C2simd\Ch02_01\Ch02_01.cpp
;	COMDAT main
_TEXT	SEGMENT
main	PROC						; COMDAT

; 12   : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__28109234_Ch02_01@cpp
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	90		 npad	 1

; 13   :     AddI16();

  0001c	e8 00 00 00 00	 call	 ?AddI16@@YAXXZ		; AddI16
  00021	90		 npad	 1

; 14   :     AddU16();

  00022	e8 00 00 00 00	 call	 ?AddU16@@YAXXZ		; AddU16
  00027	90		 npad	 1

; 15   :     return 0;

  00028	33 c0		 xor	 eax, eax

; 16   : }

  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\C2simd\Ch02_01\Ch02_01.cpp
;	COMDAT ?AddU16@@YAXXZ
_TEXT	SEGMENT
nl$ = 4
a$ = 48
b$ = 96
c1$ = 144
c2$ = 192
$T7 = 616
$T8 = 680
$T9 = 744
$T10 = 808
$T11 = 872
$T12 = 936
tv227 = 984
tv228 = 984
tv229 = 984
tv230 = 984
tv231 = 984
tv232 = 984
tv216 = 992
tv218 = 992
tv220 = 992
tv222 = 992
tv224 = 992
tv226 = 992
__$ArrayPad$ = 1000
?AddU16@@YAXXZ PROC					; AddU16, COMDAT

; 45   : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 18 04
	00 00		 sub	 rsp, 1048		; 00000418H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00014	b9 9e 00 00 00	 mov	 ecx, 158		; 0000009eH
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00027	48 33 c5	 xor	 rax, rbp
  0002a	48 89 85 e8 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__28109234_Ch02_01@cpp
  00038	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003d	90		 npad	 1

; 46   :     const char nl = '\n';

  0003e	c6 45 04 0a	 mov	 BYTE PTR nl$[rbp], 10

; 47   :     XmmVal a, b, c1, c2;
; 48   : 
; 49   :     a.m_U16[0] = 10;          b.m_U16[0] = 100;

  00042	b8 02 00 00 00	 mov	 eax, 2
  00047	48 6b c0 00	 imul	 rax, rax, 0
  0004b	b9 0a 00 00 00	 mov	 ecx, 10
  00050	66 89 4c 05 30	 mov	 WORD PTR a$[rbp+rax], cx
  00055	b8 02 00 00 00	 mov	 eax, 2
  0005a	48 6b c0 00	 imul	 rax, rax, 0
  0005e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00063	66 89 4c 05 60	 mov	 WORD PTR b$[rbp+rax], cx

; 50   :     a.m_U16[1] = 200;         b.m_U16[1] = 200;

  00068	b8 02 00 00 00	 mov	 eax, 2
  0006d	48 6b c0 01	 imul	 rax, rax, 1
  00071	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  00076	66 89 4c 05 30	 mov	 WORD PTR a$[rbp+rax], cx
  0007b	b8 02 00 00 00	 mov	 eax, 2
  00080	48 6b c0 01	 imul	 rax, rax, 1
  00084	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  00089	66 89 4c 05 60	 mov	 WORD PTR b$[rbp+rax], cx

; 51   :     a.m_U16[2] = 300;         b.m_U16[2] = 65530;

  0008e	b8 02 00 00 00	 mov	 eax, 2
  00093	48 6b c0 02	 imul	 rax, rax, 2
  00097	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  0009c	66 89 4c 05 30	 mov	 WORD PTR a$[rbp+rax], cx
  000a1	b8 02 00 00 00	 mov	 eax, 2
  000a6	48 6b c0 02	 imul	 rax, rax, 2
  000aa	b9 fa ff 00 00	 mov	 ecx, 65530		; 0000fffaH
  000af	66 89 4c 05 60	 mov	 WORD PTR b$[rbp+rax], cx

; 52   :     a.m_U16[3] = 32766;       b.m_U16[3] = 40000;

  000b4	b8 02 00 00 00	 mov	 eax, 2
  000b9	48 6b c0 03	 imul	 rax, rax, 3
  000bd	b9 fe 7f 00 00	 mov	 ecx, 32766		; 00007ffeH
  000c2	66 89 4c 05 30	 mov	 WORD PTR a$[rbp+rax], cx
  000c7	b8 02 00 00 00	 mov	 eax, 2
  000cc	48 6b c0 03	 imul	 rax, rax, 3
  000d0	b9 40 9c 00 00	 mov	 ecx, 40000		; 00009c40H
  000d5	66 89 4c 05 60	 mov	 WORD PTR b$[rbp+rax], cx

; 53   :     a.m_U16[4] = 50;          b.m_U16[4] = 500;

  000da	b8 02 00 00 00	 mov	 eax, 2
  000df	48 6b c0 04	 imul	 rax, rax, 4
  000e3	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  000e8	66 89 4c 05 30	 mov	 WORD PTR a$[rbp+rax], cx
  000ed	b8 02 00 00 00	 mov	 eax, 2
  000f2	48 6b c0 04	 imul	 rax, rax, 4
  000f6	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  000fb	66 89 4c 05 60	 mov	 WORD PTR b$[rbp+rax], cx

; 54   :     a.m_U16[5] = 20000;       b.m_U16[5] = 25000;

  00100	b8 02 00 00 00	 mov	 eax, 2
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	b9 20 4e 00 00	 mov	 ecx, 20000		; 00004e20H
  0010e	66 89 4c 05 30	 mov	 WORD PTR a$[rbp+rax], cx
  00113	b8 02 00 00 00	 mov	 eax, 2
  00118	48 6b c0 05	 imul	 rax, rax, 5
  0011c	b9 a8 61 00 00	 mov	 ecx, 25000		; 000061a8H
  00121	66 89 4c 05 60	 mov	 WORD PTR b$[rbp+rax], cx

; 55   :     a.m_U16[6] = 32000;       b.m_U16[6] = 1200;

  00126	b8 02 00 00 00	 mov	 eax, 2
  0012b	48 6b c0 06	 imul	 rax, rax, 6
  0012f	b9 00 7d 00 00	 mov	 ecx, 32000		; 00007d00H
  00134	66 89 4c 05 30	 mov	 WORD PTR a$[rbp+rax], cx
  00139	b8 02 00 00 00	 mov	 eax, 2
  0013e	48 6b c0 06	 imul	 rax, rax, 6
  00142	b9 b0 04 00 00	 mov	 ecx, 1200		; 000004b0H
  00147	66 89 4c 05 60	 mov	 WORD PTR b$[rbp+rax], cx

; 56   :     a.m_U16[7] = 32000;       b.m_U16[7] = 50000;

  0014c	b8 02 00 00 00	 mov	 eax, 2
  00151	48 6b c0 07	 imul	 rax, rax, 7
  00155	b9 00 7d 00 00	 mov	 ecx, 32000		; 00007d00H
  0015a	66 89 4c 05 30	 mov	 WORD PTR a$[rbp+rax], cx
  0015f	b8 02 00 00 00	 mov	 eax, 2
  00164	48 6b c0 07	 imul	 rax, rax, 7
  00168	b9 50 c3 00 00	 mov	 ecx, 50000		; 0000c350H
  0016d	66 89 4c 05 60	 mov	 WORD PTR b$[rbp+rax], cx

; 57   : 
; 58   :     AddU16_Iavx(&c1, &c2, &a, &b);

  00172	4c 8d 4d 60	 lea	 r9, QWORD PTR b$[rbp]
  00176	4c 8d 45 30	 lea	 r8, QWORD PTR a$[rbp]
  0017a	48 8d 95 c0 00
	00 00		 lea	 rdx, QWORD PTR c2$[rbp]
  00181	48 8d 8d 90 00
	00 00		 lea	 rcx, QWORD PTR c1$[rbp]
  00188	e8 00 00 00 00	 call	 ?AddU16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z ; AddU16_Iavx
  0018d	90		 npad	 1

; 59   : 
; 60   :     std::cout << "\nResults for AddU16_Iavx - Wraparound Addition\n";

  0018e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@OINKJKG@?6Results?5for?5AddU16_Iavx?5?9?5Wrap@
  00195	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0019c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  001a1	90		 npad	 1

; 61   :     std::cout << "a:  " << a.ToStringU16() << nl;

  001a2	48 8d 95 68 02
	00 00		 lea	 rdx, QWORD PTR $T7[rbp]
  001a9	48 8d 4d 30	 lea	 rcx, QWORD PTR a$[rbp]
  001ad	e8 00 00 00 00	 call	 ?ToStringU16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; XmmVal::ToStringU16
  001b2	48 89 85 d8 03
	00 00		 mov	 QWORD PTR tv227[rbp], rax
  001b9	48 8b 85 d8 03
	00 00		 mov	 rax, QWORD PTR tv227[rbp]
  001c0	48 89 85 e0 03
	00 00		 mov	 QWORD PTR tv216[rbp], rax
  001c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KPNACMJI@a?3?5?5@
  001ce	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001d5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  001da	48 8b 95 e0 03
	00 00		 mov	 rdx, QWORD PTR tv216[rbp]
  001e1	48 8b c8	 mov	 rcx, rax
  001e4	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  001e9	b2 0a		 mov	 dl, 10
  001eb	48 8b c8	 mov	 rcx, rax
  001ee	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  001f3	90		 npad	 1
  001f4	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  001fb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00200	90		 npad	 1

; 62   :     std::cout << "b:  " << b.ToStringU16() << nl;

  00201	48 8d 95 a8 02
	00 00		 lea	 rdx, QWORD PTR $T8[rbp]
  00208	48 8d 4d 60	 lea	 rcx, QWORD PTR b$[rbp]
  0020c	e8 00 00 00 00	 call	 ?ToStringU16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; XmmVal::ToStringU16
  00211	48 89 85 d8 03
	00 00		 mov	 QWORD PTR tv228[rbp], rax
  00218	48 8b 85 d8 03
	00 00		 mov	 rax, QWORD PTR tv228[rbp]
  0021f	48 89 85 e0 03
	00 00		 mov	 QWORD PTR tv218[rbp], rax
  00226	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04OIHAFGEI@b?3?5?5@
  0022d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00234	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00239	48 8b 95 e0 03
	00 00		 mov	 rdx, QWORD PTR tv218[rbp]
  00240	48 8b c8	 mov	 rcx, rax
  00243	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00248	b2 0a		 mov	 dl, 10
  0024a	48 8b c8	 mov	 rcx, rax
  0024d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00252	90		 npad	 1
  00253	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0025a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0025f	90		 npad	 1

; 63   :     std::cout << "c1: " << c1.ToStringU16() << nl;

  00260	48 8d 95 e8 02
	00 00		 lea	 rdx, QWORD PTR $T9[rbp]
  00267	48 8d 8d 90 00
	00 00		 lea	 rcx, QWORD PTR c1$[rbp]
  0026e	e8 00 00 00 00	 call	 ?ToStringU16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; XmmVal::ToStringU16
  00273	48 89 85 d8 03
	00 00		 mov	 QWORD PTR tv229[rbp], rax
  0027a	48 8b 85 d8 03
	00 00		 mov	 rax, QWORD PTR tv229[rbp]
  00281	48 89 85 e0 03
	00 00		 mov	 QWORD PTR tv220[rbp], rax
  00288	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04BDKANOFP@c1?3?5@
  0028f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00296	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0029b	48 8b 95 e0 03
	00 00		 mov	 rdx, QWORD PTR tv220[rbp]
  002a2	48 8b c8	 mov	 rcx, rax
  002a5	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  002aa	b2 0a		 mov	 dl, 10
  002ac	48 8b c8	 mov	 rcx, rax
  002af	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  002b4	90		 npad	 1
  002b5	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  002bc	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002c1	90		 npad	 1

; 64   :     std::cout << "\nResults for AddU16_Iavx - Saturated Addition\n";

  002c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@GILFLGMO@?6Results?5for?5AddU16_Iavx?5?9?5Satu@
  002c9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002d0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  002d5	90		 npad	 1

; 65   :     std::cout << "a:  " << a.ToStringU16() << nl;

  002d6	48 8d 95 28 03
	00 00		 lea	 rdx, QWORD PTR $T10[rbp]
  002dd	48 8d 4d 30	 lea	 rcx, QWORD PTR a$[rbp]
  002e1	e8 00 00 00 00	 call	 ?ToStringU16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; XmmVal::ToStringU16
  002e6	48 89 85 d8 03
	00 00		 mov	 QWORD PTR tv230[rbp], rax
  002ed	48 8b 85 d8 03
	00 00		 mov	 rax, QWORD PTR tv230[rbp]
  002f4	48 89 85 e0 03
	00 00		 mov	 QWORD PTR tv222[rbp], rax
  002fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KPNACMJI@a?3?5?5@
  00302	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00309	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0030e	48 8b 95 e0 03
	00 00		 mov	 rdx, QWORD PTR tv222[rbp]
  00315	48 8b c8	 mov	 rcx, rax
  00318	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  0031d	b2 0a		 mov	 dl, 10
  0031f	48 8b c8	 mov	 rcx, rax
  00322	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00327	90		 npad	 1
  00328	48 8d 8d 28 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  0032f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00334	90		 npad	 1

; 66   :     std::cout << "b:  " << b.ToStringU16() << nl;

  00335	48 8d 95 68 03
	00 00		 lea	 rdx, QWORD PTR $T11[rbp]
  0033c	48 8d 4d 60	 lea	 rcx, QWORD PTR b$[rbp]
  00340	e8 00 00 00 00	 call	 ?ToStringU16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; XmmVal::ToStringU16
  00345	48 89 85 d8 03
	00 00		 mov	 QWORD PTR tv231[rbp], rax
  0034c	48 8b 85 d8 03
	00 00		 mov	 rax, QWORD PTR tv231[rbp]
  00353	48 89 85 e0 03
	00 00		 mov	 QWORD PTR tv224[rbp], rax
  0035a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04OIHAFGEI@b?3?5?5@
  00361	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00368	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0036d	48 8b 95 e0 03
	00 00		 mov	 rdx, QWORD PTR tv224[rbp]
  00374	48 8b c8	 mov	 rcx, rax
  00377	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  0037c	b2 0a		 mov	 dl, 10
  0037e	48 8b c8	 mov	 rcx, rax
  00381	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00386	90		 npad	 1
  00387	48 8d 8d 68 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  0038e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00393	90		 npad	 1

; 67   :     std::cout << "c2: " << c2.ToStringU16() << nl;

  00394	48 8d 95 a8 03
	00 00		 lea	 rdx, QWORD PTR $T12[rbp]
  0039b	48 8d 8d c0 00
	00 00		 lea	 rcx, QWORD PTR c2$[rbp]
  003a2	e8 00 00 00 00	 call	 ?ToStringU16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; XmmVal::ToStringU16
  003a7	48 89 85 d8 03
	00 00		 mov	 QWORD PTR tv232[rbp], rax
  003ae	48 8b 85 d8 03
	00 00		 mov	 rax, QWORD PTR tv232[rbp]
  003b5	48 89 85 e0 03
	00 00		 mov	 QWORD PTR tv226[rbp], rax
  003bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04BBFHBLB@c2?3?5@
  003c3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003ca	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  003cf	48 8b 95 e0 03
	00 00		 mov	 rdx, QWORD PTR tv226[rbp]
  003d6	48 8b c8	 mov	 rcx, rax
  003d9	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  003de	b2 0a		 mov	 dl, 10
  003e0	48 8b c8	 mov	 rcx, rax
  003e3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  003e8	90		 npad	 1
  003e9	48 8d 8d a8 03
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  003f0	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003f5	90		 npad	 1

; 68   : }

  003f6	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  003fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AddU16@@YAXXZ$rtcFrameData
  00401	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00406	48 8b 8d e8 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0040d	48 33 cd	 xor	 rcx, rbp
  00410	e8 00 00 00 00	 call	 __security_check_cookie
  00415	48 8d a5 f8 03
	00 00		 lea	 rsp, QWORD PTR [rbp+1016]
  0041c	5f		 pop	 rdi
  0041d	5d		 pop	 rbp
  0041e	c3		 ret	 0
?AddU16@@YAXXZ ENDP					; AddU16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
nl$ = 4
a$ = 48
b$ = 96
c1$ = 144
c2$ = 192
$T7 = 616
$T8 = 680
$T9 = 744
$T10 = 808
$T11 = 872
$T12 = 936
tv227 = 984
tv228 = 984
tv229 = 984
tv230 = 984
tv231 = 984
tv232 = 984
tv216 = 992
tv218 = 992
tv220 = 992
tv222 = 992
tv224 = 992
tv226 = 992
__$ArrayPad$ = 1000
?dtor$0@?0??AddU16@@YAXXZ@4HA PROC			; `AddU16'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??AddU16@@YAXXZ@4HA ENDP			; `AddU16'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
nl$ = 4
a$ = 48
b$ = 96
c1$ = 144
c2$ = 192
$T7 = 616
$T8 = 680
$T9 = 744
$T10 = 808
$T11 = 872
$T12 = 936
tv227 = 984
tv228 = 984
tv229 = 984
tv230 = 984
tv231 = 984
tv232 = 984
tv216 = 992
tv218 = 992
tv220 = 992
tv222 = 992
tv224 = 992
tv226 = 992
__$ArrayPad$ = 1000
?dtor$1@?0??AddU16@@YAXXZ@4HA PROC			; `AddU16'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0??AddU16@@YAXXZ@4HA ENDP			; `AddU16'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
nl$ = 4
a$ = 48
b$ = 96
c1$ = 144
c2$ = 192
$T7 = 616
$T8 = 680
$T9 = 744
$T10 = 808
$T11 = 872
$T12 = 936
tv227 = 984
tv228 = 984
tv229 = 984
tv230 = 984
tv231 = 984
tv232 = 984
tv216 = 992
tv218 = 992
tv220 = 992
tv222 = 992
tv224 = 992
tv226 = 992
__$ArrayPad$ = 1000
?dtor$2@?0??AddU16@@YAXXZ@4HA PROC			; `AddU16'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$2@?0??AddU16@@YAXXZ@4HA ENDP			; `AddU16'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
nl$ = 4
a$ = 48
b$ = 96
c1$ = 144
c2$ = 192
$T7 = 616
$T8 = 680
$T9 = 744
$T10 = 808
$T11 = 872
$T12 = 936
tv227 = 984
tv228 = 984
tv229 = 984
tv230 = 984
tv231 = 984
tv232 = 984
tv216 = 992
tv218 = 992
tv220 = 992
tv222 = 992
tv224 = 992
tv226 = 992
__$ArrayPad$ = 1000
?dtor$3@?0??AddU16@@YAXXZ@4HA PROC			; `AddU16'::`1'::dtor$3
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d 28 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$3@?0??AddU16@@YAXXZ@4HA ENDP			; `AddU16'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
nl$ = 4
a$ = 48
b$ = 96
c1$ = 144
c2$ = 192
$T7 = 616
$T8 = 680
$T9 = 744
$T10 = 808
$T11 = 872
$T12 = 936
tv227 = 984
tv228 = 984
tv229 = 984
tv230 = 984
tv231 = 984
tv232 = 984
tv216 = 992
tv218 = 992
tv220 = 992
tv222 = 992
tv224 = 992
tv226 = 992
__$ArrayPad$ = 1000
?dtor$4@?0??AddU16@@YAXXZ@4HA PROC			; `AddU16'::`1'::dtor$4
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d 68 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$4@?0??AddU16@@YAXXZ@4HA ENDP			; `AddU16'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
nl$ = 4
a$ = 48
b$ = 96
c1$ = 144
c2$ = 192
$T7 = 616
$T8 = 680
$T9 = 744
$T10 = 808
$T11 = 872
$T12 = 936
tv227 = 984
tv228 = 984
tv229 = 984
tv230 = 984
tv231 = 984
tv232 = 984
tv216 = 992
tv218 = 992
tv220 = 992
tv222 = 992
tv224 = 992
tv226 = 992
__$ArrayPad$ = 1000
?dtor$5@?0??AddU16@@YAXXZ@4HA PROC			; `AddU16'::`1'::dtor$5
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d a8 03
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$5@?0??AddU16@@YAXXZ@4HA ENDP			; `AddU16'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\C2simd\Ch02_01\Ch02_01.cpp
;	COMDAT ?AddI16@@YAXXZ
_TEXT	SEGMENT
nl$ = 4
a$ = 48
b$ = 96
c1$ = 144
c2$ = 192
$T7 = 616
$T8 = 680
$T9 = 744
$T10 = 808
$T11 = 872
$T12 = 936
tv227 = 984
tv228 = 984
tv229 = 984
tv230 = 984
tv231 = 984
tv232 = 984
tv216 = 992
tv218 = 992
tv220 = 992
tv222 = 992
tv224 = 992
tv226 = 992
__$ArrayPad$ = 1000
?AddI16@@YAXXZ PROC					; AddI16, COMDAT

; 19   : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 18 04
	00 00		 sub	 rsp, 1048		; 00000418H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00014	b9 9e 00 00 00	 mov	 ecx, 158		; 0000009eH
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00027	48 33 c5	 xor	 rax, rbp
  0002a	48 89 85 e8 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__28109234_Ch02_01@cpp
  00038	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003d	90		 npad	 1

; 20   :     const char nl = '\n';

  0003e	c6 45 04 0a	 mov	 BYTE PTR nl$[rbp], 10

; 21   :     XmmVal a, b, c1, c2;
; 22   : 
; 23   :     a.m_I16[0] = 10;          b.m_I16[0] = 100;

  00042	b8 02 00 00 00	 mov	 eax, 2
  00047	48 6b c0 00	 imul	 rax, rax, 0
  0004b	b9 0a 00 00 00	 mov	 ecx, 10
  00050	66 89 4c 05 30	 mov	 WORD PTR a$[rbp+rax], cx
  00055	b8 02 00 00 00	 mov	 eax, 2
  0005a	48 6b c0 00	 imul	 rax, rax, 0
  0005e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00063	66 89 4c 05 60	 mov	 WORD PTR b$[rbp+rax], cx

; 24   :     a.m_I16[1] = 200;         b.m_I16[1] = -200;

  00068	b8 02 00 00 00	 mov	 eax, 2
  0006d	48 6b c0 01	 imul	 rax, rax, 1
  00071	b9 c8 00 00 00	 mov	 ecx, 200		; 000000c8H
  00076	66 89 4c 05 30	 mov	 WORD PTR a$[rbp+rax], cx
  0007b	b8 02 00 00 00	 mov	 eax, 2
  00080	48 6b c0 01	 imul	 rax, rax, 1
  00084	b9 38 ff ff ff	 mov	 ecx, -200		; ffffffffffffff38H
  00089	66 89 4c 05 60	 mov	 WORD PTR b$[rbp+rax], cx

; 25   :     a.m_I16[2] = 30;          b.m_I16[2] = 32760;

  0008e	b8 02 00 00 00	 mov	 eax, 2
  00093	48 6b c0 02	 imul	 rax, rax, 2
  00097	b9 1e 00 00 00	 mov	 ecx, 30
  0009c	66 89 4c 05 30	 mov	 WORD PTR a$[rbp+rax], cx
  000a1	b8 02 00 00 00	 mov	 eax, 2
  000a6	48 6b c0 02	 imul	 rax, rax, 2
  000aa	b9 f8 7f 00 00	 mov	 ecx, 32760		; 00007ff8H
  000af	66 89 4c 05 60	 mov	 WORD PTR b$[rbp+rax], cx

; 26   :     a.m_I16[3] = -32766;      b.m_I16[3] = -400;

  000b4	b8 02 00 00 00	 mov	 eax, 2
  000b9	48 6b c0 03	 imul	 rax, rax, 3
  000bd	b9 02 80 ff ff	 mov	 ecx, -32766		; ffffffffffff8002H
  000c2	66 89 4c 05 30	 mov	 WORD PTR a$[rbp+rax], cx
  000c7	b8 02 00 00 00	 mov	 eax, 2
  000cc	48 6b c0 03	 imul	 rax, rax, 3
  000d0	b9 70 fe ff ff	 mov	 ecx, -400		; fffffffffffffe70H
  000d5	66 89 4c 05 60	 mov	 WORD PTR b$[rbp+rax], cx

; 27   :     a.m_I16[4] = 50;          b.m_I16[4] = 500;

  000da	b8 02 00 00 00	 mov	 eax, 2
  000df	48 6b c0 04	 imul	 rax, rax, 4
  000e3	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  000e8	66 89 4c 05 30	 mov	 WORD PTR a$[rbp+rax], cx
  000ed	b8 02 00 00 00	 mov	 eax, 2
  000f2	48 6b c0 04	 imul	 rax, rax, 4
  000f6	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  000fb	66 89 4c 05 60	 mov	 WORD PTR b$[rbp+rax], cx

; 28   :     a.m_I16[5] = 60;          b.m_I16[5] = -600;

  00100	b8 02 00 00 00	 mov	 eax, 2
  00105	48 6b c0 05	 imul	 rax, rax, 5
  00109	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0010e	66 89 4c 05 30	 mov	 WORD PTR a$[rbp+rax], cx
  00113	b8 02 00 00 00	 mov	 eax, 2
  00118	48 6b c0 05	 imul	 rax, rax, 5
  0011c	b9 a8 fd ff ff	 mov	 ecx, -600		; fffffffffffffda8H
  00121	66 89 4c 05 60	 mov	 WORD PTR b$[rbp+rax], cx

; 29   :     a.m_I16[6] = 32000;       b.m_I16[6] = 1200;

  00126	b8 02 00 00 00	 mov	 eax, 2
  0012b	48 6b c0 06	 imul	 rax, rax, 6
  0012f	b9 00 7d 00 00	 mov	 ecx, 32000		; 00007d00H
  00134	66 89 4c 05 30	 mov	 WORD PTR a$[rbp+rax], cx
  00139	b8 02 00 00 00	 mov	 eax, 2
  0013e	48 6b c0 06	 imul	 rax, rax, 6
  00142	b9 b0 04 00 00	 mov	 ecx, 1200		; 000004b0H
  00147	66 89 4c 05 60	 mov	 WORD PTR b$[rbp+rax], cx

; 30   :     a.m_I16[7] = -32000;      b.m_I16[7] = -950;

  0014c	b8 02 00 00 00	 mov	 eax, 2
  00151	48 6b c0 07	 imul	 rax, rax, 7
  00155	b9 00 83 ff ff	 mov	 ecx, -32000		; ffffffffffff8300H
  0015a	66 89 4c 05 30	 mov	 WORD PTR a$[rbp+rax], cx
  0015f	b8 02 00 00 00	 mov	 eax, 2
  00164	48 6b c0 07	 imul	 rax, rax, 7
  00168	b9 4a fc ff ff	 mov	 ecx, -950		; fffffffffffffc4aH
  0016d	66 89 4c 05 60	 mov	 WORD PTR b$[rbp+rax], cx

; 31   : 
; 32   :     AddI16_Iavx(&c1, &c2, &a, &b);

  00172	4c 8d 4d 60	 lea	 r9, QWORD PTR b$[rbp]
  00176	4c 8d 45 30	 lea	 r8, QWORD PTR a$[rbp]
  0017a	48 8d 95 c0 00
	00 00		 lea	 rdx, QWORD PTR c2$[rbp]
  00181	48 8d 8d 90 00
	00 00		 lea	 rcx, QWORD PTR c1$[rbp]
  00188	e8 00 00 00 00	 call	 ?AddI16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z ; AddI16_Iavx
  0018d	90		 npad	 1

; 33   : 
; 34   :     std::cout << "\nResults for AddI16_Iavx - Wraparound Addition\n";

  0018e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@IBEKOJDB@?6Results?5for?5AddI16_Iavx?5?9?5Wrap@
  00195	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0019c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  001a1	90		 npad	 1

; 35   :     std::cout << "a:  " << a.ToStringI16() << nl;

  001a2	48 8d 95 68 02
	00 00		 lea	 rdx, QWORD PTR $T7[rbp]
  001a9	48 8d 4d 30	 lea	 rcx, QWORD PTR a$[rbp]
  001ad	e8 00 00 00 00	 call	 ?ToStringI16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; XmmVal::ToStringI16
  001b2	48 89 85 d8 03
	00 00		 mov	 QWORD PTR tv227[rbp], rax
  001b9	48 8b 85 d8 03
	00 00		 mov	 rax, QWORD PTR tv227[rbp]
  001c0	48 89 85 e0 03
	00 00		 mov	 QWORD PTR tv216[rbp], rax
  001c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KPNACMJI@a?3?5?5@
  001ce	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001d5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  001da	48 8b 95 e0 03
	00 00		 mov	 rdx, QWORD PTR tv216[rbp]
  001e1	48 8b c8	 mov	 rcx, rax
  001e4	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  001e9	b2 0a		 mov	 dl, 10
  001eb	48 8b c8	 mov	 rcx, rax
  001ee	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  001f3	90		 npad	 1
  001f4	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  001fb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00200	90		 npad	 1

; 36   :     std::cout << "b:  " << b.ToStringI16() << nl;

  00201	48 8d 95 a8 02
	00 00		 lea	 rdx, QWORD PTR $T8[rbp]
  00208	48 8d 4d 60	 lea	 rcx, QWORD PTR b$[rbp]
  0020c	e8 00 00 00 00	 call	 ?ToStringI16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; XmmVal::ToStringI16
  00211	48 89 85 d8 03
	00 00		 mov	 QWORD PTR tv228[rbp], rax
  00218	48 8b 85 d8 03
	00 00		 mov	 rax, QWORD PTR tv228[rbp]
  0021f	48 89 85 e0 03
	00 00		 mov	 QWORD PTR tv218[rbp], rax
  00226	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04OIHAFGEI@b?3?5?5@
  0022d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00234	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00239	48 8b 95 e0 03
	00 00		 mov	 rdx, QWORD PTR tv218[rbp]
  00240	48 8b c8	 mov	 rcx, rax
  00243	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00248	b2 0a		 mov	 dl, 10
  0024a	48 8b c8	 mov	 rcx, rax
  0024d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00252	90		 npad	 1
  00253	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0025a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0025f	90		 npad	 1

; 37   :     std::cout << "c1: " << c1.ToStringI16() << nl;

  00260	48 8d 95 e8 02
	00 00		 lea	 rdx, QWORD PTR $T9[rbp]
  00267	48 8d 8d 90 00
	00 00		 lea	 rcx, QWORD PTR c1$[rbp]
  0026e	e8 00 00 00 00	 call	 ?ToStringI16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; XmmVal::ToStringI16
  00273	48 89 85 d8 03
	00 00		 mov	 QWORD PTR tv229[rbp], rax
  0027a	48 8b 85 d8 03
	00 00		 mov	 rax, QWORD PTR tv229[rbp]
  00281	48 89 85 e0 03
	00 00		 mov	 QWORD PTR tv220[rbp], rax
  00288	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04BDKANOFP@c1?3?5@
  0028f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00296	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0029b	48 8b 95 e0 03
	00 00		 mov	 rdx, QWORD PTR tv220[rbp]
  002a2	48 8b c8	 mov	 rcx, rax
  002a5	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  002aa	b2 0a		 mov	 dl, 10
  002ac	48 8b c8	 mov	 rcx, rax
  002af	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  002b4	90		 npad	 1
  002b5	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  002bc	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002c1	90		 npad	 1

; 38   :     std::cout << "\nResults for AddI16_Iavx - Saturated Addition\n";

  002c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@MKGLNOBC@?6Results?5for?5AddI16_Iavx?5?9?5Satu@
  002c9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002d0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  002d5	90		 npad	 1

; 39   :     std::cout << "a:  " << a.ToStringI16() << nl;

  002d6	48 8d 95 28 03
	00 00		 lea	 rdx, QWORD PTR $T10[rbp]
  002dd	48 8d 4d 30	 lea	 rcx, QWORD PTR a$[rbp]
  002e1	e8 00 00 00 00	 call	 ?ToStringI16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; XmmVal::ToStringI16
  002e6	48 89 85 d8 03
	00 00		 mov	 QWORD PTR tv230[rbp], rax
  002ed	48 8b 85 d8 03
	00 00		 mov	 rax, QWORD PTR tv230[rbp]
  002f4	48 89 85 e0 03
	00 00		 mov	 QWORD PTR tv222[rbp], rax
  002fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KPNACMJI@a?3?5?5@
  00302	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00309	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0030e	48 8b 95 e0 03
	00 00		 mov	 rdx, QWORD PTR tv222[rbp]
  00315	48 8b c8	 mov	 rcx, rax
  00318	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  0031d	b2 0a		 mov	 dl, 10
  0031f	48 8b c8	 mov	 rcx, rax
  00322	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00327	90		 npad	 1
  00328	48 8d 8d 28 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  0032f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00334	90		 npad	 1

; 40   :     std::cout << "b:  " << b.ToStringI16() << nl;

  00335	48 8d 95 68 03
	00 00		 lea	 rdx, QWORD PTR $T11[rbp]
  0033c	48 8d 4d 60	 lea	 rcx, QWORD PTR b$[rbp]
  00340	e8 00 00 00 00	 call	 ?ToStringI16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; XmmVal::ToStringI16
  00345	48 89 85 d8 03
	00 00		 mov	 QWORD PTR tv231[rbp], rax
  0034c	48 8b 85 d8 03
	00 00		 mov	 rax, QWORD PTR tv231[rbp]
  00353	48 89 85 e0 03
	00 00		 mov	 QWORD PTR tv224[rbp], rax
  0035a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04OIHAFGEI@b?3?5?5@
  00361	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00368	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0036d	48 8b 95 e0 03
	00 00		 mov	 rdx, QWORD PTR tv224[rbp]
  00374	48 8b c8	 mov	 rcx, rax
  00377	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  0037c	b2 0a		 mov	 dl, 10
  0037e	48 8b c8	 mov	 rcx, rax
  00381	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00386	90		 npad	 1
  00387	48 8d 8d 68 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  0038e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00393	90		 npad	 1

; 41   :     std::cout << "c2: " << c2.ToStringI16() << nl;

  00394	48 8d 95 a8 03
	00 00		 lea	 rdx, QWORD PTR $T12[rbp]
  0039b	48 8d 8d c0 00
	00 00		 lea	 rcx, QWORD PTR c2$[rbp]
  003a2	e8 00 00 00 00	 call	 ?ToStringI16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; XmmVal::ToStringI16
  003a7	48 89 85 d8 03
	00 00		 mov	 QWORD PTR tv232[rbp], rax
  003ae	48 8b 85 d8 03
	00 00		 mov	 rax, QWORD PTR tv232[rbp]
  003b5	48 89 85 e0 03
	00 00		 mov	 QWORD PTR tv226[rbp], rax
  003bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04BBFHBLB@c2?3?5@
  003c3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003ca	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  003cf	48 8b 95 e0 03
	00 00		 mov	 rdx, QWORD PTR tv226[rbp]
  003d6	48 8b c8	 mov	 rcx, rax
  003d9	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  003de	b2 0a		 mov	 dl, 10
  003e0	48 8b c8	 mov	 rcx, rax
  003e3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  003e8	90		 npad	 1
  003e9	48 8d 8d a8 03
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  003f0	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  003f5	90		 npad	 1

; 42   : }

  003f6	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  003fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?AddI16@@YAXXZ$rtcFrameData
  00401	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00406	48 8b 8d e8 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0040d	48 33 cd	 xor	 rcx, rbp
  00410	e8 00 00 00 00	 call	 __security_check_cookie
  00415	48 8d a5 f8 03
	00 00		 lea	 rsp, QWORD PTR [rbp+1016]
  0041c	5f		 pop	 rdi
  0041d	5d		 pop	 rbp
  0041e	c3		 ret	 0
?AddI16@@YAXXZ ENDP					; AddI16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
nl$ = 4
a$ = 48
b$ = 96
c1$ = 144
c2$ = 192
$T7 = 616
$T8 = 680
$T9 = 744
$T10 = 808
$T11 = 872
$T12 = 936
tv227 = 984
tv228 = 984
tv229 = 984
tv230 = 984
tv231 = 984
tv232 = 984
tv216 = 992
tv218 = 992
tv220 = 992
tv222 = 992
tv224 = 992
tv226 = 992
__$ArrayPad$ = 1000
?dtor$0@?0??AddI16@@YAXXZ@4HA PROC			; `AddI16'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0??AddI16@@YAXXZ@4HA ENDP			; `AddI16'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
nl$ = 4
a$ = 48
b$ = 96
c1$ = 144
c2$ = 192
$T7 = 616
$T8 = 680
$T9 = 744
$T10 = 808
$T11 = 872
$T12 = 936
tv227 = 984
tv228 = 984
tv229 = 984
tv230 = 984
tv231 = 984
tv232 = 984
tv216 = 992
tv218 = 992
tv220 = 992
tv222 = 992
tv224 = 992
tv226 = 992
__$ArrayPad$ = 1000
?dtor$1@?0??AddI16@@YAXXZ@4HA PROC			; `AddI16'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0??AddI16@@YAXXZ@4HA ENDP			; `AddI16'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
nl$ = 4
a$ = 48
b$ = 96
c1$ = 144
c2$ = 192
$T7 = 616
$T8 = 680
$T9 = 744
$T10 = 808
$T11 = 872
$T12 = 936
tv227 = 984
tv228 = 984
tv229 = 984
tv230 = 984
tv231 = 984
tv232 = 984
tv216 = 992
tv218 = 992
tv220 = 992
tv222 = 992
tv224 = 992
tv226 = 992
__$ArrayPad$ = 1000
?dtor$2@?0??AddI16@@YAXXZ@4HA PROC			; `AddI16'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$2@?0??AddI16@@YAXXZ@4HA ENDP			; `AddI16'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
nl$ = 4
a$ = 48
b$ = 96
c1$ = 144
c2$ = 192
$T7 = 616
$T8 = 680
$T9 = 744
$T10 = 808
$T11 = 872
$T12 = 936
tv227 = 984
tv228 = 984
tv229 = 984
tv230 = 984
tv231 = 984
tv232 = 984
tv216 = 992
tv218 = 992
tv220 = 992
tv222 = 992
tv224 = 992
tv226 = 992
__$ArrayPad$ = 1000
?dtor$3@?0??AddI16@@YAXXZ@4HA PROC			; `AddI16'::`1'::dtor$3
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d 28 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$3@?0??AddI16@@YAXXZ@4HA ENDP			; `AddI16'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
nl$ = 4
a$ = 48
b$ = 96
c1$ = 144
c2$ = 192
$T7 = 616
$T8 = 680
$T9 = 744
$T10 = 808
$T11 = 872
$T12 = 936
tv227 = 984
tv228 = 984
tv229 = 984
tv230 = 984
tv231 = 984
tv232 = 984
tv216 = 992
tv218 = 992
tv220 = 992
tv222 = 992
tv224 = 992
tv226 = 992
__$ArrayPad$ = 1000
?dtor$4@?0??AddI16@@YAXXZ@4HA PROC			; `AddI16'::`1'::dtor$4
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d 68 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$4@?0??AddI16@@YAXXZ@4HA ENDP			; `AddI16'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
nl$ = 4
a$ = 48
b$ = 96
c1$ = 144
c2$ = 192
$T7 = 616
$T8 = 680
$T9 = 744
$T10 = 808
$T11 = 872
$T12 = 936
tv227 = 984
tv228 = 984
tv229 = 984
tv230 = 984
tv231 = 984
tv232 = 984
tv216 = 992
tv218 = 992
tv220 = 992
tv222 = 992
tv224 = 992
tv226 = 992
__$ArrayPad$ = 1000
?dtor$5@?0??AddI16@@YAXXZ@4HA PROC			; `AddI16'::`1'::dtor$5
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d a8 03
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$5@?0??AddI16@@YAXXZ@4HA ENDP			; `AddI16'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\C2simd\Ch02_01\Ch02_01.h
;	COMDAT ??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z
_TEXT	SEGMENT
oss$ = 16
i$4 = 276
$T5 = 504
$T6 = 548
tv84 = 564
tv88 = 568
__$ArrayPad$ = 576
this$ = 624
__$ReturnUdt$ = 632
x$ = 640
n$ = 648
w$ = 656
??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z PROC ; XmmVal::ToStringUint<unsigned short>, COMDAT

; 45   :     {

$LN10:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 78 02
	00 00		 sub	 rsp, 632		; 00000278H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00027	b9 66 00 00 00	 mov	 ecx, 102		; 00000066H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR [rsp+664]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 40 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	c7 85 24 02 00
	00 00 00 00 00	 mov	 DWORD PTR $T6[rbp], 0
  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0A91C1A1_Ch02_01@h
  0005d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00062	90		 npad	 1

; 46   :         std::ostringstream oss;

  00063	ba e8 00 00 00	 mov	 edx, 232		; 000000e8H
  00068	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  0006c	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
  00071	ba 01 00 00 00	 mov	 edx, 1
  00076	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  0007a	e8 00 00 00 00	 call	 ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
  0007f	90		 npad	 1

; 47   : 
; 48   :         for (int i = 0; i < n; i++)

  00080	c7 85 14 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$4[rbp], 0
  0008a	eb 0e		 jmp	 SHORT $LN4@ToStringUi
$LN2@ToStringUi:
  0008c	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR i$4[rbp]
  00092	ff c0		 inc	 eax
  00094	89 85 14 01 00
	00		 mov	 DWORD PTR i$4[rbp], eax
$LN4@ToStringUi:
  0009a	8b 85 88 02 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  000a0	39 85 14 01 00
	00		 cmp	 DWORD PTR i$4[rbp], eax
  000a6	0f 8d 88 00 00
	00		 jge	 $LN3@ToStringUi

; 49   :         {
; 50   :             oss << std::setw(w) << (uint64_t)x[i];

  000ac	48 63 85 14 01
	00 00		 movsxd	 rax, DWORD PTR i$4[rbp]
  000b3	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  000ba	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  000be	48 89 85 38 02
	00 00		 mov	 QWORD PTR tv88[rbp], rax
  000c5	48 63 8d 90 02
	00 00		 movsxd	 rcx, DWORD PTR w$[rbp]
  000cc	48 8b d1	 mov	 rdx, rcx
  000cf	48 8d 8d f8 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  000d6	e8 00 00 00 00	 call	 ?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z ; std::setw
  000db	48 8b d0	 mov	 rdx, rax
  000de	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  000e2	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char> >
  000e7	48 8b 8d 38 02
	00 00		 mov	 rcx, QWORD PTR tv88[rbp]
  000ee	48 8b d1	 mov	 rdx, rcx
  000f1	48 8b c8	 mov	 rcx, rax
  000f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_K@Z
  000fa	90		 npad	 1

; 51   : 
; 52   :             if (i + 1 == n / 2)

  000fb	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR i$4[rbp]
  00101	ff c0		 inc	 eax
  00103	89 85 34 02 00
	00		 mov	 DWORD PTR tv84[rbp], eax
  00109	8b 85 88 02 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  0010f	99		 cdq
  00110	2b c2		 sub	 eax, edx
  00112	d1 f8		 sar	 eax, 1
  00114	8b 8d 34 02 00
	00		 mov	 ecx, DWORD PTR tv84[rbp]
  0011a	3b c8		 cmp	 ecx, eax
  0011c	75 11		 jne	 SHORT $LN5@ToStringUi

; 53   :                 oss << "   |";

  0011e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04ODOJPIMC@?5?5?5?$HM@
  00125	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00129	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0012e	90		 npad	 1
$LN5@ToStringUi:

; 54   :         }

  0012f	e9 58 ff ff ff	 jmp	 $LN2@ToStringUi
$LN3@ToStringUi:

; 55   : 
; 56   :         return oss.str();

  00134	48 8b 95 78 02
	00 00		 mov	 rdx, QWORD PTR __$ReturnUdt$[rbp]
  0013b	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  0013f	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00144	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR $T6[rbp]
  0014a	83 c8 01	 or	 eax, 1
  0014d	89 85 24 02 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  00153	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00157	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  0015c	90		 npad	 1
  0015d	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 57   :     }

  00164	48 8b f8	 mov	 rdi, rax
  00167	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0016b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z$rtcFrameData
  00172	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00177	48 8b c7	 mov	 rax, rdi
  0017a	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00181	48 33 cd	 xor	 rcx, rbp
  00184	e8 00 00 00 00	 call	 __security_check_cookie
  00189	48 8d a5 58 02
	00 00		 lea	 rsp, QWORD PTR [rbp+600]
  00190	5f		 pop	 rdi
  00191	5d		 pop	 rbp
  00192	c3		 ret	 0
??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z ENDP ; XmmVal::ToStringUint<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
i$4 = 276
$T5 = 504
$T6 = 548
tv84 = 564
tv88 = 568
__$ArrayPad$ = 576
this$ = 624
__$ReturnUdt$ = 632
x$ = 640
n$ = 648
w$ = 656
?dtor$0@?0???$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z@4HA PROC ; `XmmVal::ToStringUint<unsigned short>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00018	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z@4HA ENDP ; `XmmVal::ToStringUint<unsigned short>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\C2simd\Ch02_01\Ch02_01.h
;	COMDAT ??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z
_TEXT	SEGMENT
oss$ = 16
i$4 = 276
$T5 = 504
$T6 = 548
tv84 = 564
tv88 = 568
__$ArrayPad$ = 576
this$ = 624
__$ReturnUdt$ = 632
x$ = 640
n$ = 648
w$ = 656
??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z PROC ; XmmVal::ToStringInt<short>, COMDAT

; 30   :     {

$LN10:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 78 02
	00 00		 sub	 rsp, 632		; 00000278H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00027	b9 66 00 00 00	 mov	 ecx, 102		; 00000066H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR [rsp+664]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 40 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	c7 85 24 02 00
	00 00 00 00 00	 mov	 DWORD PTR $T6[rbp], 0
  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0A91C1A1_Ch02_01@h
  0005d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00062	90		 npad	 1

; 31   :         std::ostringstream oss;

  00063	ba e8 00 00 00	 mov	 edx, 232		; 000000e8H
  00068	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  0006c	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
  00071	ba 01 00 00 00	 mov	 edx, 1
  00076	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  0007a	e8 00 00 00 00	 call	 ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
  0007f	90		 npad	 1

; 32   : 
; 33   :         for (int i = 0; i < n; i++)

  00080	c7 85 14 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$4[rbp], 0
  0008a	eb 0e		 jmp	 SHORT $LN4@ToStringIn
$LN2@ToStringIn:
  0008c	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR i$4[rbp]
  00092	ff c0		 inc	 eax
  00094	89 85 14 01 00
	00		 mov	 DWORD PTR i$4[rbp], eax
$LN4@ToStringIn:
  0009a	8b 85 88 02 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  000a0	39 85 14 01 00
	00		 cmp	 DWORD PTR i$4[rbp], eax
  000a6	0f 8d 89 00 00
	00		 jge	 $LN3@ToStringIn

; 34   :         {
; 35   :             oss << std::setw(w) << (int64_t)x[i];

  000ac	48 63 85 14 01
	00 00		 movsxd	 rax, DWORD PTR i$4[rbp]
  000b3	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  000ba	48 0f bf 04 41	 movsx	 rax, WORD PTR [rcx+rax*2]
  000bf	48 89 85 38 02
	00 00		 mov	 QWORD PTR tv88[rbp], rax
  000c6	48 63 8d 90 02
	00 00		 movsxd	 rcx, DWORD PTR w$[rbp]
  000cd	48 8b d1	 mov	 rdx, rcx
  000d0	48 8d 8d f8 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  000d7	e8 00 00 00 00	 call	 ?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z ; std::setw
  000dc	48 8b d0	 mov	 rdx, rax
  000df	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  000e3	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char> >
  000e8	48 8b 8d 38 02
	00 00		 mov	 rcx, QWORD PTR tv88[rbp]
  000ef	48 8b d1	 mov	 rdx, rcx
  000f2	48 8b c8	 mov	 rcx, rax
  000f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_J@Z
  000fb	90		 npad	 1

; 36   : 
; 37   :             if (i + 1 == n / 2)

  000fc	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR i$4[rbp]
  00102	ff c0		 inc	 eax
  00104	89 85 34 02 00
	00		 mov	 DWORD PTR tv84[rbp], eax
  0010a	8b 85 88 02 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  00110	99		 cdq
  00111	2b c2		 sub	 eax, edx
  00113	d1 f8		 sar	 eax, 1
  00115	8b 8d 34 02 00
	00		 mov	 ecx, DWORD PTR tv84[rbp]
  0011b	3b c8		 cmp	 ecx, eax
  0011d	75 11		 jne	 SHORT $LN5@ToStringIn

; 38   :                 oss << "   |";

  0011f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04ODOJPIMC@?5?5?5?$HM@
  00126	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  0012a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0012f	90		 npad	 1
$LN5@ToStringIn:

; 39   :         }

  00130	e9 57 ff ff ff	 jmp	 $LN2@ToStringIn
$LN3@ToStringIn:

; 40   : 
; 41   :         return oss.str();

  00135	48 8b 95 78 02
	00 00		 mov	 rdx, QWORD PTR __$ReturnUdt$[rbp]
  0013c	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00140	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00145	8b 85 24 02 00
	00		 mov	 eax, DWORD PTR $T6[rbp]
  0014b	83 c8 01	 or	 eax, 1
  0014e	89 85 24 02 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  00154	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00158	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  0015d	90		 npad	 1
  0015e	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 42   :     }

  00165	48 8b f8	 mov	 rdi, rax
  00168	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0016c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z$rtcFrameData
  00173	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00178	48 8b c7	 mov	 rax, rdi
  0017b	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00182	48 33 cd	 xor	 rcx, rbp
  00185	e8 00 00 00 00	 call	 __security_check_cookie
  0018a	48 8d a5 58 02
	00 00		 lea	 rsp, QWORD PTR [rbp+600]
  00191	5f		 pop	 rdi
  00192	5d		 pop	 rbp
  00193	c3		 ret	 0
??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z ENDP ; XmmVal::ToStringInt<short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
i$4 = 276
$T5 = 504
$T6 = 548
tv84 = 564
tv88 = 568
__$ArrayPad$ = 576
this$ = 624
__$ReturnUdt$ = 632
x$ = 640
n$ = 648
w$ = 656
?dtor$0@?0???$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z@4HA PROC ; `XmmVal::ToStringInt<short>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00018	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z@4HA ENDP ; `XmmVal::ToStringInt<short>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 344
tv283 = 356
tv285 = 356
tv137 = 360
tv139 = 360
tv295 = 360
tv296 = 360
__$ArrayPad$ = 368
_Ostr$ = 416
_Val$ = 424
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 774  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, const char* _Val) {

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001d	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+456]
  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00038	48 33 c5	 xor	 rax, rbp
  0003b	48 89 85 70 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__732225D7_ostream
  00049	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004e	90		 npad	 1

; 775  :     // insert NTBS into char stream
; 776  :     using _Elem = char;
; 777  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 778  : 
; 779  :     ios_base::iostate _State = ios_base::goodbit;

  0004f	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 780  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00056	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR _Val$[rbp]
  0005d	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
  00062	48 89 45 28	 mov	 QWORD PTR _Count$[rbp], rax

; 781  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00066	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0006d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00070	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00074	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0007b	48 03 c8	 add	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 8b c8	 mov	 rcx, rax
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0008a	48 85 c0	 test	 rax, rax
  0008d	7e 5b		 jle	 SHORT $LN17@operator
  0008f	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0009d	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000a4	48 03 c8	 add	 rcx, rax
  000a7	48 8b c1	 mov	 rax, rcx
  000aa	48 8b c8	 mov	 rcx, rax
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000b3	48 3b 45 28	 cmp	 rax, QWORD PTR _Count$[rbp]
  000b7	7e 31		 jle	 SHORT $LN17@operator
  000b9	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000c0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c3	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000c7	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000ce	48 03 c8	 add	 rcx, rax
  000d1	48 8b c1	 mov	 rax, rcx
  000d4	48 8b c8	 mov	 rcx, rax
  000d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000dd	48 2b 45 28	 sub	 rax, QWORD PTR _Count$[rbp]
  000e1	48 89 85 68 01
	00 00		 mov	 QWORD PTR tv137[rbp], rax
  000e8	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000ea	48 c7 85 68 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv137[rbp], 0
$LN18@operator:
  000f5	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR tv137[rbp]
  000fc	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax

; 782  :     const typename _Myos::sentry _Ok(_Ostr);

  00100	48 8b 95 a0 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  00107	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0010b	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00110	90		 npad	 1

; 783  : 
; 784  :     if (!_Ok) {

  00111	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00115	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0011a	0f b6 c0	 movzx	 eax, al
  0011d	85 c0		 test	 eax, eax
  0011f	75 0e		 jne	 SHORT $LN8@operator

; 785  :         _State |= ios_base::badbit;

  00121	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00124	83 c8 04	 or	 eax, 4
  00127	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 786  :     } else { // state okay, insert

  0012a	e9 0a 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 787  :         _TRY_IO_BEGIN
; 788  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  0012f	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00136	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00139	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0013d	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00144	48 03 c8	 add	 rcx, rax
  00147	48 8b c1	 mov	 rax, rcx
  0014a	48 8b c8	 mov	 rcx, rax
  0014d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  00153	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00158	83 f8 40	 cmp	 eax, 64			; 00000040H
  0015b	0f 84 a5 00 00
	00		 je	 $LN11@operator

; 789  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00161	eb 0b		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00163	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  00167	48 ff c8	 dec	 rax
  0016a	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN4@operator:
  0016e	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  00173	0f 8e 8d 00 00
	00		 jle	 $LN11@operator

; 790  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00179	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00180	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00183	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00187	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0018e	48 03 c8	 add	 rcx, rax
  00191	48 8b c1	 mov	 rax, rcx
  00194	48 8b c8	 mov	 rcx, rax
  00197	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  0019d	88 85 64 01 00
	00		 mov	 BYTE PTR tv285[rbp], al
  001a3	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  001aa	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001ad	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  001b1	48 8b 95 a0 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  001b8	48 03 d1	 add	 rdx, rcx
  001bb	48 8b ca	 mov	 rcx, rdx
  001be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001c4	0f b6 8d 64 01
	00 00		 movzx	 ecx, BYTE PTR tv285[rbp]
  001cb	0f b6 d1	 movzx	 edx, cl
  001ce	48 8b c8	 mov	 rcx, rax
  001d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001d7	89 85 68 01 00
	00		 mov	 DWORD PTR tv139[rbp], eax
  001dd	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001e2	8b 95 68 01 00
	00		 mov	 edx, DWORD PTR tv139[rbp]
  001e8	8b c8		 mov	 ecx, eax
  001ea	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  001ef	0f b6 c0	 movzx	 eax, al
  001f2	85 c0		 test	 eax, eax
  001f4	74 0b		 je	 SHORT $LN12@operator

; 791  :                     _State |= ios_base::badbit; // insertion failed, quit

  001f6	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  001f9	83 c8 04	 or	 eax, 4
  001fc	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 792  :                     break;

  001ff	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 793  :                 }
; 794  :             }

  00201	e9 5d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 795  :         }
; 796  : 
; 797  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00206	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  0020a	75 55		 jne	 SHORT $LN13@operator
  0020c	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00213	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00216	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0021a	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00221	48 03 c8	 add	 rcx, rax
  00224	48 8b c1	 mov	 rax, rcx
  00227	48 8b c8	 mov	 rcx, rax
  0022a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00230	4c 8b 45 28	 mov	 r8, QWORD PTR _Count$[rbp]
  00234	48 8b 95 a8 01
	00 00		 mov	 rdx, QWORD PTR _Val$[rbp]
  0023b	48 8b c8	 mov	 rcx, rax
  0023e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  00244	48 89 85 68 01
	00 00		 mov	 QWORD PTR tv295[rbp], rax
  0024b	48 8b 45 28	 mov	 rax, QWORD PTR _Count$[rbp]
  0024f	48 39 85 68 01
	00 00		 cmp	 QWORD PTR tv295[rbp], rax
  00256	74 09		 je	 SHORT $LN13@operator

; 798  :             _State |= ios_base::badbit;

  00258	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0025b	83 c8 04	 or	 eax, 4
  0025e	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN13@operator:

; 799  :         }
; 800  : 
; 801  :         if (_State == ios_base::goodbit) {

  00261	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  00265	0f 85 a5 00 00
	00		 jne	 $LN14@operator

; 802  :             for (; 0 < _Pad; --_Pad) { // pad on right

  0026b	eb 0b		 jmp	 SHORT $LN7@operator
$LN5@operator:
  0026d	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  00271	48 ff c8	 dec	 rax
  00274	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN7@operator:
  00278	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  0027d	0f 8e 8d 00 00
	00		 jle	 $LN14@operator

; 803  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00283	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0028a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0028d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00291	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00298	48 03 c8	 add	 rcx, rax
  0029b	48 8b c1	 mov	 rax, rcx
  0029e	48 8b c8	 mov	 rcx, rax
  002a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  002a7	88 85 64 01 00
	00		 mov	 BYTE PTR tv283[rbp], al
  002ad	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002b4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002b7	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  002bb	48 8b 95 a0 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  002c2	48 03 d1	 add	 rdx, rcx
  002c5	48 8b ca	 mov	 rcx, rdx
  002c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002ce	0f b6 8d 64 01
	00 00		 movzx	 ecx, BYTE PTR tv283[rbp]
  002d5	0f b6 d1	 movzx	 edx, cl
  002d8	48 8b c8	 mov	 rcx, rax
  002db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  002e1	89 85 68 01 00
	00		 mov	 DWORD PTR tv296[rbp], eax
  002e7	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  002ec	8b 95 68 01 00
	00		 mov	 edx, DWORD PTR tv296[rbp]
  002f2	8b c8		 mov	 ecx, eax
  002f4	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  002f9	0f b6 c0	 movzx	 eax, al
  002fc	85 c0		 test	 eax, eax
  002fe	74 0b		 je	 SHORT $LN15@operator

; 804  :                     _State |= ios_base::badbit; // insertion failed, quit

  00300	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00303	83 c8 04	 or	 eax, 4
  00306	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 805  :                     break;

  00309	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 806  :                 }
; 807  :             }

  0030b	e9 5d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 808  :         }
; 809  : 
; 810  :         _Ostr.width(0);

  00310	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00317	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0031a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0031e	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00325	48 03 c8	 add	 rcx, rax
  00328	48 8b c1	 mov	 rax, rcx
  0032b	33 d2		 xor	 edx, edx
  0032d	48 8b c8	 mov	 rcx, rax
  00330	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  00336	90		 npad	 1
  00337	eb 00		 jmp	 SHORT $LN9@operator
$LN23@operator:
$LN9@operator:

; 811  :         _CATCH_IO_(ios_base, _Ostr)
; 812  :     }
; 813  : 
; 814  :     _Ostr.setstate(_State);

  00339	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00340	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00343	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00347	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0034e	48 03 c8	 add	 rcx, rax
  00351	48 8b c1	 mov	 rax, rcx
  00354	45 33 c0	 xor	 r8d, r8d
  00357	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  0035a	48 8b c8	 mov	 rcx, rax
  0035d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00363	90		 npad	 1

; 815  :     return _Ostr;

  00364	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0036b	48 89 85 58 01
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  00372	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00376	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0037b	48 8b 85 58 01
	00 00		 mov	 rax, QWORD PTR $T4[rbp]

; 816  : }

  00382	48 8b f8	 mov	 rdi, rax
  00385	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00389	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData
  00390	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00395	48 8b c7	 mov	 rax, rdi
  00398	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0039f	48 33 cd	 xor	 rcx, rbp
  003a2	e8 00 00 00 00	 call	 __security_check_cookie
  003a7	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  003ae	5f		 pop	 rdi
  003af	5d		 pop	 rbp
  003b0	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 344
tv283 = 356
tv285 = 356
tv137 = 360
tv139 = 360
tv295 = 360
tv296 = 360
__$ArrayPad$ = 368
_Ostr$ = 416
_Val$ = 424
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 344
tv283 = 356
tv285 = 356
tv137 = 360
tv139 = 360
tv295 = 360
tv296 = 360
__$ArrayPad$ = 368
_Ostr$ = 416
_Val$ = 424
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 811  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00014	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\iomanip
;	COMDAT ??$?6DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z
_TEXT	SEGMENT
_Ostr$ = 224
_Manip$ = 232
??$?6DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z PROC ; std::operator<<<char,std::char_traits<char> >, COMDAT

; 384  :     friend basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Ostr, const _Smanip& _Manip) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EC30D6BF_iomanip
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 385  :         // insert by calling function with output stream and argument
; 386  :         (*_Manip._Pfun)(_Ostr, _Manip._Manarg);

  00025	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0002c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00033	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0003a	48 03 c8	 add	 rcx, rax
  0003d	48 8b c1	 mov	 rax, rcx
  00040	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Manip$[rbp]
  00047	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Manip$[rbp]
  00055	ff 10		 call	 QWORD PTR [rax]
  00057	90		 npad	 1

; 387  :         return _Ostr;

  00058	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]

; 388  :     }

  0005f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
??$?6DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ENDP ; std::operator<<<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001a	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00020	48 8b c8	 mov	 rcx, rax
  00023	e8 00 00 00 00	 call	 ??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
  00028	90		 npad	 1
  00029	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00036	48 8b c8	 mov	 rcx, rax
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
  0003f	90		 npad	 1
  00040	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00047	5f		 pop	 rdi
  00048	5d		 pop	 rbp
  00049	c3		 ret	 0
??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001e	48 2d 88 00 00
	00		 sub	 rax, 136		; 00000088H
  00024	48 8b c8	 mov	 rcx, rax
  00027	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  0002c	90		 npad	 1
  0002d	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00033	83 e0 01	 and	 eax, 1
  00036	85 c0		 test	 eax, eax
  00038	74 1b		 je	 SHORT $LN2@scalar
  0003a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	48 2d 88 00 00
	00		 sub	 rax, 136		; 00000088H
  00047	ba e8 00 00 00	 mov	 edx, 232		; 000000e8H
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00054	90		 npad	 1
$LN2@scalar:
  00055	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005c	48 2d 88 00 00
	00		 sub	 rax, 136		; 00000088H
  00062	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00069	5f		 pop	 rdi
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 224
classSize$ = 232
?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  0001d	33 c0		 xor	 eax, eax
  0001f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR classSize$[rbp]
  00026	f3 aa		 rep stosb
  00028	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002f	5f		 pop	 rdi
  00030	5d		 pop	 rbp
  00031	c3		 ret	 0
?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  00023	90		 npad	 1
  00024	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  0002a	83 e0 01	 and	 eax, 1
  0002d	85 c0		 test	 eax, eax
  0002f	74 12		 je	 SHORT $LN2@scalar
  00031	ba 78 00 00 00	 mov	 edx, 120		; 00000078H
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00042	90		 npad	 1
$LN2@scalar:
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z
_TEXT	SEGMENT
_State$ = 4
_Mode$ = 256
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate, COMDAT

; 579  :     static int _Getstate(ios_base::openmode _Mode) noexcept { // convert open mode to stream state bits

$LN8:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D35CD36D_sstream
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001e	90		 npad	 1

; 580  :         int _State = 0;

  0001f	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 581  :         if (!(_Mode & ios_base::in)) {

  00026	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  0002c	83 e0 01	 and	 eax, 1
  0002f	85 c0		 test	 eax, eax
  00031	75 09		 jne	 SHORT $LN2@Getstate

; 582  :             _State |= _Noread;

  00033	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00036	83 c8 04	 or	 eax, 4
  00039	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN2@Getstate:

; 583  :         }
; 584  : 
; 585  :         if (!(_Mode & ios_base::out)) {

  0003c	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00042	83 e0 02	 and	 eax, 2
  00045	85 c0		 test	 eax, eax
  00047	75 09		 jne	 SHORT $LN3@Getstate

; 586  :             _State |= _Constant;

  00049	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0004c	83 c8 02	 or	 eax, 2
  0004f	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN3@Getstate:

; 587  :         }
; 588  : 
; 589  :         if (_Mode & ios_base::app) {

  00052	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00058	83 e0 08	 and	 eax, 8
  0005b	85 c0		 test	 eax, eax
  0005d	74 09		 je	 SHORT $LN4@Getstate

; 590  :             _State |= _Append;

  0005f	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00062	83 c8 08	 or	 eax, 8
  00065	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN4@Getstate:

; 591  :         }
; 592  : 
; 593  :         if (_Mode & ios_base::ate) {

  00068	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  0006e	83 e0 04	 and	 eax, 4
  00071	85 c0		 test	 eax, eax
  00073	74 09		 je	 SHORT $LN5@Getstate

; 594  :             _State |= _Atend;

  00075	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00078	83 c8 10	 or	 eax, 16
  0007b	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN5@Getstate:

; 595  :         }
; 596  : 
; 597  :         return _State;

  0007e	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]

; 598  :     }

  00081	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00088	5f		 pop	 rdi
  00089	5d		 pop	 rbp
  0008a	c3		 ret	 0
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ
_TEXT	SEGMENT
tv88 = 192
tv95 = 200
this$ = 240
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT

; 559  :     void _Tidy() noexcept { // discard any allocated buffer and clear pointers

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D35CD36D_sstream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 560  :         if (_Mystate & _Allocated) {

  00020	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0002a	83 e0 01	 and	 eax, 1
  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 90 00 00
	00		 je	 $LN2@Tidy

; 561  :             _Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  00035	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00042	48 85 c0	 test	 rax, rax
  00045	74 16		 je	 SHORT $LN4@Tidy
  00047	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00054	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv88[rbp], rax
  0005b	eb 14		 jmp	 SHORT $LN5@Tidy
$LN4@Tidy:
  0005d	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0006a	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv88[rbp], rax
$LN5@Tidy:
  00071	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0007e	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv88[rbp]
  00085	48 2b c8	 sub	 rcx, rax
  00088	48 8b c1	 mov	 rax, rcx
  0008b	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv95[rbp], rax
  00092	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0009f	48 8b c8	 mov	 rcx, rax
  000a2	e8 00 00 00 00	 call	 ?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z ; std::pointer_traits<char *>::pointer_to
  000a7	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ae	48 83 c1 74	 add	 rcx, 116		; 00000074H
  000b2	48 8b 95 c8 00
	00 00		 mov	 rdx, QWORD PTR tv95[rbp]
  000b9	4c 8b c2	 mov	 r8, rdx
  000bc	48 8b d0	 mov	 rdx, rax
  000bf	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
  000c4	90		 npad	 1
$LN2@Tidy:

; 562  :                 static_cast<typename allocator_traits<allocator_type>::size_type>(
; 563  :                     (_Mysb::pptr() ? _Mysb::epptr() : _Mysb::egptr()) - _Mysb::eback()));
; 564  :         }
; 565  : 
; 566  :         _Mysb::setg(nullptr, nullptr, nullptr);

  000c5	45 33 c9	 xor	 r9d, r9d
  000c8	45 33 c0	 xor	 r8d, r8d
  000cb	33 d2		 xor	 edx, edx
  000cd	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
  000da	90		 npad	 1

; 567  :         _Mysb::setp(nullptr, nullptr);

  000db	45 33 c0	 xor	 r8d, r8d
  000de	33 d2		 xor	 edx, edx
  000e0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD0@Z
  000ed	90		 npad	 1

; 568  :         _Seekhigh = nullptr;

  000ee	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f5	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 569  :         _Mystate &= ~_Allocated;

  000fd	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00104	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00107	83 e0 fe	 and	 eax, -2
  0010a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00111	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 570  :     }

  00114	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0011b	5f		 pop	 rdi
  0011c	5d		 pop	 rbp
  0011d	c3		 ret	 0
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\sstream
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
_Need_read_but_cannot$ = 4
_Need_write_but_cannot$ = 36
_Off$ = 72
_Gptr_old$ = 104
_Pptr_old$ = 136
_Seeklow$ = 168
_Seekdist$ = 200
_Newptr$ = 232
tv69 = 436
tv75 = 436
tv131 = 440
this$ = 480
__$ReturnUdt$ = 488
_Pos$ = 496
_Mode$ = 504
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT

; 461  :     pos_type seekpos(pos_type _Pos, ios_base::openmode _Mode = ios_base::in | ios_base::out) override {

$LN18:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 01
	00 00		 sub	 rsp, 488		; 000001e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D35CD36D_sstream
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002e	90		 npad	 1

; 462  :         const bool _Need_read_but_cannot  = (_Mode & ios_base::in) != 0 && (_Mystate & _Noread) != 0;

  0002f	8b 85 f8 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00035	83 e0 01	 and	 eax, 1
  00038	85 c0		 test	 eax, eax
  0003a	74 1a		 je	 SHORT $LN12@seekpos
  0003c	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00043	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00046	83 e0 04	 and	 eax, 4
  00049	85 c0		 test	 eax, eax
  0004b	74 09		 je	 SHORT $LN12@seekpos
  0004d	c6 85 b4 01 00
	00 01		 mov	 BYTE PTR tv69[rbp], 1
  00054	eb 07		 jmp	 SHORT $LN13@seekpos
$LN12@seekpos:
  00056	c6 85 b4 01 00
	00 00		 mov	 BYTE PTR tv69[rbp], 0
$LN13@seekpos:
  0005d	0f b6 85 b4 01
	00 00		 movzx	 eax, BYTE PTR tv69[rbp]
  00064	88 45 04	 mov	 BYTE PTR _Need_read_but_cannot$[rbp], al

; 463  :         const bool _Need_write_but_cannot = (_Mode & ios_base::out) != 0 && (_Mystate & _Constant) != 0;

  00067	8b 85 f8 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  0006d	83 e0 02	 and	 eax, 2
  00070	85 c0		 test	 eax, eax
  00072	74 1a		 je	 SHORT $LN14@seekpos
  00074	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0007e	83 e0 02	 and	 eax, 2
  00081	85 c0		 test	 eax, eax
  00083	74 09		 je	 SHORT $LN14@seekpos
  00085	c6 85 b4 01 00
	00 01		 mov	 BYTE PTR tv75[rbp], 1
  0008c	eb 07		 jmp	 SHORT $LN15@seekpos
$LN14@seekpos:
  0008e	c6 85 b4 01 00
	00 00		 mov	 BYTE PTR tv75[rbp], 0
$LN15@seekpos:
  00095	0f b6 85 b4 01
	00 00		 movzx	 eax, BYTE PTR tv75[rbp]
  0009c	88 45 24	 mov	 BYTE PTR _Need_write_but_cannot$[rbp], al

; 464  :         if (_Need_read_but_cannot || _Need_write_but_cannot) {

  0009f	0f b6 45 04	 movzx	 eax, BYTE PTR _Need_read_but_cannot$[rbp]
  000a3	85 c0		 test	 eax, eax
  000a5	75 08		 jne	 SHORT $LN3@seekpos
  000a7	0f b6 45 24	 movzx	 eax, BYTE PTR _Need_write_but_cannot$[rbp]
  000ab	85 c0		 test	 eax, eax
  000ad	74 20		 je	 SHORT $LN2@seekpos
$LN3@seekpos:

; 465  :             return pos_type{off_type{-1}};

  000af	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  000b6	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  000bd	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  000c2	90		 npad	 1
  000c3	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  000ca	e9 ee 01 00 00	 jmp	 $LN1@seekpos
$LN2@seekpos:

; 466  :         }
; 467  : 
; 468  :         // change position to _Pos, according to _Mode
; 469  :         const auto _Off      = static_cast<streamoff>(_Pos);

  000cf	48 8b 8d f0 01
	00 00		 mov	 rcx, QWORD PTR _Pos$[rbp]
  000d6	e8 00 00 00 00	 call	 ??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ ; std::fpos<_Mbstatet>::operator __int64
  000db	48 89 45 48	 mov	 QWORD PTR _Off$[rbp], rax

; 470  :         const auto _Gptr_old = _Mysb::gptr();

  000df	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000ec	48 89 45 68	 mov	 QWORD PTR _Gptr_old$[rbp], rax

; 471  :         const auto _Pptr_old = (_Mystate & _Constant) ? nullptr : _Mysb::pptr();

  000f0	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f7	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000fa	83 e0 02	 and	 eax, 2
  000fd	85 c0		 test	 eax, eax
  000ff	74 0d		 je	 SHORT $LN16@seekpos
  00101	48 c7 85 b8 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv131[rbp], 0
  0010c	eb 14		 jmp	 SHORT $LN17@seekpos
$LN16@seekpos:
  0010e	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00115	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0011b	48 89 85 b8 01
	00 00		 mov	 QWORD PTR tv131[rbp], rax
$LN17@seekpos:
  00122	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR tv131[rbp]
  00129	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Pptr_old$[rbp], rax

; 472  :         if (_Pptr_old && _Seekhigh < _Pptr_old) { // update high-water pointer

  00130	48 83 bd 88 00
	00 00 00	 cmp	 QWORD PTR _Pptr_old$[rbp], 0
  00138	74 26		 je	 SHORT $LN4@seekpos
  0013a	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00141	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Pptr_old$[rbp]
  00148	48 39 48 68	 cmp	 QWORD PTR [rax+104], rcx
  0014c	73 12		 jae	 SHORT $LN4@seekpos

; 473  :             _Seekhigh = _Pptr_old;

  0014e	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00155	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Pptr_old$[rbp]
  0015c	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx
$LN4@seekpos:

; 474  :         }
; 475  : 
; 476  :         const auto _Seeklow  = _Mysb::eback();

  00160	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00167	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0016d	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _Seeklow$[rbp], rax

; 477  :         const auto _Seekdist = _Seekhigh - _Seeklow;

  00174	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0017b	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Seeklow$[rbp]
  00182	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00186	48 2b c1	 sub	 rax, rcx
  00189	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _Seekdist$[rbp], rax

; 478  :         if (static_cast<unsigned long long>(_Off) > static_cast<unsigned long long>(_Seekdist)) {

  00190	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR _Seekdist$[rbp]
  00197	48 39 45 48	 cmp	 QWORD PTR _Off$[rbp], rax
  0019b	76 20		 jbe	 SHORT $LN5@seekpos

; 479  :             return pos_type{off_type{-1}};

  0019d	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  001a4	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  001ab	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  001b0	90		 npad	 1
  001b1	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  001b8	e9 00 01 00 00	 jmp	 $LN1@seekpos
$LN5@seekpos:

; 480  :         }
; 481  : 
; 482  :         if (_Off != 0 && (((_Mode & ios_base::in) && !_Gptr_old) || ((_Mode & ios_base::out) && !_Pptr_old))) {

  001bd	48 83 7d 48 00	 cmp	 QWORD PTR _Off$[rbp], 0
  001c2	74 4b		 je	 SHORT $LN6@seekpos
  001c4	8b 85 f8 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  001ca	83 e0 01	 and	 eax, 1
  001cd	85 c0		 test	 eax, eax
  001cf	74 07		 je	 SHORT $LN8@seekpos
  001d1	48 83 7d 68 00	 cmp	 QWORD PTR _Gptr_old$[rbp], 0
  001d6	74 17		 je	 SHORT $LN7@seekpos
$LN8@seekpos:
  001d8	8b 85 f8 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  001de	83 e0 02	 and	 eax, 2
  001e1	85 c0		 test	 eax, eax
  001e3	74 2a		 je	 SHORT $LN6@seekpos
  001e5	48 83 bd 88 00
	00 00 00	 cmp	 QWORD PTR _Pptr_old$[rbp], 0
  001ed	75 20		 jne	 SHORT $LN6@seekpos
$LN7@seekpos:

; 483  :             return pos_type{off_type{-1}};

  001ef	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  001f6	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  001fd	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00202	90		 npad	 1
  00203	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  0020a	e9 ae 00 00 00	 jmp	 $LN1@seekpos
$LN6@seekpos:

; 484  :         }
; 485  : 
; 486  :         const auto _Newptr = _Seeklow + _Off; // may perform nullptr + 0

  0020f	48 8b 45 48	 mov	 rax, QWORD PTR _Off$[rbp]
  00213	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Seeklow$[rbp]
  0021a	48 03 c8	 add	 rcx, rax
  0021d	48 8b c1	 mov	 rax, rcx
  00220	48 89 85 e8 00
	00 00		 mov	 QWORD PTR _Newptr$[rbp], rax

; 487  :         if ((_Mode & ios_base::in) && _Gptr_old) {

  00227	8b 85 f8 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  0022d	83 e0 01	 and	 eax, 1
  00230	85 c0		 test	 eax, eax
  00232	74 2e		 je	 SHORT $LN9@seekpos
  00234	48 83 7d 68 00	 cmp	 QWORD PTR _Gptr_old$[rbp], 0
  00239	74 27		 je	 SHORT $LN9@seekpos

; 488  :             _Mysb::setg(_Seeklow, _Newptr, _Seekhigh);

  0023b	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00242	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  00246	4c 8b 85 e8 00
	00 00		 mov	 r8, QWORD PTR _Newptr$[rbp]
  0024d	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR _Seeklow$[rbp]
  00254	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0025b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
  00261	90		 npad	 1
$LN9@seekpos:

; 489  :         }
; 490  : 
; 491  :         if ((_Mode & ios_base::out) && _Pptr_old) {

  00262	8b 85 f8 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00268	83 e0 02	 and	 eax, 2
  0026b	85 c0		 test	 eax, eax
  0026d	74 36		 je	 SHORT $LN10@seekpos
  0026f	48 83 bd 88 00
	00 00 00	 cmp	 QWORD PTR _Pptr_old$[rbp], 0
  00277	74 2c		 je	 SHORT $LN10@seekpos

; 492  :             _Mysb::setp(_Seeklow, _Newptr, _Mysb::epptr());

  00279	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00280	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00286	4c 8b c8	 mov	 r9, rax
  00289	4c 8b 85 e8 00
	00 00		 mov	 r8, QWORD PTR _Newptr$[rbp]
  00290	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR _Seeklow$[rbp]
  00297	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0029e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
  002a4	90		 npad	 1
$LN10@seekpos:

; 493  :         }
; 494  : 
; 495  :         return pos_type{_Off};

  002a5	48 8b 55 48	 mov	 rdx, QWORD PTR _Off$[rbp]
  002a9	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  002b0	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  002b5	90		 npad	 1
  002b6	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
$LN1@seekpos:

; 496  :     }

  002bd	48 8d a5 c8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+456]
  002c4	5f		 pop	 rdi
  002c5	5d		 pop	 rbp
  002c6	c3		 ret	 0
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\sstream
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
_Need_read_but_cannot$ = 4
_Need_write_but_cannot$ = 36
_Gptr_old$ = 72
_Pptr_old$ = 104
_Seeklow$ = 136
_Seekdist$ = 168
_Newoff$ = 200
_Both$1 = 228
_Newptr$ = 264
tv69 = 468
tv75 = 468
tv142 = 468
tv129 = 472
this$ = 512
__$ReturnUdt$ = 520
_Off$ = 528
_Way$ = 536
_Mode$ = 544
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT

; 395  :         off_type _Off, ios_base::seekdir _Way, ios_base::openmode _Mode = ios_base::in | ios_base::out) override {

$LN31:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D35CD36D_sstream
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002e	90		 npad	 1

; 396  :         const bool _Need_read_but_cannot  = (_Mode & ios_base::in) != 0 && (_Mystate & _Noread) != 0;

  0002f	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00035	83 e0 01	 and	 eax, 1
  00038	85 c0		 test	 eax, eax
  0003a	74 1a		 je	 SHORT $LN25@seekoff
  0003c	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00043	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00046	83 e0 04	 and	 eax, 4
  00049	85 c0		 test	 eax, eax
  0004b	74 09		 je	 SHORT $LN25@seekoff
  0004d	c6 85 d4 01 00
	00 01		 mov	 BYTE PTR tv69[rbp], 1
  00054	eb 07		 jmp	 SHORT $LN26@seekoff
$LN25@seekoff:
  00056	c6 85 d4 01 00
	00 00		 mov	 BYTE PTR tv69[rbp], 0
$LN26@seekoff:
  0005d	0f b6 85 d4 01
	00 00		 movzx	 eax, BYTE PTR tv69[rbp]
  00064	88 45 04	 mov	 BYTE PTR _Need_read_but_cannot$[rbp], al

; 397  :         const bool _Need_write_but_cannot = (_Mode & ios_base::out) != 0 && (_Mystate & _Constant) != 0;

  00067	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  0006d	83 e0 02	 and	 eax, 2
  00070	85 c0		 test	 eax, eax
  00072	74 1a		 je	 SHORT $LN27@seekoff
  00074	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0007e	83 e0 02	 and	 eax, 2
  00081	85 c0		 test	 eax, eax
  00083	74 09		 je	 SHORT $LN27@seekoff
  00085	c6 85 d4 01 00
	00 01		 mov	 BYTE PTR tv75[rbp], 1
  0008c	eb 07		 jmp	 SHORT $LN28@seekoff
$LN27@seekoff:
  0008e	c6 85 d4 01 00
	00 00		 mov	 BYTE PTR tv75[rbp], 0
$LN28@seekoff:
  00095	0f b6 85 d4 01
	00 00		 movzx	 eax, BYTE PTR tv75[rbp]
  0009c	88 45 24	 mov	 BYTE PTR _Need_write_but_cannot$[rbp], al

; 398  :         if (_Need_read_but_cannot || _Need_write_but_cannot) {

  0009f	0f b6 45 04	 movzx	 eax, BYTE PTR _Need_read_but_cannot$[rbp]
  000a3	85 c0		 test	 eax, eax
  000a5	75 08		 jne	 SHORT $LN5@seekoff
  000a7	0f b6 45 24	 movzx	 eax, BYTE PTR _Need_write_but_cannot$[rbp]
  000ab	85 c0		 test	 eax, eax
  000ad	74 20		 je	 SHORT $LN4@seekoff
$LN5@seekoff:

; 399  :             return pos_type{off_type{-1}};

  000af	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  000b6	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  000bd	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  000c2	90		 npad	 1
  000c3	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  000ca	e9 f9 02 00 00	 jmp	 $LN1@seekoff
$LN4@seekoff:

; 400  :         }
; 401  : 
; 402  :         // change position by _Off, according to _Way, _Mode
; 403  :         const auto _Gptr_old = _Mysb::gptr();

  000cf	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000dc	48 89 45 48	 mov	 QWORD PTR _Gptr_old$[rbp], rax

; 404  :         const auto _Pptr_old = (_Mystate & _Constant) ? nullptr : _Mysb::pptr();

  000e0	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e7	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000ea	83 e0 02	 and	 eax, 2
  000ed	85 c0		 test	 eax, eax
  000ef	74 0d		 je	 SHORT $LN29@seekoff
  000f1	48 c7 85 d8 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv129[rbp], 0
  000fc	eb 14		 jmp	 SHORT $LN30@seekoff
$LN29@seekoff:
  000fe	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00105	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0010b	48 89 85 d8 01
	00 00		 mov	 QWORD PTR tv129[rbp], rax
$LN30@seekoff:
  00112	48 8b 85 d8 01
	00 00		 mov	 rax, QWORD PTR tv129[rbp]
  00119	48 89 45 68	 mov	 QWORD PTR _Pptr_old$[rbp], rax

; 405  :         if (_Pptr_old && _Seekhigh < _Pptr_old) { // update high-water pointer

  0011d	48 83 7d 68 00	 cmp	 QWORD PTR _Pptr_old$[rbp], 0
  00122	74 20		 je	 SHORT $LN6@seekoff
  00124	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0012b	48 8b 4d 68	 mov	 rcx, QWORD PTR _Pptr_old$[rbp]
  0012f	48 39 48 68	 cmp	 QWORD PTR [rax+104], rcx
  00133	73 0f		 jae	 SHORT $LN6@seekoff

; 406  :             _Seekhigh = _Pptr_old;

  00135	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0013c	48 8b 4d 68	 mov	 rcx, QWORD PTR _Pptr_old$[rbp]
  00140	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx
$LN6@seekoff:

; 407  :         }
; 408  : 
; 409  :         const auto _Seeklow  = _Mysb::eback();

  00144	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0014b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00151	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Seeklow$[rbp], rax

; 410  :         const auto _Seekdist = _Seekhigh - _Seeklow;

  00158	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0015f	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Seeklow$[rbp]
  00166	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0016a	48 2b c1	 sub	 rax, rcx
  0016d	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _Seekdist$[rbp], rax

; 411  :         off_type _Newoff;
; 412  :         switch (_Way) {

  00174	8b 85 18 02 00
	00		 mov	 eax, DWORD PTR _Way$[rbp]
  0017a	89 85 d4 01 00
	00		 mov	 DWORD PTR tv142[rbp], eax
  00180	83 bd d4 01 00
	00 00		 cmp	 DWORD PTR tv142[rbp], 0
  00187	74 17		 je	 SHORT $LN7@seekoff
  00189	83 bd d4 01 00
	00 01		 cmp	 DWORD PTR tv142[rbp], 1
  00190	74 31		 je	 SHORT $LN9@seekoff
  00192	83 bd d4 01 00
	00 02		 cmp	 DWORD PTR tv142[rbp], 2
  00199	74 15		 je	 SHORT $LN8@seekoff
  0019b	e9 ad 00 00 00	 jmp	 $LN17@seekoff
$LN7@seekoff:

; 413  :         case ios_base::beg:
; 414  :             _Newoff = 0;

  001a0	48 c7 85 c8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR _Newoff$[rbp], 0

; 415  :             break;

  001ab	e9 bd 00 00 00	 jmp	 $LN2@seekoff
$LN8@seekoff:

; 416  :         case ios_base::end:
; 417  :             _Newoff = _Seekdist;

  001b0	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR _Seekdist$[rbp]
  001b7	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _Newoff$[rbp], rax

; 418  :             break;

  001be	e9 aa 00 00 00	 jmp	 $LN2@seekoff
$LN9@seekoff:

; 419  :         case ios_base::cur:
; 420  :             {
; 421  :                 constexpr auto _Both = ios_base::in | ios_base::out;

  001c3	c7 85 e4 00 00
	00 03 00 00 00	 mov	 DWORD PTR _Both$1[rbp], 3

; 422  :                 if ((_Mode & _Both) != _Both) { // prohibited by N4950 [tab:stringbuf.seekoff.pos]

  001cd	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  001d3	83 e0 03	 and	 eax, 3
  001d6	83 f8 03	 cmp	 eax, 3
  001d9	74 72		 je	 SHORT $LN10@seekoff

; 423  :                     if (_Mode & ios_base::in) {

  001db	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  001e1	83 e0 01	 and	 eax, 1
  001e4	85 c0		 test	 eax, eax
  001e6	74 2d		 je	 SHORT $LN11@seekoff

; 424  :                         if (_Gptr_old || !_Seeklow) {

  001e8	48 83 7d 48 00	 cmp	 QWORD PTR _Gptr_old$[rbp], 0
  001ed	75 0a		 jne	 SHORT $LN14@seekoff
  001ef	48 83 bd 88 00
	00 00 00	 cmp	 QWORD PTR _Seeklow$[rbp], 0
  001f7	75 1a		 jne	 SHORT $LN13@seekoff
$LN14@seekoff:

; 425  :                             _Newoff = _Gptr_old - _Seeklow;

  001f9	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _Seeklow$[rbp]
  00200	48 8b 4d 48	 mov	 rcx, QWORD PTR _Gptr_old$[rbp]
  00204	48 2b c8	 sub	 rcx, rax
  00207	48 8b c1	 mov	 rax, rcx
  0020a	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _Newoff$[rbp], rax

; 426  :                             break;

  00211	eb 5a		 jmp	 SHORT $LN2@seekoff
$LN13@seekoff:

; 427  :                         }

  00213	eb 38		 jmp	 SHORT $LN12@seekoff
$LN11@seekoff:

; 428  :                     } else if ((_Mode & ios_base::out) && (_Pptr_old || !_Seeklow)) {

  00215	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  0021b	83 e0 02	 and	 eax, 2
  0021e	85 c0		 test	 eax, eax
  00220	74 2b		 je	 SHORT $LN15@seekoff
  00222	48 83 7d 68 00	 cmp	 QWORD PTR _Pptr_old$[rbp], 0
  00227	75 0a		 jne	 SHORT $LN16@seekoff
  00229	48 83 bd 88 00
	00 00 00	 cmp	 QWORD PTR _Seeklow$[rbp], 0
  00231	75 1a		 jne	 SHORT $LN15@seekoff
$LN16@seekoff:

; 429  :                         _Newoff = _Pptr_old - _Seeklow;

  00233	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _Seeklow$[rbp]
  0023a	48 8b 4d 68	 mov	 rcx, QWORD PTR _Pptr_old$[rbp]
  0023e	48 2b c8	 sub	 rcx, rax
  00241	48 8b c1	 mov	 rax, rcx
  00244	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _Newoff$[rbp], rax

; 430  :                         break;

  0024b	eb 20		 jmp	 SHORT $LN2@seekoff
$LN15@seekoff:
$LN12@seekoff:
$LN10@seekoff:
$LN17@seekoff:

; 431  :                     }
; 432  :                 }
; 433  :             }
; 434  : 
; 435  :             _FALLTHROUGH;
; 436  :         default:
; 437  :             return pos_type{off_type{-1}};

  0024d	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00254	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  0025b	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00260	90		 npad	 1
  00261	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00268	e9 5b 01 00 00	 jmp	 $LN1@seekoff
$LN2@seekoff:

; 438  :         }
; 439  : 
; 440  :         if (static_cast<unsigned long long>(_Off) + _Newoff > static_cast<unsigned long long>(_Seekdist)) {

  0026d	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR _Newoff$[rbp]
  00274	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  0027b	48 03 c8	 add	 rcx, rax
  0027e	48 8b c1	 mov	 rax, rcx
  00281	48 3b 85 a8 00
	00 00		 cmp	 rax, QWORD PTR _Seekdist$[rbp]
  00288	76 20		 jbe	 SHORT $LN18@seekoff

; 441  :             return pos_type{off_type{-1}};

  0028a	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00291	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00298	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  0029d	90		 npad	 1
  0029e	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  002a5	e9 1e 01 00 00	 jmp	 $LN1@seekoff
$LN18@seekoff:

; 442  :         }
; 443  : 
; 444  :         _Off += _Newoff;

  002aa	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR _Newoff$[rbp]
  002b1	48 8b 8d 10 02
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  002b8	48 03 c8	 add	 rcx, rax
  002bb	48 8b c1	 mov	 rax, rcx
  002be	48 89 85 10 02
	00 00		 mov	 QWORD PTR _Off$[rbp], rax

; 445  :         if (_Off != 0 && (((_Mode & ios_base::in) && !_Gptr_old) || ((_Mode & ios_base::out) && !_Pptr_old))) {

  002c5	48 83 bd 10 02
	00 00 00	 cmp	 QWORD PTR _Off$[rbp], 0
  002cd	74 48		 je	 SHORT $LN19@seekoff
  002cf	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  002d5	83 e0 01	 and	 eax, 1
  002d8	85 c0		 test	 eax, eax
  002da	74 07		 je	 SHORT $LN21@seekoff
  002dc	48 83 7d 48 00	 cmp	 QWORD PTR _Gptr_old$[rbp], 0
  002e1	74 14		 je	 SHORT $LN20@seekoff
$LN21@seekoff:
  002e3	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  002e9	83 e0 02	 and	 eax, 2
  002ec	85 c0		 test	 eax, eax
  002ee	74 27		 je	 SHORT $LN19@seekoff
  002f0	48 83 7d 68 00	 cmp	 QWORD PTR _Pptr_old$[rbp], 0
  002f5	75 20		 jne	 SHORT $LN19@seekoff
$LN20@seekoff:

; 446  :             return pos_type{off_type{-1}};

  002f7	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  002fe	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00305	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  0030a	90		 npad	 1
  0030b	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00312	e9 b1 00 00 00	 jmp	 $LN1@seekoff
$LN19@seekoff:

; 447  :         }
; 448  : 
; 449  :         const auto _Newptr = _Seeklow + _Off; // may perform nullptr + 0

  00317	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR _Off$[rbp]
  0031e	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Seeklow$[rbp]
  00325	48 03 c8	 add	 rcx, rax
  00328	48 8b c1	 mov	 rax, rcx
  0032b	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Newptr$[rbp], rax

; 450  :         if ((_Mode & ios_base::in) && _Gptr_old) {

  00332	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00338	83 e0 01	 and	 eax, 1
  0033b	85 c0		 test	 eax, eax
  0033d	74 2e		 je	 SHORT $LN22@seekoff
  0033f	48 83 7d 48 00	 cmp	 QWORD PTR _Gptr_old$[rbp], 0
  00344	74 27		 je	 SHORT $LN22@seekoff

; 451  :             _Mysb::setg(_Seeklow, _Newptr, _Seekhigh);

  00346	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0034d	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  00351	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR _Newptr$[rbp]
  00358	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR _Seeklow$[rbp]
  0035f	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00366	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
  0036c	90		 npad	 1
$LN22@seekoff:

; 452  :         }
; 453  : 
; 454  :         if ((_Mode & ios_base::out) && _Pptr_old) {

  0036d	8b 85 20 02 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00373	83 e0 02	 and	 eax, 2
  00376	85 c0		 test	 eax, eax
  00378	74 33		 je	 SHORT $LN23@seekoff
  0037a	48 83 7d 68 00	 cmp	 QWORD PTR _Pptr_old$[rbp], 0
  0037f	74 2c		 je	 SHORT $LN23@seekoff

; 455  :             _Mysb::setp(_Seeklow, _Newptr, _Mysb::epptr());

  00381	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00388	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0038e	4c 8b c8	 mov	 r9, rax
  00391	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR _Newptr$[rbp]
  00398	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR _Seeklow$[rbp]
  0039f	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  003a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
  003ac	90		 npad	 1
$LN23@seekoff:

; 456  :         }
; 457  : 
; 458  :         return pos_type{_Off};

  003ad	48 8b 95 10 02
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  003b4	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  003bb	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  003c0	90		 npad	 1
  003c1	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
$LN1@seekoff:

; 459  :     }

  003c8	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  003cf	5f		 pop	 rdi
  003d0	5d		 pop	 rbp
  003d1	c3		 ret	 0
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\sstream
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ
_TEXT	SEGMENT
_Gptr$ = 8
_Pptr$ = 40
_Local_highwater$ = 72
tv142 = 280
__$ArrayPad$ = 288
this$ = 336
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT

; 368  :     int_type underflow() override { // get an element from stream, but don't point past it

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 1e 00 00 00	 mov	 ecx, 30
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 20 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D35CD36D_sstream
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00049	90		 npad	 1

; 369  :         const auto _Gptr = _Mysb::gptr();

  0004a	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00057	48 89 45 08	 mov	 QWORD PTR _Gptr$[rbp], rax

; 370  :         if (!_Gptr) { // no character buffer, fail

  0005b	48 83 7d 08 00	 cmp	 QWORD PTR _Gptr$[rbp], 0
  00060	75 0a		 jne	 SHORT $LN2@underflow

; 371  :             return _Traits::eof();

  00062	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00067	e9 ea 00 00 00	 jmp	 $LN1@underflow
$LN2@underflow:

; 372  :         }
; 373  : 
; 374  :         if (_Gptr < _Mysb::egptr()) {

  0006c	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00079	48 39 45 08	 cmp	 QWORD PTR _Gptr$[rbp], rax
  0007d	73 11		 jae	 SHORT $LN3@underflow

; 375  :             return _Traits::to_int_type(*_Gptr);

  0007f	48 8b 45 08	 mov	 rax, QWORD PTR _Gptr$[rbp]
  00083	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00086	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
  0008b	e9 c6 00 00 00	 jmp	 $LN1@underflow
$LN3@underflow:

; 376  :         }
; 377  : 
; 378  :         // try to add initialized characters from the put area into the get area
; 379  :         const auto _Pptr = _Mysb::pptr();

  00090	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0009d	48 89 45 28	 mov	 QWORD PTR _Pptr$[rbp], rax

; 380  :         if (!_Pptr || (_Mystate & _Noread)) { // no put area or read disallowed

  000a1	48 83 7d 28 00	 cmp	 QWORD PTR _Pptr$[rbp], 0
  000a6	74 11		 je	 SHORT $LN5@underflow
  000a8	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000af	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000b2	83 e0 04	 and	 eax, 4
  000b5	85 c0		 test	 eax, eax
  000b7	74 0a		 je	 SHORT $LN4@underflow
$LN5@underflow:

; 381  :             return _Traits::eof();

  000b9	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  000be	e9 93 00 00 00	 jmp	 $LN1@underflow
$LN4@underflow:

; 382  :         }
; 383  : 
; 384  :         const auto _Local_highwater = (_STD max)(_Seekhigh, _Pptr);

  000c3	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ca	48 83 c0 68	 add	 rax, 104		; 00000068H
  000ce	48 8d 55 28	 lea	 rdx, QWORD PTR _Pptr$[rbp]
  000d2	48 8b c8	 mov	 rcx, rax
  000d5	e8 00 00 00 00	 call	 ??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z ; std::max<char *>
  000da	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000dd	48 89 45 48	 mov	 QWORD PTR _Local_highwater$[rbp], rax

; 385  :         if (_Local_highwater <= _Gptr) { // nothing in the put area to take

  000e1	48 8b 45 08	 mov	 rax, QWORD PTR _Gptr$[rbp]
  000e5	48 39 45 48	 cmp	 QWORD PTR _Local_highwater$[rbp], rax
  000e9	77 07		 ja	 SHORT $LN6@underflow

; 386  :             return _Traits::eof();

  000eb	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  000f0	eb 64		 jmp	 SHORT $LN1@underflow
$LN6@underflow:

; 387  :         }
; 388  : 
; 389  :         _Seekhigh = _Local_highwater;

  000f2	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f9	48 8b 4d 48	 mov	 rcx, QWORD PTR _Local_highwater$[rbp]
  000fd	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 390  :         _Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Local_highwater);

  00101	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00108	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0010e	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv142[rbp], rax
  00115	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00122	4c 8b 4d 48	 mov	 r9, QWORD PTR _Local_highwater$[rbp]
  00126	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv142[rbp]
  0012d	4c 8b c1	 mov	 r8, rcx
  00130	48 8b d0	 mov	 rdx, rax
  00133	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0013a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
  00140	90		 npad	 1

; 391  :         return _Traits::to_int_type(*_Mysb::gptr());

  00141	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00148	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0014e	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00151	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
$LN1@underflow:

; 392  :     }

  00156	48 8b f8	 mov	 rdi, rax
  00159	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0015d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ$rtcFrameData
  00164	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00169	48 8b c7	 mov	 rax, rdi
  0016c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00173	48 33 cd	 xor	 rcx, rbp
  00176	e8 00 00 00 00	 call	 __security_check_cookie
  0017b	48 8d a5 38 01
	00 00		 lea	 rsp, QWORD PTR [rbp+312]
  00182	5f		 pop	 rdi
  00183	5d		 pop	 rbp
  00184	c3		 ret	 0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\sstream
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
_TEXT	SEGMENT
_Gptr$ = 8
tv141 = 212
tv85 = 216
this$ = 256
_Meta$ = 264
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT

; 351  :     int_type pbackfail(int_type _Meta = _Traits::eof()) override { // put an element back to stream

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D35CD36D_sstream
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00023	90		 npad	 1

; 352  :         const auto _Gptr = _Mysb::gptr();

  00024	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00031	48 89 45 08	 mov	 QWORD PTR _Gptr$[rbp], rax

; 353  :         if (!_Gptr || _Gptr <= _Mysb::eback()
; 354  :             || (!_Traits::eq_int_type(_Traits::eof(), _Meta) && !_Traits::eq(_Traits::to_char_type(_Meta), _Gptr[-1])

  00035	48 83 7d 08 00	 cmp	 QWORD PTR _Gptr$[rbp], 0
  0003a	74 76		 je	 SHORT $LN3@pbackfail
  0003c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00049	48 39 45 08	 cmp	 QWORD PTR _Gptr$[rbp], rax
  0004d	76 63		 jbe	 SHORT $LN3@pbackfail
  0004f	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00054	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR _Meta$[rbp]
  0005a	8b c8		 mov	 ecx, eax
  0005c	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00061	0f b6 c0	 movzx	 eax, al
  00064	85 c0		 test	 eax, eax
  00066	75 51		 jne	 SHORT $LN2@pbackfail
  00068	b8 01 00 00 00	 mov	 eax, 1
  0006d	48 6b c0 ff	 imul	 rax, rax, -1
  00071	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  00078	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR _Meta$[rbp]
  0007e	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  00083	48 8b 4d 08	 mov	 rcx, QWORD PTR _Gptr$[rbp]
  00087	48 8b 95 d8 00
	00 00		 mov	 rdx, QWORD PTR tv85[rbp]
  0008e	0f b6 14 11	 movzx	 edx, BYTE PTR [rcx+rdx]
  00092	0f b6 c8	 movzx	 ecx, al
  00095	e8 00 00 00 00	 call	 ?eq@?$_Narrow_char_traits@DH@std@@SA_NDD@Z ; std::_Narrow_char_traits<char,int>::eq
  0009a	0f b6 c0	 movzx	 eax, al
  0009d	85 c0		 test	 eax, eax
  0009f	75 18		 jne	 SHORT $LN2@pbackfail
  000a1	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000ab	83 e0 02	 and	 eax, 2
  000ae	85 c0		 test	 eax, eax
  000b0	74 07		 je	 SHORT $LN2@pbackfail
$LN3@pbackfail:

; 355  :                 && (_Mystate & _Constant))) { // can't put back, fail
; 356  :             return _Traits::eof();

  000b2	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  000b7	eb 5e		 jmp	 SHORT $LN1@pbackfail
$LN2@pbackfail:

; 357  :         }
; 358  : 
; 359  :         // back up one position and store put-back character
; 360  :         _Mysb::gbump(-1);

  000b9	ba ff ff ff ff	 mov	 edx, -1
  000be	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z
  000cb	90		 npad	 1

; 361  :         if (!_Traits::eq_int_type(_Traits::eof(), _Meta)) {

  000cc	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  000d1	8b 95 08 01 00
	00		 mov	 edx, DWORD PTR _Meta$[rbp]
  000d7	8b c8		 mov	 ecx, eax
  000d9	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  000de	0f b6 c0	 movzx	 eax, al
  000e1	85 c0		 test	 eax, eax
  000e3	75 27		 jne	 SHORT $LN4@pbackfail

; 362  :             *_Mysb::gptr() = _Traits::to_char_type(_Meta);

  000e5	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR _Meta$[rbp]
  000eb	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  000f0	88 85 d4 00 00
	00		 mov	 BYTE PTR tv141[rbp], al
  000f6	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00103	0f b6 8d d4 00
	00 00		 movzx	 ecx, BYTE PTR tv141[rbp]
  0010a	88 08		 mov	 BYTE PTR [rax], cl
$LN4@pbackfail:

; 363  :         }
; 364  : 
; 365  :         return _Traits::not_eof(_Meta);

  0010c	8b 8d 08 01 00
	00		 mov	 ecx, DWORD PTR _Meta$[rbp]
  00112	e8 00 00 00 00	 call	 ?not_eof@?$_Narrow_char_traits@DH@std@@SAHH@Z ; std::_Narrow_char_traits<char,int>::not_eof
$LN1@pbackfail:

; 366  :     }

  00117	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0011e	5f		 pop	 rdi
  0011f	5d		 pop	 rbp
  00120	c3		 ret	 0
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\sstream
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
_TEXT	SEGMENT
_Pptr$ = 8
_Epptr$ = 40
_Oldsize$ = 72
_Oldptr$ = 104
_Newsize$ = 136
_Newptr$ = 168
_New_pnext$ = 200
tv208 = 404
tv209 = 404
__$ArrayPad$ = 408
this$ = 448
_Meta$ = 456
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT

; 294  :     int_type overflow(int_type _Meta = _Traits::eof()) override { // put an element to stream

$LN16:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001c	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+488]
  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00037	48 33 c5	 xor	 rax, rbp
  0003a	48 89 85 98 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D35CD36D_sstream
  00048	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004d	90		 npad	 1

; 295  :         if (_Mystate & _Constant) {

  0004e	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00055	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00058	83 e0 02	 and	 eax, 2
  0005b	85 c0		 test	 eax, eax
  0005d	74 0a		 je	 SHORT $LN2@overflow

; 296  :             return _Traits::eof(); // array nonmutable, fail

  0005f	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00064	e9 ac 02 00 00	 jmp	 $LN1@overflow
$LN2@overflow:

; 297  :         }
; 298  : 
; 299  :         if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {

  00069	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0006e	8b 95 c8 01 00
	00		 mov	 edx, DWORD PTR _Meta$[rbp]
  00074	8b c8		 mov	 ecx, eax
  00076	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0007b	0f b6 c0	 movzx	 eax, al
  0007e	85 c0		 test	 eax, eax
  00080	74 10		 je	 SHORT $LN3@overflow

; 300  :             return _Traits::not_eof(_Meta); // EOF, return success code

  00082	8b 8d c8 01 00
	00		 mov	 ecx, DWORD PTR _Meta$[rbp]
  00088	e8 00 00 00 00	 call	 ?not_eof@?$_Narrow_char_traits@DH@std@@SAHH@Z ; std::_Narrow_char_traits<char,int>::not_eof
  0008d	e9 83 02 00 00	 jmp	 $LN1@overflow
$LN3@overflow:

; 301  :         }
; 302  : 
; 303  :         const auto _Pptr  = _Mysb::pptr();

  00092	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0009f	48 89 45 08	 mov	 QWORD PTR _Pptr$[rbp], rax

; 304  :         const auto _Epptr = _Mysb::epptr();

  000a3	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000b0	48 89 45 28	 mov	 QWORD PTR _Epptr$[rbp], rax

; 305  :         if (_Pptr && _Pptr < _Epptr) { // room in buffer, store it

  000b4	48 83 7d 08 00	 cmp	 QWORD PTR _Pptr$[rbp], 0
  000b9	74 4e		 je	 SHORT $LN4@overflow
  000bb	48 8b 45 28	 mov	 rax, QWORD PTR _Epptr$[rbp]
  000bf	48 39 45 08	 cmp	 QWORD PTR _Pptr$[rbp], rax
  000c3	73 44		 jae	 SHORT $LN4@overflow

; 306  :             *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  000c5	8b 8d c8 01 00
	00		 mov	 ecx, DWORD PTR _Meta$[rbp]
  000cb	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  000d0	88 85 94 01 00
	00		 mov	 BYTE PTR tv209[rbp], al
  000d6	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
  000e3	0f b6 8d 94 01
	00 00		 movzx	 ecx, BYTE PTR tv209[rbp]
  000ea	88 08		 mov	 BYTE PTR [rax], cl

; 307  :             _Seekhigh        = _Pptr + 1;

  000ec	48 8b 45 08	 mov	 rax, QWORD PTR _Pptr$[rbp]
  000f0	48 ff c0	 inc	 rax
  000f3	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fa	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 308  :             return _Meta;

  000fe	8b 85 c8 01 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
  00104	e9 0c 02 00 00	 jmp	 $LN1@overflow
$LN4@overflow:

; 309  :         }
; 310  : 
; 311  :         // grow buffer and store element
; 312  :         _Mysize_type _Oldsize = 0;

  00109	48 c7 45 48 00
	00 00 00	 mov	 QWORD PTR _Oldsize$[rbp], 0

; 313  :         const auto _Oldptr    = _Mysb::eback();

  00111	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0011e	48 89 45 68	 mov	 QWORD PTR _Oldptr$[rbp], rax

; 314  :         if (_Pptr) {

  00122	48 83 7d 08 00	 cmp	 QWORD PTR _Pptr$[rbp], 0
  00127	74 12		 je	 SHORT $LN5@overflow

; 315  :             _Oldsize = static_cast<_Mysize_type>(_Epptr - _Oldptr);

  00129	48 8b 45 68	 mov	 rax, QWORD PTR _Oldptr$[rbp]
  0012d	48 8b 4d 28	 mov	 rcx, QWORD PTR _Epptr$[rbp]
  00131	48 2b c8	 sub	 rcx, rax
  00134	48 8b c1	 mov	 rax, rcx
  00137	48 89 45 48	 mov	 QWORD PTR _Oldsize$[rbp], rax
$LN5@overflow:

; 316  :         }
; 317  : 
; 318  :         _Mysize_type _Newsize;
; 319  :         if (_Oldsize < _MINSIZE) {

  0013b	48 83 7d 48 20	 cmp	 QWORD PTR _Oldsize$[rbp], 32 ; 00000020H
  00140	73 0d		 jae	 SHORT $LN6@overflow

; 320  :             _Newsize = _MINSIZE;

  00142	48 c7 85 88 00
	00 00 20 00 00
	00		 mov	 QWORD PTR _Newsize$[rbp], 32 ; 00000020H
  0014d	eb 3b		 jmp	 SHORT $LN7@overflow
$LN6@overflow:

; 321  :         } else if (_Oldsize < INT_MAX / 2) { // grow by 50 percent

  0014f	48 81 7d 48 ff
	ff ff 3f	 cmp	 QWORD PTR _Oldsize$[rbp], 1073741823 ; 3fffffffH
  00157	73 10		 jae	 SHORT $LN8@overflow

; 322  :             _Newsize = _Oldsize << 1;

  00159	48 8b 45 48	 mov	 rax, QWORD PTR _Oldsize$[rbp]
  0015d	48 d1 e0	 shl	 rax, 1
  00160	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Newsize$[rbp], rax
  00167	eb 21		 jmp	 SHORT $LN9@overflow
$LN8@overflow:

; 323  :         } else if (_Oldsize < INT_MAX) {

  00169	48 81 7d 48 ff
	ff ff 7f	 cmp	 QWORD PTR _Oldsize$[rbp], 2147483647 ; 7fffffffH
  00171	73 0d		 jae	 SHORT $LN10@overflow

; 324  :             _Newsize = INT_MAX;

  00173	48 c7 85 88 00
	00 00 ff ff ff
	7f		 mov	 QWORD PTR _Newsize$[rbp], 2147483647 ; 7fffffffH

; 325  :         } else { // buffer can't grow, fail

  0017e	eb 0a		 jmp	 SHORT $LN11@overflow
$LN10@overflow:

; 326  :             return _Traits::eof();

  00180	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00185	e9 8b 01 00 00	 jmp	 $LN1@overflow
$LN11@overflow:
$LN9@overflow:
$LN7@overflow:

; 327  :         }
; 328  : 
; 329  :         const auto _Newptr = _Unfancy(_Allocate_at_least_helper(_Al, _Newsize));

  0018a	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00191	48 83 c0 74	 add	 rax, 116		; 00000074H
  00195	48 8d 95 88 00
	00 00		 lea	 rdx, QWORD PTR _Newsize$[rbp]
  0019c	48 8b c8	 mov	 rcx, rax
  0019f	e8 00 00 00 00	 call	 ??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z ; std::_Allocate_at_least_helper<std::allocator<char> >
  001a4	48 8b c8	 mov	 rcx, rax
  001a7	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  001ac	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _Newptr$[rbp], rax

; 330  :         _Traits::copy(_Newptr, _Oldptr, _Oldsize);

  001b3	4c 8b 45 48	 mov	 r8, QWORD PTR _Oldsize$[rbp]
  001b7	48 8b 55 68	 mov	 rdx, QWORD PTR _Oldptr$[rbp]
  001bb	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Newptr$[rbp]
  001c2	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy
  001c7	90		 npad	 1

; 331  : 
; 332  :         const auto _New_pnext = _Newptr + _Oldsize;

  001c8	48 8b 45 48	 mov	 rax, QWORD PTR _Oldsize$[rbp]
  001cc	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Newptr$[rbp]
  001d3	48 03 c8	 add	 rcx, rax
  001d6	48 8b c1	 mov	 rax, rcx
  001d9	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _New_pnext$[rbp], rax

; 333  :         _Seekhigh             = _New_pnext + 1; // to include _Meta

  001e0	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR _New_pnext$[rbp]
  001e7	48 ff c0	 inc	 rax
  001ea	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001f1	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 334  : 
; 335  :         _Mysb::setp(_Newptr, _New_pnext, _Newptr + _Newsize);

  001f5	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _Newsize$[rbp]
  001fc	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Newptr$[rbp]
  00203	48 03 c8	 add	 rcx, rax
  00206	48 8b c1	 mov	 rax, rcx
  00209	4c 8b c8	 mov	 r9, rax
  0020c	4c 8b 85 c8 00
	00 00		 mov	 r8, QWORD PTR _New_pnext$[rbp]
  00213	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR _Newptr$[rbp]
  0021a	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00221	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
  00227	90		 npad	 1

; 336  :         if (_Mystate & _Noread) { // maintain eback() == allocated pointer invariant

  00228	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0022f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00232	83 e0 04	 and	 eax, 4
  00235	85 c0		 test	 eax, eax
  00237	74 25		 je	 SHORT $LN12@overflow

; 337  :             _Mysb::setg(_Newptr, _Newptr, _Newptr);

  00239	4c 8b 8d a8 00
	00 00		 mov	 r9, QWORD PTR _Newptr$[rbp]
  00240	4c 8b 85 a8 00
	00 00		 mov	 r8, QWORD PTR _Newptr$[rbp]
  00247	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR _Newptr$[rbp]
  0024e	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00255	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
  0025b	90		 npad	 1

; 338  :         } else { // if readable, set the get area to initialized region

  0025c	eb 41		 jmp	 SHORT $LN13@overflow
$LN12@overflow:

; 339  :             _Mysb::setg(_Newptr, _Newptr + (_Mysb::gptr() - _Oldptr), _Seekhigh);

  0025e	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0026b	48 2b 45 68	 sub	 rax, QWORD PTR _Oldptr$[rbp]
  0026f	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Newptr$[rbp]
  00276	48 03 c8	 add	 rcx, rax
  00279	48 8b c1	 mov	 rax, rcx
  0027c	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00283	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  00287	4c 8b c0	 mov	 r8, rax
  0028a	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR _Newptr$[rbp]
  00291	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
  0029e	90		 npad	 1
$LN13@overflow:

; 340  :         }
; 341  : 
; 342  :         if (_Mystate & _Allocated) {

  0029f	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002a6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002a9	83 e0 01	 and	 eax, 1
  002ac	85 c0		 test	 eax, eax
  002ae	74 21		 je	 SHORT $LN14@overflow

; 343  :             _Al.deallocate(_Ptr_traits::pointer_to(*_Oldptr), _Oldsize);

  002b0	48 8b 4d 68	 mov	 rcx, QWORD PTR _Oldptr$[rbp]
  002b4	e8 00 00 00 00	 call	 ?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z ; std::pointer_traits<char *>::pointer_to
  002b9	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002c0	48 83 c1 74	 add	 rcx, 116		; 00000074H
  002c4	4c 8b 45 48	 mov	 r8, QWORD PTR _Oldsize$[rbp]
  002c8	48 8b d0	 mov	 rdx, rax
  002cb	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
  002d0	90		 npad	 1
$LN14@overflow:

; 344  :         }
; 345  : 
; 346  :         _Mystate |= _Allocated;

  002d1	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002d8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002db	83 c8 01	 or	 eax, 1
  002de	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002e5	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 347  :         *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  002e8	8b 8d c8 01 00
	00		 mov	 ecx, DWORD PTR _Meta$[rbp]
  002ee	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  002f3	88 85 94 01 00
	00		 mov	 BYTE PTR tv208[rbp], al
  002f9	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00300	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
  00306	0f b6 8d 94 01
	00 00		 movzx	 ecx, BYTE PTR tv208[rbp]
  0030d	88 08		 mov	 BYTE PTR [rax], cl

; 348  :         return _Meta;

  0030f	8b 85 c8 01 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
$LN1@overflow:

; 349  :     }

  00315	48 8b f8	 mov	 rdi, rax
  00318	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0031c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z$rtcFrameData
  00323	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00328	48 8b c7	 mov	 rax, rdi
  0032b	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00332	48 33 cd	 xor	 rcx, rbp
  00335	e8 00 00 00 00	 call	 __security_check_cookie
  0033a	48 8d a5 a8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+424]
  00341	5f		 pop	 rdi
  00342	5d		 pop	 rbp
  00343	c3		 ret	 0
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\sstream
;	COMDAT ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
_View$ = 72
$T5 = 308
tv65 = 328
__$ArrayPad$ = 336
this$ = 384
__$ReturnUdt$ = 392
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT

; 218  :     {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001d	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00038	48 33 c5	 xor	 rax, rbp
  0003b	48 89 85 50 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00042	c7 85 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR $T5[rbp], 0
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D35CD36D_sstream
  00053	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00058	90		 npad	 1

; 219  :         _Mystr _Result(_Al);

  00059	48 8b 85 80 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 83 c0 74	 add	 rax, 116		; 00000074H
  00064	48 8b d0	 mov	 rdx, rax
  00067	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  0006e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00073	48 89 85 48 01
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  0007a	8b 85 34 01 00
	00		 mov	 eax, DWORD PTR $T5[rbp]
  00080	83 c8 01	 or	 eax, 1
  00083	89 85 34 01 00
	00		 mov	 DWORD PTR $T5[rbp], eax

; 220  :         const auto _View = _Get_buffer_view();

  00089	48 8d 55 48	 lea	 rdx, QWORD PTR _View$[rbp]
  0008d	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00094	e8 00 00 00 00	 call	 ?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Get_buffer_view
  00099	90		 npad	 1

; 221  :         if (_View._Ptr) {

  0009a	48 83 7d 48 00	 cmp	 QWORD PTR _View$[rbp], 0
  0009f	74 15		 je	 SHORT $LN2@str

; 222  :             _Result.assign(_View._Ptr, _View._Size);

  000a1	4c 8b 45 50	 mov	 r8, QWORD PTR _View$[rbp+8]
  000a5	48 8b 55 48	 mov	 rdx, QWORD PTR _View$[rbp]
  000a9	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  000b0	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000b5	90		 npad	 1
$LN2@str:

; 223  :         }
; 224  :         return _Result;

  000b6	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 225  :     }

  000bd	48 8b f8	 mov	 rdi, rax
  000c0	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcFrameData
  000cb	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000d0	48 8b c7	 mov	 rax, rdi
  000d3	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000da	48 33 cd	 xor	 rcx, rbp
  000dd	e8 00 00 00 00	 call	 __security_check_cookie
  000e2	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  000e9	5f		 pop	 rdi
  000ea	5d		 pop	 rbp
  000eb	c3		 ret	 0
  000ec	cc		 int	 3
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_View$ = 72
$T5 = 308
tv65 = 328
__$ArrayPad$ = 336
this$ = 384
__$ReturnUdt$ = 392
?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA PROC ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	8b 85 34 01 00
	00		 mov	 eax, DWORD PTR $T5[rbp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	85 c0		 test	 eax, eax
  0001f	74 13		 je	 SHORT $LN5@dtor$0
  00021	83 a5 34 01 00
	00 fe		 and	 DWORD PTR $T5[rbp], -2
  00028	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  0002f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@dtor$0:
  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	5f		 pop	 rdi
  00039	5d		 pop	 rbp
  0003a	c3		 ret	 0
?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA ENDP ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\sstream
;	COMDAT ?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ
_TEXT	SEGMENT
_Base$5 = 56
_Base$6 = 88
$T7 = 344
this$ = 400
__$ReturnUdt$ = 408
?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Get_buffer_view, COMDAT

; 195  :     _NODISCARD _Buffer_view _Get_buffer_view() const noexcept {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001d	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+440]
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D35CD36D_sstream
  00038	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0003d	90		 npad	 1

; 196  :         _Buffer_view _Result{};

  0003e	48 8b bd 98 01
	00 00		 mov	 rdi, QWORD PTR __$ReturnUdt$[rbp]
  00045	33 c0		 xor	 eax, eax
  00047	b9 18 00 00 00	 mov	 ecx, 24
  0004c	f3 aa		 rep stosb

; 197  :         if ((!(_Mystate & _Constant) || (_Mystate & _From_rvalue)) && _Mysb::pptr()) {

  0004e	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00055	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00058	83 e0 02	 and	 eax, 2
  0005b	85 c0		 test	 eax, eax
  0005d	74 15		 je	 SHORT $LN4@Get_buffer
  0005f	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00066	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00069	83 e0 20	 and	 eax, 32			; 00000020H
  0006c	85 c0		 test	 eax, eax
  0006e	0f 84 96 00 00
	00		 je	 $LN2@Get_buffer
$LN4@Get_buffer:
  00074	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00081	48 85 c0	 test	 rax, rax
  00084	0f 84 80 00 00
	00		 je	 $LN2@Get_buffer

; 198  :             // writable, make string view from write buffer
; 199  :             const auto _Base = _Mysb::pbase();

  0008a	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00097	48 89 45 38	 mov	 QWORD PTR _Base$5[rbp], rax

; 200  :             _Result._Ptr     = _Base;

  0009b	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  000a2	48 8b 4d 38	 mov	 rcx, QWORD PTR _Base$5[rbp]
  000a6	48 89 08	 mov	 QWORD PTR [rax], rcx

; 201  :             _Result._Size    = static_cast<_Mysize_type>((_STD max)(_Mysb::pptr(), _Seekhigh) - _Base);

  000a9	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000b6	48 89 85 58 01
	00 00		 mov	 QWORD PTR $T7[rbp], rax
  000bd	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c4	48 83 c0 68	 add	 rax, 104		; 00000068H
  000c8	48 8b d0	 mov	 rdx, rax
  000cb	48 8d 8d 58 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  000d2	e8 00 00 00 00	 call	 ??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z ; std::max<char *>
  000d7	48 8b 4d 38	 mov	 rcx, QWORD PTR _Base$5[rbp]
  000db	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000de	48 2b c1	 sub	 rax, rcx
  000e1	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  000e8	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 202  :             _Result._Res     = static_cast<_Mysize_type>(_Mysb::epptr() - _Base);

  000ec	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000f9	48 2b 45 38	 sub	 rax, QWORD PTR _Base$5[rbp]
  000fd	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00104	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
  00108	eb 74		 jmp	 SHORT $LN3@Get_buffer
$LN2@Get_buffer:

; 203  :         } else if (!(_Mystate & _Noread) && _Mysb::gptr()) {

  0010a	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00111	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00114	83 e0 04	 and	 eax, 4
  00117	85 c0		 test	 eax, eax
  00119	75 63		 jne	 SHORT $LN3@Get_buffer
  0011b	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00122	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00128	48 85 c0	 test	 rax, rax
  0012b	74 51		 je	 SHORT $LN3@Get_buffer

; 204  :             // readable, make string view from read buffer
; 205  :             const auto _Base = _Mysb::eback();

  0012d	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0013a	48 89 45 58	 mov	 QWORD PTR _Base$6[rbp], rax

; 206  :             _Result._Ptr     = _Base;

  0013e	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00145	48 8b 4d 58	 mov	 rcx, QWORD PTR _Base$6[rbp]
  00149	48 89 08	 mov	 QWORD PTR [rax], rcx

; 207  :             _Result._Size    = static_cast<_Mysize_type>(_Mysb::egptr() - _Base);

  0014c	48 8b 8d 90 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00153	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00159	48 2b 45 58	 sub	 rax, QWORD PTR _Base$6[rbp]
  0015d	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00164	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 208  :             _Result._Res     = _Result._Size;

  00168	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  0016f	48 8b 8d 98 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00176	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0017a	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN3@Get_buffer:

; 209  :         }
; 210  :         return _Result;

  0017e	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 211  :     }

  00185	48 8b f8	 mov	 rdi, rax
  00188	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0018c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ$rtcFrameData
  00193	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00198	48 8b c7	 mov	 rax, rdi
  0019b	48 8d a5 78 01
	00 00		 lea	 rsp, QWORD PTR [rbp+376]
  001a2	5f		 pop	 rdi
  001a3	5d		 pop	 rbp
  001a4	c3		 ret	 0
?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Get_buffer_view
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\sstream
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 172  :     ~basic_stringbuf() noexcept override {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D35CD36D_sstream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1
  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0002e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 173  :         _Tidy();

  00031	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00038	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0003d	90		 npad	 1

; 174  :     }

  0003e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  0004b	90		 npad	 1
  0004c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00053	5f		 pop	 rdi
  00054	5d		 pop	 rbp
  00055	c3		 ret	 0
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\sstream
;	COMDAT ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 224
_Mode$ = 232
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 36   :     explicit basic_stringbuf(ios_base::openmode _Mode) : _Seekhigh(nullptr), _Mystate(_Getstate(_Mode)), _Al() {}

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D35CD36D_sstream
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00023	90		 npad	 1
  00024	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ
  00031	90		 npad	 1
  00032	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00040	48 89 08	 mov	 QWORD PTR [rax], rcx
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  00052	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR _Mode$[rbp]
  00058	e8 00 00 00 00	 call	 ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
  0005d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00064	89 41 70	 mov	 DWORD PTR [rcx+112], eax
  00067	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006e	48 83 c0 74	 add	 rax, 116		; 00000074H
  00072	48 8b c8	 mov	 rcx, rax
  00075	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@XZ ; std::allocator<char>::allocator<char>
  0007a	90		 npad	 1
  0007b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00082	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00089	5f		 pop	 rdi
  0008a	5d		 pop	 rbp
  0008b	c3		 ret	 0
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\sstream
;	COMDAT ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = 196
this$ = 256
__$ReturnUdt$ = 264
?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT

; 808  :     {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D35CD36D_sstream
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002e	90		 npad	 1

; 809  :         return _Stringbuffer.str();

  0002f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 83 c0 08	 add	 rax, 8
  0003a	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR __$ReturnUdt$[rbp]
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
  00049	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0004f	83 c8 01	 or	 eax, 1
  00052	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  00058	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 810  :     }

  0005f	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00066	5f		 pop	 rdi
  00067	5d		 pop	 rbp
  00068	c3		 ret	 0
?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\sstream
;	COMDAT ??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 797  :     ~basic_ostringstream() noexcept override {}

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D35CD36D_sstream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1
  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b 80 78 ff
	ff ff		 mov	 rax, QWORD PTR [rax-136]
  0002e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00032	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00040	48 89 94 01 78
	ff ff ff	 mov	 QWORD PTR [rcx+rax-136], rdx
  00048	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004f	48 8b 80 78 ff
	ff ff		 mov	 rax, QWORD PTR [rax-136]
  00056	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0005a	48 2d 88 00 00
	00		 sub	 rax, 136		; 00000088H
  00060	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00067	48 8b 89 78 ff
	ff ff		 mov	 rcx, QWORD PTR [rcx-136]
  0006e	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  00072	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00079	89 84 0a 74 ff
	ff ff		 mov	 DWORD PTR [rdx+rcx-140], eax
  00080	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00087	48 2d 80 00 00
	00		 sub	 rax, 128		; 00000080H
  0008d	48 8b c8	 mov	 rcx, rax
  00090	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  00095	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009c	48 83 e8 78	 sub	 rax, 120		; 00000078H
  000a0	48 8b c8	 mov	 rcx, rax
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  000a9	90		 npad	 1
  000aa	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b1	5f		 pop	 rdi
  000b2	5d		 pop	 rbp
  000b3	c3		 ret	 0
??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\sstream
;	COMDAT ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 196
this$ = 256
$initVBases$ = 264
??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 744  :     basic_ostringstream() : _Mybase(_STD addressof(_Stringbuffer)), _Stringbuffer(ios_base::out) {}

$LN8:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D35CD36D_sstream
  00028	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002d	90		 npad	 1
  0002e	83 bd 08 01 00
	00 00		 cmp	 DWORD PTR $initVBases$[rbp], 0
  00035	74 37		 je	 SHORT $LN2@basic_ostr
  00037	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
  00045	48 89 08	 mov	 QWORD PTR [rax], rcx
  00048	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004f	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00055	48 8b c8	 mov	 rcx, rax
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ
  0005e	90		 npad	 1
  0005f	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  00065	83 c8 01	 or	 eax, 1
  00068	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
$LN2@basic_ostr:
  0006e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00075	48 83 c0 08	 add	 rax, 8
  00079	48 8b c8	 mov	 rcx, rax
  0007c	e8 00 00 00 00	 call	 ??$addressof@V?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::addressof<std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > >
  00081	45 33 c9	 xor	 r9d, r9d
  00084	45 33 c0	 xor	 r8d, r8d
  00087	48 8b d0	 mov	 rdx, rax
  0008a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00097	90		 npad	 1
  00098	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a2	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000a6	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  000b4	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
  000b8	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c2	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000c6	48 2d 88 00 00
	00		 sub	 rax, 136		; 00000088H
  000cc	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d6	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  000da	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  000e1	89 44 0a fc	 mov	 DWORD PTR [rdx+rcx-4], eax
  000e5	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ec	48 83 c0 08	 add	 rax, 8
  000f0	ba 02 00 00 00	 mov	 edx, 2
  000f5	48 8b c8	 mov	 rcx, rax
  000f8	e8 00 00 00 00	 call	 ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  000fd	90		 npad	 1
  000fe	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00105	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0010c	5f		 pop	 rdi
  0010d	5d		 pop	 rbp
  0010e	c3		 ret	 0
??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
this$ = 256
$initVBases$ = 264
?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA PROC ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	85 c0		 test	 eax, eax
  0001f	74 1b		 je	 SHORT $LN5@dtor$0
  00021	83 a5 c4 00 00
	00 fe		 and	 DWORD PTR $T1[rbp], -2
  00028	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002f	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
$LN5@dtor$0:
  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA ENDP ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
this$ = 256
$initVBases$ = 264
?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA PROC ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 10	 add	 rcx, 16
  0001f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA ENDP ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\C2simd\Ch02_01\Ch02_01.h
;	COMDAT ?ToStringU16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T1 = 196
this$ = 256
__$ReturnUdt$ = 264
?ToStringU16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; XmmVal::ToStringU16, COMDAT

; 135  :     {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0A91C1A1_Ch02_01@h
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002e	90		 npad	 1

; 136  :         return ToStringUint(m_U16, sizeof(m_U16) / sizeof(uint16_t), 8);

  0002f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	c7 44 24 20 08
	00 00 00	 mov	 DWORD PTR [rsp+32], 8
  0003e	41 b9 08 00 00
	00		 mov	 r9d, 8
  00044	4c 8b c0	 mov	 r8, rax
  00047	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR __$ReturnUdt$[rbp]
  0004e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ??$ToStringUint@G@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBGHH@Z ; XmmVal::ToStringUint<unsigned short>
  0005a	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  00060	83 c8 01	 or	 eax, 1
  00063	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  00069	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 137  :     }

  00070	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00077	5f		 pop	 rdi
  00078	5d		 pop	 rbp
  00079	c3		 ret	 0
?ToStringU16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; XmmVal::ToStringU16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\C2simd\Ch02_01\Ch02_01.h
;	COMDAT ?ToStringI16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T1 = 196
this$ = 256
__$ReturnUdt$ = 264
?ToStringI16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; XmmVal::ToStringI16, COMDAT

; 111  :     {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0A91C1A1_Ch02_01@h
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002e	90		 npad	 1

; 112  :         return ToStringInt(m_I16, sizeof(m_I16) / sizeof(int16_t), 8);

  0002f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	c7 44 24 20 08
	00 00 00	 mov	 DWORD PTR [rsp+32], 8
  0003e	41 b9 08 00 00
	00		 mov	 r9d, 8
  00044	4c 8b c0	 mov	 r8, rax
  00047	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR __$ReturnUdt$[rbp]
  0004e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ??$ToStringInt@F@XmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHH@Z ; XmmVal::ToStringInt<short>
  0005a	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  00060	83 c8 01	 or	 eax, 1
  00063	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  00069	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 113  :     }

  00070	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00077	5f		 pop	 rdi
  00078	5d		 pop	 rbp
  00079	c3		 ret	 0
?ToStringI16@XmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; XmmVal::ToStringI16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = 200
tv85 = 264
tv93 = 264
this$ = 304
__formal$ = 312
_Lobj$ = 320
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT

; 238  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__10D309B8_xloctime
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002a	90		 npad	 1

; 239  :         _Cvt = _Lobj._Getcvt();

  0002b	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00032	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ
  0003f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00046	48 8d 79 2c	 lea	 rdi, QWORD PTR [rcx+44]
  0004a	48 8b f0	 mov	 rsi, rax
  0004d	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00052	f3 a4		 rep movsb

; 240  : 
; 241  :         if (is_same_v<_Elem2, wchar_t>) {

  00054	33 c0		 xor	 eax, eax
  00056	83 f8 01	 cmp	 eax, 1
  00059	74 5c		 je	 SHORT $LN2@Getvals

; 242  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  0005b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ
  00068	48 8b c8	 mov	 rcx, rax
  0006b	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  00070	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00077	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 243  :             _Months =

  0007b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ
  00088	48 8b c8	 mov	 rcx, rax
  0008b	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  00090	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00097	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 244  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 245  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  000a2	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  000a7	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ae	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 246  :         } else {

  000b2	e9 a3 00 00 00	 jmp	 $LN3@Getvals
$LN2@Getvals:

; 247  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000b7	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000be	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  000c2	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  000c9	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getdays@_Locinfo@std@@QEBAPEBDXZ
  000d6	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv85[rbp]
  000dd	4c 8b c1	 mov	 r8, rcx
  000e0	33 d2		 xor	 edx, edx
  000e2	48 8b c8	 mov	 rcx, rax
  000e5	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000ea	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 248  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000f5	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fc	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  00100	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  00107	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  0010e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getmonths@_Locinfo@std@@QEBAPEBDXZ
  00114	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  0011b	4c 8b c1	 mov	 r8, rcx
  0011e	33 d2		 xor	 edx, edx
  00120	48 8b c8	 mov	 rcx, rax
  00123	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00128	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012f	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 249  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  00133	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0013a	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  0013e	4c 8b c0	 mov	 r8, rax
  00141	33 d2		 xor	 edx, edx
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  0014a	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  0014f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00156	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN3@Getvals:

; 250  :         }
; 251  :     }

  0015a	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  00161	5f		 pop	 rdi
  00162	5e		 pop	 rsi
  00163	5d		 pop	 rbp
  00164	c3		 ret	 0
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = 200
tv85 = 264
tv93 = 264
this$ = 304
__formal$ = 312
_Lobj$ = 320
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT

; 238  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__10D309B8_xloctime
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002a	90		 npad	 1

; 239  :         _Cvt = _Lobj._Getcvt();

  0002b	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00032	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ
  0003f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00046	48 8d 79 2c	 lea	 rdi, QWORD PTR [rcx+44]
  0004a	48 8b f0	 mov	 rsi, rax
  0004d	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00052	f3 a4		 rep movsb

; 240  : 
; 241  :         if (is_same_v<_Elem2, wchar_t>) {

  00054	33 c0		 xor	 eax, eax
  00056	83 f8 01	 cmp	 eax, 1
  00059	74 5c		 je	 SHORT $LN2@Getvals

; 242  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  0005b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ
  00068	48 8b c8	 mov	 rcx, rax
  0006b	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  00070	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00077	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 243  :             _Months =

  0007b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ
  00088	48 8b c8	 mov	 rcx, rax
  0008b	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  00090	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00097	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 244  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 245  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  000a2	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  000a7	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ae	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 246  :         } else {

  000b2	e9 a3 00 00 00	 jmp	 $LN3@Getvals
$LN2@Getvals:

; 247  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000b7	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000be	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  000c2	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  000c9	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getdays@_Locinfo@std@@QEBAPEBDXZ
  000d6	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv85[rbp]
  000dd	4c 8b c1	 mov	 r8, rcx
  000e0	33 d2		 xor	 edx, edx
  000e2	48 8b c8	 mov	 rcx, rax
  000e5	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000ea	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 248  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000f5	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fc	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  00100	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  00107	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  0010e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getmonths@_Locinfo@std@@QEBAPEBDXZ
  00114	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  0011b	4c 8b c1	 mov	 r8, rcx
  0011e	33 d2		 xor	 edx, edx
  00120	48 8b c8	 mov	 rcx, rax
  00123	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00128	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012f	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 249  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  00133	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0013a	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  0013e	4c 8b c0	 mov	 r8, rax
  00141	33 d2		 xor	 edx, edx
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  0014a	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  0014f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00156	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN3@Getvals:

; 250  :         }
; 251  :     }

  0015a	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  00161	5f		 pop	 rdi
  00162	5e		 pop	 rsi
  00163	5d		 pop	 rbp
  00164	c3		 ret	 0
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\utility
;	COMDAT ??$_Max_limit@_J@std@@YA_JXZ
_TEXT	SEGMENT
_Unsigned_max$1 = 8
??$_Max_limit@_J@std@@YA_JXZ PROC			; std::_Max_limit<__int64>, COMDAT

; 849  : _NODISCARD constexpr _Ty _Max_limit() noexcept { // same as (numeric_limits<_Ty>::max)(), less throughput cost

$LN4:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A14A6E7D_utility
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	90		 npad	 1

; 850  :     _STL_INTERNAL_STATIC_ASSERT(is_integral_v<_Ty>); // doesn't attempt to handle all types
; 851  :     if constexpr (is_signed_v<_Ty>) {
; 852  :         constexpr auto _Unsigned_max = static_cast<make_unsigned_t<_Ty>>(-1);

  0001c	48 c7 45 08 ff
	ff ff ff	 mov	 QWORD PTR _Unsigned_max$1[rbp], -1

; 853  :         return static_cast<_Ty>(_Unsigned_max >> 1);

  00024	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 854  :     } else {
; 855  :         return static_cast<_Ty>(-1);
; 856  :     }
; 857  : }

  0002e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
??$_Max_limit@_J@std@@YA_JXZ ENDP			; std::_Max_limit<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z
_TEXT	SEGMENT
_Count$ = 8
_Ptrdest$ = 40
_Ptrnext$1 = 72
_Ptr$ = 320
__formal$ = 328
__formal$ = 336
??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 511  : _Elem* __CRTDECL _Maklocstr(const char* _Ptr, _Elem*, const _Locinfo::_Cvtvec&) {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6032FF13_xlocale
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1

; 512  :     // convert C string to _Elem sequence using _Cvtvec
; 513  :     size_t _Count = _CSTD strlen(_Ptr) + 1;

  0002a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00031	e8 00 00 00 00	 call	 strlen
  00036	48 ff c0	 inc	 rax
  00039	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax

; 514  : 
; 515  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  0003d	c7 44 24 20 03
	02 00 00	 mov	 DWORD PTR [rsp+32], 515	; 00000203H
  00045	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0DE@LHAKIDGO@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@
  0004c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00052	ba 01 00 00 00	 mov	 edx, 1
  00057	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__calloc_dbg
  00061	48 89 45 28	 mov	 QWORD PTR _Ptrdest$[rbp], rax

; 516  : 
; 517  :     if (!_Ptrdest) {

  00065	48 83 7d 28 00	 cmp	 QWORD PTR _Ptrdest$[rbp], 0
  0006a	75 06		 jne	 SHORT $LN5@Maklocstr

; 518  :         _Xbad_alloc();

  0006c	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00071	90		 npad	 1
$LN5@Maklocstr:

; 519  :     }
; 520  : 
; 521  :     for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {

  00072	48 8b 45 28	 mov	 rax, QWORD PTR _Ptrdest$[rbp]
  00076	48 89 45 48	 mov	 QWORD PTR _Ptrnext$1[rbp], rax
  0007a	eb 27		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0007c	48 8b 45 08	 mov	 rax, QWORD PTR _Count$[rbp]
  00080	48 ff c8	 dec	 rax
  00083	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  00087	48 8b 45 48	 mov	 rax, QWORD PTR _Ptrnext$1[rbp]
  0008b	48 ff c0	 inc	 rax
  0008e	48 89 45 48	 mov	 QWORD PTR _Ptrnext$1[rbp], rax
  00092	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00099	48 ff c0	 inc	 rax
  0009c	48 89 85 40 01
	00 00		 mov	 QWORD PTR _Ptr$[rbp], rax
$LN4@Maklocstr:
  000a3	48 83 7d 08 00	 cmp	 QWORD PTR _Count$[rbp], 0
  000a8	76 12		 jbe	 SHORT $LN3@Maklocstr

; 522  :         *_Ptrnext = static_cast<_Elem>(static_cast<unsigned char>(*_Ptr));

  000aa	48 8b 45 48	 mov	 rax, QWORD PTR _Ptrnext$1[rbp]
  000ae	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000b5	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  000b8	88 08		 mov	 BYTE PTR [rax], cl

; 523  :     }

  000ba	eb c0		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 524  : 
; 525  :     return _Ptrdest;

  000bc	48 8b 45 28	 mov	 rax, QWORD PTR _Ptrdest$[rbp]
$LN6@Maklocstr:

; 526  : }

  000c0	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000c7	5f		 pop	 rdi
  000c8	5d		 pop	 rbp
  000c9	c3		 ret	 0
??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPEA_WPEB_W@Z
_TEXT	SEGMENT
_Count$ = 8
_Ptrdest$ = 40
_Ptr$ = 288
?_Maklocwcs@std@@YAPEA_WPEB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 73   : inline wchar_t* _Maklocwcs(const wchar_t* _Ptr) { // copy NTWCS to allocated storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FEB59904_xlocnum
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 74   :     const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  00020	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcslen
  0002d	48 ff c0	 inc	 rax
  00030	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax

; 75   : 
; 76   :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Count, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  00034	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA
  0003a	83 c0 03	 add	 eax, 3
  0003d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00041	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0DE@DEEHIBMP@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@
  00048	41 b8 02 00 00
	00		 mov	 r8d, 2
  0004e	ba 02 00 00 00	 mov	 edx, 2
  00053	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__calloc_dbg
  0005d	48 89 45 28	 mov	 QWORD PTR _Ptrdest$[rbp], rax

; 77   : 
; 78   :     if (!_Ptrdest) {

  00061	48 83 7d 28 00	 cmp	 QWORD PTR _Ptrdest$[rbp], 0
  00066	75 06		 jne	 SHORT $LN2@Maklocwcs

; 79   :         _Xbad_alloc();

  00068	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  0006d	90		 npad	 1
$LN2@Maklocwcs:

; 80   :     }
; 81   : 
; 82   :     _CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

  0006e	4c 8b 45 08	 mov	 r8, QWORD PTR _Count$[rbp]
  00072	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00079	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptrdest$[rbp]
  0007d	e8 00 00 00 00	 call	 wmemcpy
  00082	90		 npad	 1

; 83   :     return _Ptrdest;

  00083	48 8b 45 28	 mov	 rax, QWORD PTR _Ptrdest$[rbp]
$LN3@Maklocwcs:

; 84   : }

  00087	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0008e	5f		 pop	 rdi
  0008f	5d		 pop	 rbp
  00090	c3		 ret	 0
?_Maklocwcs@std@@YAPEA_WPEB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z
_TEXT	SEGMENT
_Count$ = 8
_Count1$ = 40
_Wchars$ = 72
_Ptr1$ = 104
_Bytes$ = 132
_Wc$ = 164
_Mbst1$ = 200
_Ptrdest$ = 232
_Ptrnext$ = 264
_Mbst2$ = 296
__$ArrayPad$ = 504
_Ptr$ = 544
__formal$ = 552
_Cvt$ = 560
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z PROC ; std::_Maklocstr<wchar_t>, COMDAT

; 529  : inline wchar_t* __CRTDECL _Maklocstr(const char* _Ptr, wchar_t*, const _Locinfo::_Cvtvec& _Cvt) {

$LN12:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00022	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR [rsp+600]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 f8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6032FF13_xlocale
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00053	90		 npad	 1

; 530  :     // convert C string to wchar_t sequence using _Cvtvec
; 531  :     size_t _Count;
; 532  :     size_t _Count1;
; 533  :     size_t _Wchars;
; 534  :     const char* _Ptr1;
; 535  :     int _Bytes;
; 536  :     wchar_t _Wc;
; 537  :     mbstate_t _Mbst1 = {};

  00054	48 8d 85 c8 00
	00 00		 lea	 rax, QWORD PTR _Mbst1$[rbp]
  0005b	48 8b f8	 mov	 rdi, rax
  0005e	33 c0		 xor	 eax, eax
  00060	b9 08 00 00 00	 mov	 ecx, 8
  00065	f3 aa		 rep stosb

; 538  : 
; 539  :     _Count1 = _CSTD strlen(_Ptr) + 1;

  00067	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  0006e	e8 00 00 00 00	 call	 strlen
  00073	48 ff c0	 inc	 rax
  00076	48 89 45 28	 mov	 QWORD PTR _Count1$[rbp], rax

; 540  :     for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count; _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars) {

  0007a	48 8b 45 28	 mov	 rax, QWORD PTR _Count1$[rbp]
  0007e	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  00082	48 c7 45 48 00
	00 00 00	 mov	 QWORD PTR _Wchars$[rbp], 0
  0008a	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00091	48 89 45 68	 mov	 QWORD PTR _Ptr1$[rbp], rax
  00095	eb 35		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  00097	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  0009e	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  000a2	48 2b c8	 sub	 rcx, rax
  000a5	48 8b c1	 mov	 rax, rcx
  000a8	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  000ac	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  000b3	48 8b 4d 68	 mov	 rcx, QWORD PTR _Ptr1$[rbp]
  000b7	48 03 c8	 add	 rcx, rax
  000ba	48 8b c1	 mov	 rax, rcx
  000bd	48 89 45 68	 mov	 QWORD PTR _Ptr1$[rbp], rax
  000c1	48 8b 45 48	 mov	 rax, QWORD PTR _Wchars$[rbp]
  000c5	48 ff c0	 inc	 rax
  000c8	48 89 45 48	 mov	 QWORD PTR _Wchars$[rbp], rax
$LN4@Maklocstr:
  000cc	48 83 7d 08 00	 cmp	 QWORD PTR _Count$[rbp], 0
  000d1	76 3a		 jbe	 SHORT $LN3@Maklocstr

; 541  :         if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) {

  000d3	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Cvt$[rbp]
  000da	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000df	4c 8d 8d c8 00
	00 00		 lea	 r9, QWORD PTR _Mbst1$[rbp]
  000e6	4c 8b 45 08	 mov	 r8, QWORD PTR _Count$[rbp]
  000ea	48 8b 55 68	 mov	 rdx, QWORD PTR _Ptr1$[rbp]
  000ee	48 8d 8d a4 00
	00 00		 lea	 rcx, QWORD PTR _Wc$[rbp]
  000f5	e8 00 00 00 00	 call	 _Mbrtowc
  000fa	89 85 84 00 00
	00		 mov	 DWORD PTR _Bytes$[rbp], eax
  00100	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR _Bytes$[rbp], 0
  00107	7f 02		 jg	 SHORT $LN8@Maklocstr

; 542  :             break;

  00109	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 543  :         }
; 544  :     }

  0010b	eb 8a		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 545  : 
; 546  :     ++_Wchars; // count terminating nul

  0010d	48 8b 45 48	 mov	 rax, QWORD PTR _Wchars$[rbp]
  00111	48 ff c0	 inc	 rax
  00114	48 89 45 48	 mov	 QWORD PTR _Wchars$[rbp], rax

; 547  : 
; 548  :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Wchars, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  00118	c7 44 24 20 24
	02 00 00	 mov	 DWORD PTR [rsp+32], 548	; 00000224H
  00120	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0DE@LHAKIDGO@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@
  00127	41 b8 02 00 00
	00		 mov	 r8d, 2
  0012d	ba 02 00 00 00	 mov	 edx, 2
  00132	48 8b 4d 48	 mov	 rcx, QWORD PTR _Wchars$[rbp]
  00136	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__calloc_dbg
  0013c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR _Ptrdest$[rbp], rax

; 549  : 
; 550  :     if (!_Ptrdest) {

  00143	48 83 bd e8 00
	00 00 00	 cmp	 QWORD PTR _Ptrdest$[rbp], 0
  0014b	75 06		 jne	 SHORT $LN9@Maklocstr

; 551  :         _Xbad_alloc();

  0014d	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00152	90		 npad	 1
$LN9@Maklocstr:

; 552  :     }
; 553  : 
; 554  :     wchar_t* _Ptrnext = _Ptrdest;

  00153	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Ptrdest$[rbp]
  0015a	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Ptrnext$[rbp], rax

; 555  :     mbstate_t _Mbst2  = {};

  00161	48 8d 85 28 01
	00 00		 lea	 rax, QWORD PTR _Mbst2$[rbp]
  00168	48 8b f8	 mov	 rdi, rax
  0016b	33 c0		 xor	 eax, eax
  0016d	b9 08 00 00 00	 mov	 ecx, 8
  00172	f3 aa		 rep stosb

; 556  : 
; 557  :     for (; 0 < _Wchars; _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext) {

  00174	eb 4d		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:
  00176	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  0017d	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  00181	48 2b c8	 sub	 rcx, rax
  00184	48 8b c1	 mov	 rax, rcx
  00187	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  0018b	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  00192	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00199	48 03 c8	 add	 rcx, rax
  0019c	48 8b c1	 mov	 rax, rcx
  0019f	48 89 85 20 02
	00 00		 mov	 QWORD PTR _Ptr$[rbp], rax
  001a6	48 8b 45 48	 mov	 rax, QWORD PTR _Wchars$[rbp]
  001aa	48 ff c8	 dec	 rax
  001ad	48 89 45 48	 mov	 QWORD PTR _Wchars$[rbp], rax
  001b1	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ptrnext$[rbp]
  001b8	48 83 c0 02	 add	 rax, 2
  001bc	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Ptrnext$[rbp], rax
$LN7@Maklocstr:
  001c3	48 83 7d 48 00	 cmp	 QWORD PTR _Wchars$[rbp], 0
  001c8	76 40		 jbe	 SHORT $LN6@Maklocstr

; 558  :         if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) {

  001ca	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Cvt$[rbp]
  001d1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d6	4c 8d 8d 28 01
	00 00		 lea	 r9, QWORD PTR _Mbst2$[rbp]
  001dd	4c 8b 45 28	 mov	 r8, QWORD PTR _Count1$[rbp]
  001e1	48 8b 95 20 02
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  001e8	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ptrnext$[rbp]
  001ef	e8 00 00 00 00	 call	 _Mbrtowc
  001f4	89 85 84 00 00
	00		 mov	 DWORD PTR _Bytes$[rbp], eax
  001fa	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR _Bytes$[rbp], 0
  00201	7f 02		 jg	 SHORT $LN10@Maklocstr

; 559  :             break;

  00203	eb 05		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 560  :         }
; 561  :     }

  00205	e9 6c ff ff ff	 jmp	 $LN5@Maklocstr
$LN6@Maklocstr:

; 562  : 
; 563  :     *_Ptrnext = L'\0';

  0020a	33 c0		 xor	 eax, eax
  0020c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ptrnext$[rbp]
  00213	66 89 01	 mov	 WORD PTR [rcx], ax

; 564  : 
; 565  :     return _Ptrdest;

  00216	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Ptrdest$[rbp]
$LN11@Maklocstr:

; 566  : }

  0021d	48 8b f8	 mov	 rdi, rax
  00220	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00224	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcFrameData
  0022b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00230	48 8b c7	 mov	 rax, rdi
  00233	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0023a	48 33 cd	 xor	 rcx, rbp
  0023d	e8 00 00 00 00	 call	 __security_check_cookie
  00242	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00249	5f		 pop	 rdi
  0024a	5d		 pop	 rbp
  0024b	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ENDP ; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
  00022	90		 npad	 1
  00023	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002a	5f		 pop	 rdi
  0002b	5d		 pop	 rbp
  0002c	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 1506 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1507 :         return *this;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 1508 :     }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 1502 :     constexpr _Ty1& _Get_first() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1503 :         return *this;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 1504 :     }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT

; 3085 :     _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 3086 :         return _Mypair._Get_first();

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b c8	 mov	 rcx, rax
  0002a	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 3087 :     }

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT

; 3081 :     _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 3082 :         return _Mypair._Get_first();

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b c8	 mov	 rcx, rax
  0002a	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 3083 :     }

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_My_data$ = 8
_Al$1 = 40
$T2 = 260
this$ = 320
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT

; 3055 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 3056 :         auto& _My_data = _Mypair._Myval2;

  00020	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 3057 :         _My_data._Orphan_all();

  0002b	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0002f	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all
  00034	90		 npad	 1

; 3058 :         if (_My_data._Large_mode_engaged()) {

  00035	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00039	e8 00 00 00 00	 call	 ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged
  0003e	0f b6 c0	 movzx	 eax, al
  00041	85 c0		 test	 eax, eax
  00043	74 3b		 je	 SHORT $LN2@Tidy_deall

; 3059 :             _ASAN_STRING_REMOVE(*this);
; 3060 :             auto& _Al = _Getal();

  00045	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004c	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00051	48 89 45 28	 mov	 QWORD PTR _Al$1[rbp], rax

; 3061 :             _Deallocate_for_capacity(_Al, _My_data._Bx._Ptr, _My_data._Myres);

  00055	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00059	4c 8b 40 20	 mov	 r8, QWORD PTR [rax+32]
  0005d	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00061	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00065	48 8b 4d 28	 mov	 rcx, QWORD PTR _Al$1[rbp]
  00069	e8 00 00 00 00	 call	 ?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Deallocate_for_capacity
  0006e	90		 npad	 1

; 3062 :             _My_data._Bx._Switch_to_buf();

  0006f	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00073	48 83 c0 08	 add	 rax, 8
  00077	48 8b c8	 mov	 rcx, rax
  0007a	e8 00 00 00 00	 call	 ?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Switch_to_buf
  0007f	90		 npad	 1
$LN2@Tidy_deall:

; 3063 :         }
; 3064 : 
; 3065 :         _My_data._Mysize = 0;

  00080	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00084	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 3066 :         _My_data._Myres  = _Small_string_capacity;

  0008c	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00090	48 c7 40 20 0f
	00 00 00	 mov	 QWORD PTR [rax+32], 15

; 3067 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3068 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00098	c6 85 04 01 00
	00 00		 mov	 BYTE PTR $T2[rbp], 0
  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	48 6b c0 00	 imul	 rax, rax, 0
  000a8	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000ac	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  000b1	48 8d 95 04 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  000b8	48 8b c8	 mov	 rcx, rax
  000bb	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
  000c0	90		 npad	 1

; 3069 :     }

  000c1	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000c8	5f		 pop	 rdi
  000c9	5d		 pop	 rbp
  000ca	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
this$ = 224
_Requested$ = 232
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 2965 :     _NODISCARD _CONSTEXPR20 size_type _Calculate_growth(const size_type _Requested) const noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 2966 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00025	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00031	4c 8b c0	 mov	 r8, rax
  00034	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003b	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  0003f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Requested$[rbp]
  00046	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth

; 2967 :     }

  0004b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
_TEXT	SEGMENT
_Masked$ = 8
$T4 = 232
__$ArrayPad$ = 248
_Requested$ = 288
_Old$ = 296
_Max$ = 304
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 2952 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 12 00 00 00	 mov	 ecx, 18
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00053	90		 npad	 1

; 2953 :         const size_type _Masked = _Requested | _Alloc_mask;

  00054	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR _Requested$[rbp]
  0005b	48 83 c8 0f	 or	 rax, 15
  0005f	48 89 45 08	 mov	 QWORD PTR _Masked$[rbp], rax

; 2954 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00063	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  0006a	48 39 45 08	 cmp	 QWORD PTR _Masked$[rbp], rax
  0006e	76 09		 jbe	 SHORT $LN2@Calculate_

; 2955 :             return _Max;

  00070	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  00077	eb 68		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 2956 :         }
; 2957 : 
; 2958 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00079	33 d2		 xor	 edx, edx
  0007b	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Old$[rbp]
  00082	b9 02 00 00 00	 mov	 ecx, 2
  00087	48 f7 f1	 div	 rcx
  0008a	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR _Max$[rbp]
  00091	48 2b c8	 sub	 rcx, rax
  00094	48 8b c1	 mov	 rax, rcx
  00097	48 39 85 28 01
	00 00		 cmp	 QWORD PTR _Old$[rbp], rax
  0009e	76 09		 jbe	 SHORT $LN3@Calculate_

; 2959 :             return _Max;

  000a0	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  000a7	eb 38		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 2960 :         }
; 2961 : 
; 2962 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a9	33 d2		 xor	 edx, edx
  000ab	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Old$[rbp]
  000b2	b9 02 00 00 00	 mov	 ecx, 2
  000b7	48 f7 f1	 div	 rcx
  000ba	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Old$[rbp]
  000c1	48 03 c8	 add	 rcx, rax
  000c4	48 8b c1	 mov	 rax, rcx
  000c7	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  000ce	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  000d5	48 8d 4d 08	 lea	 rcx, QWORD PTR _Masked$[rbp]
  000d9	e8 00 00 00 00	 call	 ??$max@_K@std@@YAAEB_KAEB_K0@Z ; std::max<unsigned __int64>
  000de	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN1@Calculate_:

; 2963 :     }

  000e1	48 8b f8	 mov	 rdi, rax
  000e4	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcFrameData
  000ef	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f4	48 8b c7	 mov	 rax, rdi
  000f7	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000fe	48 33 cd	 xor	 rcx, rbp
  00101	e8 00 00 00 00	 call	 __security_check_cookie
  00106	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0010d	5f		 pop	 rdi
  0010e	5d		 pop	 rbp
  0010f	c3		 ret	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
_Alloc_max$ = 8
_Storage_max$ = 40
$T4 = 264
$T5 = 296
$T6 = 328
__$ArrayPad$ = 344
this$ = 384
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT

; 2360 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00049	90		 npad	 1

; 2361 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

  0004a	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00051	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00056	48 8b c8	 mov	 rcx, rax
  00059	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  0005e	48 89 45 08	 mov	 QWORD PTR _Alloc_max$[rbp], rax

; 2362 :         const size_type _Storage_max = // can always store small string

  00062	48 c7 85 08 01
	00 00 10 00 00
	00		 mov	 QWORD PTR $T4[rbp], 16
  0006d	48 8d 95 08 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00074	48 8d 4d 08	 lea	 rcx, QWORD PTR _Alloc_max$[rbp]
  00078	e8 00 00 00 00	 call	 ??$max@_K@std@@YAAEB_KAEB_K0@Z ; std::max<unsigned __int64>
  0007d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00080	48 89 45 28	 mov	 QWORD PTR _Storage_max$[rbp], rax

; 2363 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 2364 :         return (_STD min)(static_cast<size_type>(_STD _Max_limit<difference_type>()),

  00084	48 8b 45 28	 mov	 rax, QWORD PTR _Storage_max$[rbp]
  00088	48 ff c8	 dec	 rax
  0008b	48 89 85 28 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  00092	e8 00 00 00 00	 call	 ??$_Max_limit@_J@std@@YA_JXZ ; std::_Max_limit<__int64>
  00097	48 89 85 48 01
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  0009e	48 8d 95 28 01
	00 00		 lea	 rdx, QWORD PTR $T5[rbp]
  000a5	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000ac	e8 00 00 00 00	 call	 ??$min@_K@std@@YAAEB_KAEB_K0@Z ; std::min<unsigned __int64>
  000b1	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 2365 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 2366 :         );
; 2367 :     }

  000b4	48 8b f8	 mov	 rdi, rax
  000b7	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcFrameData
  000c2	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c7	48 8b c7	 mov	 rax, rdi
  000ca	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000d1	48 33 cd	 xor	 rcx, rbp
  000d4	e8 00 00 00 00	 call	 __security_check_cookie
  000d9	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  000e0	5f		 pop	 rdi
  000e1	5d		 pop	 rbp
  000e2	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 224
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT

; 2356 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 2357 :         return _Mypair._Myval2._Mysize;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]

; 2358 :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 224
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT

; 2342 :     _NODISCARD _CONSTEXPR20 _Ret_z_ const _Elem* data() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 2343 :         return _Mypair._Myval2._Myptr();

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b c8	 mov	 rcx, rax
  0002a	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 2344 :     }

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
_TEXT	SEGMENT
_Old_ptr$1 = 8
$T2 = 228
$T3 = 260
this$ = 320
_Ptr$ = 328
_Count$ = 336
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 1603 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1

; 1604 :         // assign [_Ptr, _Ptr + _Count)
; 1605 :         if (_Count <= _Mypair._Myval2._Myres) {

  0002a	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00035	48 39 85 50 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  0003c	77 6e		 ja	 SHORT $LN2@assign

; 1606 :             _ASAN_STRING_REMOVE(*this);
; 1607 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  0003e	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0004d	48 89 45 08	 mov	 QWORD PTR _Old_ptr$1[rbp], rax

; 1608 :             _Mypair._Myval2._Mysize = _Count;

  00051	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00058	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0005f	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 1609 :             _Traits::move(_Old_ptr, _Ptr, _Count);

  00063	4c 8b 85 50 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  0006a	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00071	48 8b 4d 08	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  00075	e8 00 00 00 00	 call	 ?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::move
  0007a	90		 npad	 1

; 1610 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0007b	c6 85 e4 00 00
	00 00		 mov	 BYTE PTR $T2[rbp], 0
  00082	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00089	48 8b 4d 08	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  0008d	48 03 c8	 add	 rcx, rax
  00090	48 8b c1	 mov	 rax, rcx
  00093	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  0009a	48 8b c8	 mov	 rcx, rax
  0009d	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
  000a2	90		 npad	 1

; 1611 :             _ASAN_STRING_CREATE(*this);
; 1612 :             return *this;

  000a3	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000aa	eb 35		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 1613 :         }
; 1614 : 
; 1615 :         return _Reallocate_for(

  000ac	48 8d 85 04 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  000b3	48 8b f8	 mov	 rdi, rax
  000b6	33 c0		 xor	 eax, eax
  000b8	b9 01 00 00 00	 mov	 ecx, 1
  000bd	f3 aa		 rep stosb
  000bf	4c 8b 8d 48 01
	00 00		 mov	 r9, QWORD PTR _Ptr$[rbp]
  000c6	44 0f b6 85 04
	01 00 00	 movzx	 r8d, BYTE PTR $T3[rbp]
  000ce	48 8b 95 50 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  000d5	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000dc	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_1>@?1??assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??assign@01@QEAAAEAV01@QEBD0@Z@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign'::`2'::<lambda_1>,char const *>
$LN1@assign:

; 1616 :             _Count,
; 1617 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) _STATIC_CALL_OPERATOR {
; 1618 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 1619 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 1620 :             },
; 1621 :             _Ptr);
; 1622 :     }

  000e1	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000e8	5f		 pop	 rdi
  000e9	5d		 pop	 rbp
  000ea	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 8
$S4$ = 36
_To_delete$ = 72
__$ArrayPad$ = 280
this$ = 320
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 1369 :     _CONSTEXPR20 ~basic_string() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 1a 00 00 00	 mov	 ecx, 26
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00049	90		 npad	 1

; 1370 :         _Tidy_deallocate();

  0004a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00051	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
  00056	90		 npad	 1

; 1371 : #if _ITERATOR_DEBUG_LEVEL != 0
; 1372 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00057	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005e	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00063	48 8b d0	 mov	 rdx, rax
  00066	48 8d 4d 24	 lea	 rcx, QWORD PTR $S4$[rbp]
  0006a	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0006f	48 8d 45 24	 lea	 rax, QWORD PTR $S4$[rbp]
  00073	48 89 45 08	 mov	 QWORD PTR _Alproxy$[rbp], rax

; 1373 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

  00077	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00081	48 89 45 48	 mov	 QWORD PTR _To_delete$[rbp], rax

; 1374 :         _Mypair._Myval2._Myproxy = nullptr;

  00085	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1375 :         _Delete_plain_internal(_Alproxy, _To_delete);

  00093	48 8b 55 48	 mov	 rdx, QWORD PTR _To_delete$[rbp]
  00097	48 8b 4d 08	 mov	 rcx, QWORD PTR _Alproxy$[rbp]
  0009b	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  000a0	90		 npad	 1

; 1376 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 1377 :     }

  000a1	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a8	48 8b c8	 mov	 rcx, rax
  000ab	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  000b0	90		 npad	 1
  000b1	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcFrameData
  000bc	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c1	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000c8	48 33 cd	 xor	 rcx, rbp
  000cb	e8 00 00 00 00	 call	 __security_check_cookie
  000d0	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000d7	5f		 pop	 rdi
  000d8	5d		 pop	 rbp
  000d9	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_My_data$ = 8
$T1 = 228
$T2 = 260
this$ = 320
?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_empty, COMDAT

; 836  :     _CONSTEXPR20 void _Construct_empty() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 837  :         auto& _My_data = _Mypair._Myval2;

  00020	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 838  :         _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  0002b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00032	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00037	48 8b d0	 mov	 rdx, rax
  0003a	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00041	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  00046	48 8b d0	 mov	 rdx, rax
  00049	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0004d	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
  00052	90		 npad	 1

; 839  : 
; 840  :         // initialize basic_string data members
; 841  :         _My_data._Mysize = 0;

  00053	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00057	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 842  :         _My_data._Myres  = _Small_string_capacity;

  0005f	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00063	48 c7 40 20 0f
	00 00 00	 mov	 QWORD PTR [rax+32], 15

; 843  :         _My_data._Activate_SSO_buffer();

  0006b	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  0006f	e8 00 00 00 00	 call	 ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer
  00074	90		 npad	 1

; 844  : 
; 845  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 846  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00075	c6 85 04 01 00
	00 00		 mov	 BYTE PTR $T2[rbp], 0
  0007c	b8 01 00 00 00	 mov	 eax, 1
  00081	48 6b c0 00	 imul	 rax, rax, 0
  00085	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00089	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  0008e	48 8d 95 04 01
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  00095	48 8b c8	 mov	 rcx, rax
  00098	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
  0009d	90		 npad	 1

; 847  :     }

  0009e	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000a5	5f		 pop	 rdi
  000a6	5d		 pop	 rbp
  000a7	c3		 ret	 0
?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z
_TEXT	SEGMENT
_Al$ = 224
_Old_ptr$ = 232
_Capacity$ = 240
?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Deallocate_for_capacity, COMDAT

; 831  :         _Alty& _Al, const pointer _Old_ptr, const size_type _Capacity) noexcept {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1

; 832  :         _STL_INTERNAL_CHECK(_Capacity > _Small_string_capacity);
; 833  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0002a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Capacity$[rbp]
  00031	48 ff c0	 inc	 rax
  00034	4c 8b c0	 mov	 r8, rax
  00037	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Old_ptr$[rbp]
  0003e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00045	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
  0004a	90		 npad	 1

; 834  :     }

  0004b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Deallocate_for_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_Al$ = 264
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 693  :     _CONSTEXPR20 explicit basic_string(const _Alloc& _Al) noexcept : _Mypair(_One_then_variadic_args_t{}, _Al) {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	4c 8b 85 08 01
	00 00		 mov	 r8, QWORD PTR _Al$[rbp]
  00033	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  0003a	48 8b c8	 mov	 rcx, rax
  0003d	e8 00 00 00 00	 call	 ??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
  00042	90		 npad	 1

; 694  :         _Construct_empty();

  00043	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004a	e8 00 00 00 00	 call	 ?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_empty
  0004f	90		 npad	 1

; 695  :     }

  00050	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001a	48 83 c0 08	 add	 rax, 8
  0001e	48 8b c8	 mov	 rcx, rax
  00021	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  00026	90		 npad	 1
  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Switch_to_buf, COMDAT

; 481  :         _CONSTEXPR20 void _Switch_to_buf() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 482  :             _STD _Destroy_in_place(_Ptr);

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b c8	 mov	 rcx, rax
  0002a	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z ; std::_Destroy_in_place<char *>
  0002f	90		 npad	 1

; 483  : 
; 484  : #if _HAS_CXX20
; 485  :             // start the lifetime of the array elements
; 486  :             if (_STD is_constant_evaluated()) {
; 487  :                 for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 488  :                     _Buf[_Idx] = value_type();
; 489  :                 }
; 490  :             }
; 491  : #endif // _HAS_CXX20
; 492  :         }

  00030	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00037	5f		 pop	 rdi
  00038	5d		 pop	 rbp
  00039	c3		 ret	 0
?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Switch_to_buf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT

; 475  :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1
  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT

; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1
  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  0002e	33 c0		 xor	 eax, eax
  00030	b9 10 00 00 00	 mov	 ecx, 16
  00035	f3 aa		 rep stosb
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer, COMDAT

; 437  :     _CONSTEXPR20 void _Activate_SSO_buffer() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 438  :         // start the lifetime of the array elements
; 439  : #if _HAS_CXX20
; 440  :         if (_STD is_constant_evaluated()) {
; 441  :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 442  :                 _Bx._Buf[_Idx] = value_type();
; 443  :             }
; 444  :         }
; 445  : #endif // _HAS_CXX20
; 446  :     }

  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged, COMDAT

; 433  :     _NODISCARD _CONSTEXPR20 bool _Large_mode_engaged() const noexcept {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 434  :         return _Myres > _Small_string_capacity;

  00020	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 83 78 20 0f	 cmp	 QWORD PTR [rax+32], 15
  0002c	76 0c		 jbe	 SHORT $LN3@Large_mode
  0002e	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  00038	eb 0a		 jmp	 SHORT $LN4@Large_mode
$LN3@Large_mode:
  0003a	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN4@Large_mode:
  00044	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv66[rbp]

; 435  :     }

  0004b	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
_Result$ = 8
this$ = 256
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 424  :     _NODISCARD _CONSTEXPR20 const value_type* _Myptr() const noexcept {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 425  :         const value_type* _Result = _Bx._Buf;

  00020	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 83 c0 08	 add	 rax, 8
  0002b	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax

; 426  :         if (_Large_mode_engaged()) {

  0002f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00036	e8 00 00 00 00	 call	 ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged
  0003b	0f b6 c0	 movzx	 eax, al
  0003e	85 c0		 test	 eax, eax
  00040	74 14		 je	 SHORT $LN2@Myptr

; 427  :             _Result = _Unfancy(_Bx._Ptr);

  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004d	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00052	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax
$LN2@Myptr:

; 428  :         }
; 429  : 
; 430  :         return _Result;

  00056	48 8b 45 08	 mov	 rax, QWORD PTR _Result$[rbp]

; 431  :     }

  0005a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00061	5f		 pop	 rdi
  00062	5d		 pop	 rbp
  00063	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
_TEXT	SEGMENT
_Result$ = 8
this$ = 256
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 415  :     _NODISCARD _CONSTEXPR20 value_type* _Myptr() noexcept {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 416  :         value_type* _Result = _Bx._Buf;

  00020	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 83 c0 08	 add	 rax, 8
  0002b	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax

; 417  :         if (_Large_mode_engaged()) {

  0002f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00036	e8 00 00 00 00	 call	 ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged
  0003b	0f b6 c0	 movzx	 eax, al
  0003e	85 c0		 test	 eax, eax
  00040	74 14		 je	 SHORT $LN2@Myptr

; 418  :             _Result = _Unfancy(_Bx._Ptr);

  00042	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004d	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00052	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax
$LN2@Myptr:

; 419  :         }
; 420  : 
; 421  :         return _Result;

  00056	48 8b 45 08	 mov	 rax, QWORD PTR _Result$[rbp]

; 422  :     }

  0005a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00061	5f		 pop	 rdi
  00062	5d		 pop	 rbp
  00063	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT

; 402  :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1
  00020	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00027	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QEAA@XZ ; std::_Container_base12::_Container_base12
  0002c	90		 npad	 1
  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 83 c0 08	 add	 rax, 8
  00038	48 8b c8	 mov	 rcx, rax
  0003b	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
  00040	90		 npad	 1

; 403  : 
; 404  :     // length of internal buffer, [1, 16] (NB: used by the debugger visualizer)
; 405  :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 406  :     // roundup mask for allocated buffers, [0, 15]
; 407  :     static constexpr size_type _Alloc_mask = sizeof(value_type) <= 1 ? 15
; 408  :                                            : sizeof(value_type) <= 2 ? 7
; 409  :                                            : sizeof(value_type) <= 4 ? 3
; 410  :                                            : sizeof(value_type) <= 8 ? 1
; 411  :                                                                      : 0;
; 412  :     // capacity in small mode
; 413  :     static constexpr size_type _Small_string_capacity = _BUF_SIZE - 1;
; 414  : 
; 415  :     _NODISCARD _CONSTEXPR20 value_type* _Myptr() noexcept {
; 416  :         value_type* _Result = _Bx._Buf;
; 417  :         if (_Large_mode_engaged()) {
; 418  :             _Result = _Unfancy(_Bx._Ptr);
; 419  :         }
; 420  : 
; 421  :         return _Result;
; 422  :     }
; 423  : 
; 424  :     _NODISCARD _CONSTEXPR20 const value_type* _Myptr() const noexcept {
; 425  :         const value_type* _Result = _Bx._Buf;
; 426  :         if (_Large_mode_engaged()) {
; 427  :             _Result = _Unfancy(_Bx._Ptr);
; 428  :         }
; 429  : 
; 430  :         return _Result;
; 431  :     }
; 432  : 
; 433  :     _NODISCARD _CONSTEXPR20 bool _Large_mode_engaged() const noexcept {
; 434  :         return _Myres > _Small_string_capacity;
; 435  :     }
; 436  : 
; 437  :     _CONSTEXPR20 void _Activate_SSO_buffer() noexcept {
; 438  :         // start the lifetime of the array elements
; 439  : #if _HAS_CXX20
; 440  :         if (_STD is_constant_evaluated()) {
; 441  :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 442  :                 _Bx._Buf[_Idx] = value_type();
; 443  :             }
; 444  :         }
; 445  : #endif // _HAS_CXX20
; 446  :     }
; 447  : 
; 448  :     _CONSTEXPR20 void _Check_offset(const size_type _Off) const {
; 449  :         // checks whether _Off is in the bounds of [0, size()]
; 450  :         if (_Mysize < _Off) {
; 451  :             _Xran();
; 452  :         }
; 453  :     }
; 454  : 
; 455  :     _CONSTEXPR20 void _Check_offset_exclusive(const size_type _Off) const {
; 456  :         // checks whether _Off is in the bounds of [0, size())
; 457  :         if (_Mysize <= _Off) {
; 458  :             _Xran();
; 459  :         }
; 460  :     }
; 461  : 
; 462  :     [[noreturn]] static void _Xran() {
; 463  :         _Xout_of_range("invalid string position");
; 464  :     }
; 465  : 
; 466  :     _NODISCARD _CONSTEXPR20 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 467  :         // trims _Size to the longest it can be assuming a string at/after _Off
; 468  :         return (_STD min)(_Size, _Mysize - _Off);
; 469  :     }
; 470  : 
; 471  :     union _Bxty { // storage for small buffer or pointer to larger one
; 472  :         // This constructor previously initialized _Ptr. Don't rely on the new behavior without
; 473  :         // renaming `_String_val` (and fixing the visualizer).
; 474  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers
; 475  :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 476  : 
; 477  :         value_type _Buf[_BUF_SIZE];
; 478  :         pointer _Ptr;
; 479  :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 480  : 
; 481  :         _CONSTEXPR20 void _Switch_to_buf() noexcept {
; 482  :             _STD _Destroy_in_place(_Ptr);
; 483  : 
; 484  : #if _HAS_CXX20
; 485  :             // start the lifetime of the array elements
; 486  :             if (_STD is_constant_evaluated()) {
; 487  :                 for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 488  :                     _Buf[_Idx] = value_type();
; 489  :                 }
; 490  :             }
; 491  : #endif // _HAS_CXX20
; 492  :         }
; 493  :     };
; 494  :     _Bxty _Bx;
; 495  : 
; 496  :     // invariant: _Myres >= _Mysize, and _Myres >= _Small_string_capacity (after string's construction)
; 497  :     // neither _Mysize nor _Myres takes account of the extra null terminator
; 498  :     size_type _Mysize = 0; // current length of string (size)

  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 499  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00050	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 402  :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

  0005f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00066	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006d	5f		 pop	 rdi
  0006e	5d		 pop	 rbp
  0006f	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
_TEXT	SEGMENT
__formal$ = 224
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 713  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 714  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00020	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1

; 715  :     }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
_TEXT	SEGMENT
this$ = 224
_Count$ = 232
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z PROC		; std::allocator<char>::allocate, COMDAT

; 952  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 953  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 954  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00025	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0002c	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$00@std@@YA_K_K@Z ; std::_Get_size_of_n<1>
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits>

; 955  :     }

  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
_Count$ = 240
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z PROC	; std::allocator<char>::deallocate, COMDAT

; 946  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1
$LN4@deallocate:

; 947  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

  0002a	48 83 bd e8 00
	00 00 00	 cmp	 QWORD PTR _Ptr$[rbp], 0
  00032	75 0a		 jne	 SHORT $LN10@deallocate
  00034	48 83 bd f0 00
	00 00 00	 cmp	 QWORD PTR _Count$[rbp], 0
  0003c	75 02		 jne	 SHORT $LN8@deallocate
$LN10@deallocate:
  0003e	eb 6c		 jmp	 SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
  00040	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
  00047	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0004c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00053	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00058	45 33 c9	 xor	 r9d, r9d
  0005b	41 b8 b3 03 00
	00		 mov	 r8d, 947		; 000003b3H
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@BPMGLBMJ@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@
  00068	b9 02 00 00 00	 mov	 ecx, 2
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00073	83 f8 01	 cmp	 eax, 1
  00076	75 03		 jne	 SHORT $LN12@deallocate
  00078	cc		 int	 3
  00079	33 c0		 xor	 eax, eax
$LN12@deallocate:
  0007b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00084	41 b9 b3 03 00
	00		 mov	 r9d, 947		; 000003b3H
  0008a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1GI@IFFPLBNO@?$AAD?$AA?3?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?2?$AAV?$AAC?$AA?2?$AAT?$AAo@
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000a5	90		 npad	 1
  000a6	33 c0		 xor	 eax, eax
  000a8	85 c0		 test	 eax, eax
  000aa	75 94		 jne	 SHORT $LN7@deallocate
$LN9@deallocate:
  000ac	33 c0		 xor	 eax, eax
  000ae	85 c0		 test	 eax, eax
  000b0	0f 85 74 ff ff
	ff		 jne	 $LN4@deallocate

; 948  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 949  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b6	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  000bd	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000c4	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z ; std::_Deallocate<16>
  000c9	90		 npad	 1

; 950  :     }

  000ca	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000d1	5f		 pop	 rdi
  000d2	5d		 pop	 rbp
  000d3	c3		 ret	 0
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ENDP	; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$allocator@D@std@@QEAA@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT

; 938  :     constexpr allocator() noexcept {}

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1
  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
??0?$allocator@D@std@@QEAA@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 516  : [[noreturn]] inline void _Xlen_string() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BF0C8B22_xstring
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	90		 npad	 1

; 517  :     _Xlength_error("string too long");

  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long@
  00023	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
  00028	90		 npad	 1
$LN2@Xlen_strin:

; 518  : }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 200
_Obj$ = 256
<_Args_0>$ = 264
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 396  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DB98B07B_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 397  : #if _HAS_CXX20
; 398  :     if (_STD is_constant_evaluated()) {
; 399  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 400  :     } else
; 401  : #endif // _HAS_CXX20
; 402  :     {
; 403  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00025	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Obj$[rbp]
  0002c	e8 00 00 00 00	 call	 ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
  00031	48 8b d0	 mov	 rdx, rax
  00034	b9 10 00 00 00	 mov	 ecx, 16
  00039	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0003e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00045	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR <_Args_0>$[rbp]
  0004c	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0004f	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR $T1[rbp]
  00056	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
  0005b	90		 npad	 1

; 404  :     }
; 405  : }

  0005c	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00063	5f		 pop	 rdi
  00064	5d		 pop	 rbp
  00065	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\utility
;	COMDAT ??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 8
_Val$ = 256
_New_val$ = 264
??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z PROC ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>, COMDAT

; 751  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A14A6E7D_utility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 752  :     // assign _New_val to _Val, return previous _Val
; 753  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00025	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]
  0002c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002f	48 89 45 08	 mov	 QWORD PTR _Old_val$[rbp], rax

; 754  :     _Val         = static_cast<_Other&&>(_New_val);

  00033	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]
  0003a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_val$[rbp]
  00041	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00044	48 89 08	 mov	 QWORD PTR [rax], rcx

; 755  :     return _Old_val;

  00047	48 8b 45 08	 mov	 rax, QWORD PTR _Old_val$[rbp]

; 756  : }

  0004b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z ENDP ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Lock$ = 4
__$ArrayPad$ = 216
this$ = 256
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT

; 1205 :     void _Orphan_all_locked_v3() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 0a 00 00 00	 mov	 ecx, 10
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 d8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00049	90		 npad	 1

; 1206 :         _Lockit _Lock(_LOCK_DEBUG);

  0004a	ba 03 00 00 00	 mov	 edx, 3
  0004f	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$[rbp]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
  00059	90		 npad	 1

; 1207 :         _Orphan_all_unlocked_v3();

  0005a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00061	e8 00 00 00 00	 call	 ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
  00066	90		 npad	 1

; 1208 :     }

  00067	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$[rbp]
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  00071	90		 npad	 1
  00072	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData
  0007d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00082	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00089	48 33 cd	 xor	 rcx, rbp
  0008c	e8 00 00 00 00	 call	 __security_check_cookie
  00091	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00098	5f		 pop	 rdi
  00099	5d		 pop	 rbp
  0009a	c3		 ret	 0
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 8
$T2 = 228
this$ = 288
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT

; 1345 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1346 :     if (!_Myproxy) { // no proxy, already done

  00020	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0002b	75 02		 jne	 SHORT $LN5@Orphan_all

; 1347 :         return;

  0002d	eb 4e		 jmp	 SHORT $LN1@Orphan_all
$LN5@Orphan_all:

; 1348 :     }
; 1349 : 
; 1350 :     // proxy allocated, drain it
; 1351 :     for (auto _Pnext = _STD exchange(_Myproxy->_Myfirstiter, nullptr); _Pnext; _Pnext = _Pnext->_Mynextiter) {

  0002f	48 c7 85 e4 00
	00 00 00 00 00
	00		 mov	 QWORD PTR $T2[rbp], 0
  0003a	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00044	48 83 c0 08	 add	 rax, 8
  00048	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  0004f	48 8b c8	 mov	 rcx, rax
  00052	e8 00 00 00 00	 call	 ??$exchange@PEAU_Iterator_base12@std@@$$T@std@@YAPEAU_Iterator_base12@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
  00057	48 89 45 08	 mov	 QWORD PTR _Pnext$1[rbp], rax
  0005b	eb 0c		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:
  0005d	48 8b 45 08	 mov	 rax, QWORD PTR _Pnext$1[rbp]
  00061	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00065	48 89 45 08	 mov	 QWORD PTR _Pnext$1[rbp], rax
$LN4@Orphan_all:
  00069	48 83 7d 08 00	 cmp	 QWORD PTR _Pnext$1[rbp], 0
  0006e	74 0d		 je	 SHORT $LN1@Orphan_all

; 1352 :         _Pnext->_Myproxy = nullptr;

  00070	48 8b 45 08	 mov	 rax, QWORD PTR _Pnext$1[rbp]
  00074	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1353 :     }

  0007b	eb e0		 jmp	 SHORT $LN2@Orphan_all
$LN1@Orphan_all:

; 1354 : }

  0007d	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00084	5f		 pop	 rdi
  00085	5d		 pop	 rbp
  00086	c3		 ret	 0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1356 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1357 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1358 : #if _HAS_CXX20
; 1359 :     if (_STD is_constant_evaluated()) {
; 1360 :         _Orphan_all_unlocked_v3();
; 1361 :     } else
; 1362 : #endif // _HAS_CXX20
; 1363 :     {
; 1364 :         _Orphan_all_locked_v3();

  00020	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00027	e8 00 00 00 00	 call	 ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3
  0002c	90		 npad	 1

; 1365 :     }
; 1366 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1367 : }

  0002d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00034	5f		 pop	 rdi
  00035	5d		 pop	 rbp
  00036	c3		 ret	 0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1174 :     _CONSTEXPR20 _Container_base12() noexcept = default;

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 1175 : 
; 1176 :     _Container_base12(const _Container_base12&)            = delete;
; 1177 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1178 : 
; 1179 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1180 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1181 : 
; 1182 :     template <class _Alloc>
; 1183 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1184 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1185 :         _Construct_in_place(*_New_proxy, this);
; 1186 :         _Myproxy            = _New_proxy;
; 1187 :         _New_proxy->_Mycont = this;
; 1188 :     }
; 1189 : 
; 1190 :     template <class _Alloc>
; 1191 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1192 :         // pre: no iterators refer to the existing proxy
; 1193 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1194 :         _Construct_in_place(*_New_proxy, this);
; 1195 :         _New_proxy->_Mycont = this;
; 1196 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1197 :     }
; 1198 : 
; 1199 :     _Container_proxy* _Myproxy = nullptr;

  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1174 :     _CONSTEXPR20 _Container_base12() noexcept = default;

  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003c	5f		 pop	 rdi
  0003d	5d		 pop	 rbp
  0003e	c3		 ret	 0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 224
_Mycont_$ = 232
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1166 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Mycont_$[rbp]
  00033	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1167 : 
; 1168 :     const _Container_base12* _Mycont       = nullptr;
; 1169 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 1166 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

  00045	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00053	5f		 pop	 rdi
  00054	5d		 pop	 rbp
  00055	c3		 ret	 0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 8
_Ptr_container$ = 40
_Min_back_shift$ = 72
_Back_shift$ = 104
_Ptr$ = 352
_Bytes$ = 360
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 169  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 170  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 171  :     _Bytes += _Non_user_size;

  00025	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  0002c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002f	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  00033	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  0003a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 172  : 
; 173  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

  0003d	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00044	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00047	48 89 45 08	 mov	 QWORD PTR _Ptr_user$[rbp], rax

; 174  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0004b	b8 08 00 00 00	 mov	 eax, 8
  00050	48 6b c0 ff	 imul	 rax, rax, -1
  00054	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr_user$[rbp]
  00058	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0005c	48 89 45 28	 mov	 QWORD PTR _Ptr_container$[rbp], rax
$LN4@Adjust_man:

; 175  : 
; 176  :     // If the following asserts, it likely means that we are performing
; 177  :     // an aligned delete on memory coming from an unaligned allocation.
; 178  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  00060	b8 08 00 00 00	 mov	 eax, 8
  00065	48 6b c0 fe	 imul	 rax, rax, -2
  00069	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr_user$[rbp]
  0006d	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  00077	48 39 14 01	 cmp	 QWORD PTR [rcx+rax], rdx
  0007b	75 02		 jne	 SHORT $LN14@Adjust_man
  0007d	eb 78		 jmp	 SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
  0007f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  00085	83 c0 09	 add	 eax, 9
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  0008f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0009b	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000a0	45 33 c9	 xor	 r9d, r9d
  000a3	44 8b c0	 mov	 r8d, eax
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@BPMGLBMJ@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@
  000ad	b9 02 00 00 00	 mov	 ecx, 2
  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  000b8	83 f8 01	 cmp	 eax, 1
  000bb	75 03		 jne	 SHORT $LN19@Adjust_man
  000bd	cc		 int	 3
  000be	33 c0		 xor	 eax, eax
$LN19@Adjust_man:
  000c0	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  000c6	83 c0 09	 add	 eax, 9
  000c9	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000d2	44 8b c8	 mov	 r9d, eax
  000d5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1GI@IFFPLBNO@?$AAD?$AA?3?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?2?$AAV?$AAC?$AA?2?$AAT?$AAo@
  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000f0	90		 npad	 1
  000f1	33 c0		 xor	 eax, eax
  000f3	85 c0		 test	 eax, eax
  000f5	75 88		 jne	 SHORT $LN7@Adjust_man
$LN15@Adjust_man:
  000f7	33 c0		 xor	 eax, eax
  000f9	85 c0		 test	 eax, eax
  000fb	0f 85 5f ff ff
	ff		 jne	 $LN4@Adjust_man

; 179  : 
; 180  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 181  :     // in range [_Min_back_shift, _Non_user_size]
; 182  : #ifdef _DEBUG
; 183  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

  00101	48 c7 45 48 10
	00 00 00	 mov	 QWORD PTR _Min_back_shift$[rbp], 16

; 184  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 185  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 186  : #endif // ^^^ !defined(_DEBUG) ^^^
; 187  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00109	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00110	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr_container$[rbp]
  00114	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00117	48 2b c1	 sub	 rax, rcx
  0011a	48 89 45 68	 mov	 QWORD PTR _Back_shift$[rbp], rax
$LN10@Adjust_man:

; 188  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0011e	48 83 7d 68 10	 cmp	 QWORD PTR _Back_shift$[rbp], 16
  00123	72 09		 jb	 SHORT $LN16@Adjust_man
  00125	48 83 7d 68 2f	 cmp	 QWORD PTR _Back_shift$[rbp], 47 ; 0000002fH
  0012a	77 02		 ja	 SHORT $LN16@Adjust_man
  0012c	eb 78		 jmp	 SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
  0012e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  00134	83 c0 13	 add	 eax, 19
  00137	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  0013e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0014a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0014f	45 33 c9	 xor	 r9d, r9d
  00152	44 8b c0	 mov	 r8d, eax
  00155	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@BPMGLBMJ@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@
  0015c	b9 02 00 00 00	 mov	 ecx, 2
  00161	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00167	83 f8 01	 cmp	 eax, 1
  0016a	75 03		 jne	 SHORT $LN20@Adjust_man
  0016c	cc		 int	 3
  0016d	33 c0		 xor	 eax, eax
$LN20@Adjust_man:
  0016f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  00175	83 c0 13	 add	 eax, 19
  00178	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00181	44 8b c8	 mov	 r9d, eax
  00184	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1GI@IFFPLBNO@?$AAD?$AA?3?$AA?2?$AAv?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?2?$AAV?$AAC?$AA?2?$AAT?$AAo@
  0018b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00199	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  0019f	90		 npad	 1
  001a0	33 c0		 xor	 eax, eax
  001a2	85 c0		 test	 eax, eax
  001a4	75 88		 jne	 SHORT $LN13@Adjust_man
$LN17@Adjust_man:
  001a6	33 c0		 xor	 eax, eax
  001a8	85 c0		 test	 eax, eax
  001aa	0f 85 6e ff ff
	ff		 jne	 $LN10@Adjust_man

; 189  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001b0	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  001b7	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr_container$[rbp]
  001bb	48 89 08	 mov	 QWORD PTR [rax], rcx

; 190  : }

  001be	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  001c5	5f		 pop	 rdi
  001c6	5d		 pop	 rbp
  001c7	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 224
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 100  :         void* _Allocate(const size_t _Bytes) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 101  :         return ::operator new(_Bytes);

  00020	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00027	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 102  :     }

  0002c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00033	5f		 pop	 rdi
  00034	5d		 pop	 rbp
  00035	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 200
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 74   : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CBDF0DBE_xmemory
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	90		 npad	 1

; 75   :     _THROW(bad_array_new_length{});

  0001c	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00023	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QEAA@XZ ; std::bad_array_new_length::bad_array_new_length
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
  0002f	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00036	e8 00 00 00 00	 call	 _CxxThrowException
  0003b	90		 npad	 1
$LN2@Throw_bad_:

; 76   : }

  0003c	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 450  :     _NODISCARD static constexpr int_type eof() noexcept {

$LN4:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B3B6A1BA___msvc_string_view@hpp
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	90		 npad	 1

; 451  :         return static_cast<int_type>(EOF);

  0001c	b8 ff ff ff ff	 mov	 eax, -1

; 452  :     }

  00021	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00028	5f		 pop	 rdi
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ?not_eof@?$_Narrow_char_traits@DH@std@@SAHH@Z
_TEXT	SEGMENT
tv69 = 192
tv68 = 196
_Meta$ = 240
?not_eof@?$_Narrow_char_traits@DH@std@@SAHH@Z PROC	; std::_Narrow_char_traits<char,int>::not_eof, COMDAT

; 446  :     _NODISCARD static constexpr int_type not_eof(const int_type _Meta) noexcept {

$LN8:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B3B6A1BA___msvc_string_view@hpp
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001e	90		 npad	 1

; 447  :         return _Meta != eof() ? _Meta : !eof();

  0001f	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00024	39 85 f0 00 00
	00		 cmp	 DWORD PTR _Meta$[rbp], eax
  0002a	74 0e		 je	 SHORT $LN5@not_eof
  0002c	8b 85 f0 00 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
  00032	89 85 c0 00 00
	00		 mov	 DWORD PTR tv69[rbp], eax
  00038	eb 2b		 jmp	 SHORT $LN6@not_eof
$LN5@not_eof:
  0003a	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0003f	85 c0		 test	 eax, eax
  00041	75 0c		 jne	 SHORT $LN3@not_eof
  00043	c7 85 c4 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv68[rbp], 1
  0004d	eb 0a		 jmp	 SHORT $LN4@not_eof
$LN3@not_eof:
  0004f	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv68[rbp], 0
$LN4@not_eof:
  00059	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR tv68[rbp]
  0005f	89 85 c0 00 00
	00		 mov	 DWORD PTR tv69[rbp], eax
$LN6@not_eof:
  00065	8b 85 c0 00 00
	00		 mov	 eax, DWORD PTR tv69[rbp]

; 448  :     }

  0006b	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
?not_eof@?$_Narrow_char_traits@DH@std@@SAHH@Z ENDP	; std::_Narrow_char_traits<char,int>::not_eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
_TEXT	SEGMENT
tv65 = 192
_Left$ = 240
_Right$ = 248
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 442  :     _NODISCARD static constexpr bool eq_int_type(const int_type _Left, const int_type _Right) noexcept {

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	55		 push	 rbp
  00009	57		 push	 rdi
  0000a	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00011	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B3B6A1BA___msvc_string_view@hpp
  0001d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00022	90		 npad	 1

; 443  :         return _Left == _Right;

  00023	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR _Right$[rbp]
  00029	39 85 f0 00 00
	00		 cmp	 DWORD PTR _Left$[rbp], eax
  0002f	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00031	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv65[rbp], 1
  0003b	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0003d	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv65[rbp], 0
$LN4@eq_int_typ:
  00047	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv65[rbp]

; 444  :     }

  0004e	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z
_TEXT	SEGMENT
_Ch$ = 224
?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z PROC	; std::_Narrow_char_traits<char,int>::to_int_type, COMDAT

; 438  :     _NODISCARD static constexpr int_type to_int_type(const _Elem _Ch) noexcept {

$LN4:
  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B3B6A1BA___msvc_string_view@hpp
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001e	90		 npad	 1

; 439  :         return static_cast<unsigned char>(_Ch);

  0001f	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR _Ch$[rbp]

; 440  :     }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z ENDP	; std::_Narrow_char_traits<char,int>::to_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z
_TEXT	SEGMENT
_Meta$ = 224
?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z PROC	; std::_Narrow_char_traits<char,int>::to_char_type, COMDAT

; 434  :     _NODISCARD static constexpr _Elem to_char_type(const int_type _Meta) noexcept {

$LN4:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B3B6A1BA___msvc_string_view@hpp
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001e	90		 npad	 1

; 435  :         return static_cast<_Elem>(_Meta);

  0001f	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR _Meta$[rbp]

; 436  :     }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z ENDP	; std::_Narrow_char_traits<char,int>::to_char_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ?eq@?$_Narrow_char_traits@DH@std@@SA_NDD@Z
_TEXT	SEGMENT
tv67 = 192
_Left$ = 240
_Right$ = 248
?eq@?$_Narrow_char_traits@DH@std@@SA_NDD@Z PROC		; std::_Narrow_char_traits<char,int>::eq, COMDAT

; 426  :     _NODISCARD static constexpr bool eq(const _Elem _Left, const _Elem _Right) noexcept {

$LN6:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00008	55		 push	 rbp
  00009	57		 push	 rdi
  0000a	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00011	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B3B6A1BA___msvc_string_view@hpp
  0001d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00022	90		 npad	 1

; 427  :         return _Left == _Right;

  00023	0f be 85 f0 00
	00 00		 movsx	 eax, BYTE PTR _Left$[rbp]
  0002a	0f be 8d f8 00
	00 00		 movsx	 ecx, BYTE PTR _Right$[rbp]
  00031	3b c1		 cmp	 eax, ecx
  00033	75 0c		 jne	 SHORT $LN3@eq
  00035	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv67[rbp], 1
  0003f	eb 0a		 jmp	 SHORT $LN4@eq
$LN3@eq:
  00041	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv67[rbp], 0
$LN4@eq:
  0004b	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv67[rbp]

; 428  :     }

  00052	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00059	5f		 pop	 rdi
  0005a	5d		 pop	 rbp
  0005b	c3		 ret	 0
?eq@?$_Narrow_char_traits@DH@std@@SA_NDD@Z ENDP		; std::_Narrow_char_traits<char,int>::eq
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
_TEXT	SEGMENT
_Left$ = 224
_Right$ = 232
?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z PROC ; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 417  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B3B6A1BA___msvc_string_view@hpp
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 418  : #if _HAS_CXX20
; 419  :         if (_STD is_constant_evaluated()) {
; 420  :             return _Primary_char_traits::assign(_Left, _Right);
; 421  :         }
; 422  : #endif // _HAS_CXX20
; 423  :         _Left = _Right;

  00025	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00033	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00036	88 08		 mov	 BYTE PTR [rax], cl

; 424  :     }

  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ENDP ; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
_First$ = 224
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 364  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B3B6A1BA___msvc_string_view@hpp
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 365  :         // find length of null-terminated string
; 366  : #if _HAS_CXX17
; 367  : #ifdef __cpp_char8_t
; 368  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 369  : #if _HAS_U8_INTRINSICS
; 370  :             return __builtin_u8strlen(_First);
; 371  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 372  :             return _Primary_char_traits::length(_First);
; 373  : #endif // ^^^ no u8 intrinsics ^^^
; 374  :         } else
; 375  : #endif // defined(__cpp_char8_t)
; 376  :         {
; 377  :             return __builtin_strlen(_First);
; 378  :         }
; 379  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 380  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00020	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First$[rbp]
  00027	e8 00 00 00 00	 call	 strlen

; 381  : #endif // ^^^ !_HAS_CXX17 ^^^
; 382  :     }

  0002c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00033	5f		 pop	 rdi
  00034	5d		 pop	 rbp
  00035	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
_TEXT	SEGMENT
_First1$ = 224
_First2$ = 232
_Count$ = 240
?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z PROC	; std::_Char_traits<char,int>::move, COMDAT

; 74   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B3B6A1BA___msvc_string_view@hpp
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1

; 75   :         // copy [_First2, _First2 + _Count) to [_First1, ...), allowing overlap
; 76   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 77   :         __builtin_memmove(_First1, _First2, _Count * sizeof(_Elem));
; 78   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS / !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 79   : #if _HAS_CXX20
; 80   :         if (_STD is_constant_evaluated()) {
; 81   :             // dest: [_First1, _First1 + _Count)
; 82   :             // src: [_First2, _First2 + _Count)
; 83   :             // We need to handle overlapping ranges.
; 84   :             // If _First1 is in the src range, we need a backward loop.
; 85   :             // Otherwise, the forward loop works (even if the back of dest overlaps the front of src).
; 86   : 
; 87   :             // Usually, we would compare pointers with less-than, even though they could belong to different arrays.
; 88   :             // However, we're not allowed to do that during constant evaluation, so we need a linear scan for equality.
; 89   :             bool _Loop_forward = true;
; 90   : 
; 91   :             for (const _Elem* _Src = _First2; _Src != _First2 + _Count; ++_Src) {
; 92   :                 if (_First1 == _Src) {
; 93   :                     _Loop_forward = false;
; 94   :                     break;
; 95   :                 }
; 96   :             }
; 97   : 
; 98   :             if (_Loop_forward) {
; 99   :                 for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 100  :                     _First1[_Idx] = _First2[_Idx];
; 101  :                 }
; 102  :             } else {
; 103  :                 for (size_t _Idx = _Count; _Idx != 0; --_Idx) {
; 104  :                     _First1[_Idx - 1] = _First2[_Idx - 1];
; 105  :                 }
; 106  :             }
; 107  : 
; 108  :             return _First1;
; 109  :         }
; 110  : #endif // _HAS_CXX20
; 111  : 
; 112  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0002a	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00031	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  00038	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  0003f	e8 00 00 00 00	 call	 memmove
  00044	90		 npad	 1

; 113  : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 114  : 
; 115  :         return _First1;

  00045	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _First1$[rbp]

; 116  :     }

  0004c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00053	5f		 pop	 rdi
  00054	5d		 pop	 rbp
  00055	c3		 ret	 0
?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ENDP	; std::_Char_traits<char,int>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\__msvc_string_view.hpp
;	COMDAT ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
_TEXT	SEGMENT
_First1$ = 224
_First2$ = 232
_Count$ = 240
?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z PROC	; std::_Char_traits<char,int>::copy, COMDAT

; 43   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B3B6A1BA___msvc_string_view@hpp
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1

; 44   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 45   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 46   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 47   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS / !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 48   : #if _HAS_CXX20
; 49   :         if (_STD is_constant_evaluated()) {
; 50   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap
; 51   :             for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 52   :                 _First1[_Idx] = _First2[_Idx];
; 53   :             }
; 54   : 
; 55   :             return _First1;
; 56   :         }
; 57   : #endif // _HAS_CXX20
; 58   : 
; 59   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002a	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00031	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  00038	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  0003f	e8 00 00 00 00	 call	 memcpy
  00044	90		 npad	 1

; 60   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 61   : 
; 62   :         return _First1;

  00045	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _First1$[rbp]

; 63   :     }

  0004c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00053	5f		 pop	 rdi
  00054	5d		 pop	 rbp
  00055	c3		 ret	 0
?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ENDP	; std::_Char_traits<char,int>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UEAA@XZ
  00023	90		 npad	 1
  00024	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  0002a	83 e0 01	 and	 eax, 1
  0002d	85 c0		 test	 eax, eax
  0002f	74 12		 je	 SHORT $LN2@scalar
  00031	ba 18 00 00 00	 mov	 edx, 24
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00042	90		 npad	 1
$LN2@scalar:
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QEAA@AEBV01@@Z
  0002b	90		 npad	 1
  0002c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  0003a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001f	90		 npad	 1
  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 144  :     {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EC297378_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 143  :         : bad_alloc("bad array new length")

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00027	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002e	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AEAA@QEBD@Z ; std::bad_alloc::bad_alloc
  00033	90		 npad	 1

; 144  :     {

  00034	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  00042	48 89 08	 mov	 QWORD PTR [rax], rcx

; 145  :     }

  00045	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00053	5f		 pop	 rdi
  00054	5d		 pop	 rbp
  00055	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  00023	90		 npad	 1
  00024	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  0002a	83 e0 01	 and	 eax, 1
  0002d	85 c0		 test	 eax, eax
  0002f	74 12		 je	 SHORT $LN2@scalar
  00031	ba 18 00 00 00	 mov	 edx, 24
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00042	90		 npad	 1
$LN2@scalar:
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  0002b	90		 npad	 1
  0002c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  0003a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001f	90		 npad	 1
  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 224
_Message$ = 232
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 133  :     {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EC297378_vcruntime_exception@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 132  :         : exception(_Message, 1)

  00025	41 b8 01 00 00
	00		 mov	 r8d, 1
  0002b	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Message$[rbp]
  00032	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00039	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBDH@Z ; std::exception::exception
  0003e	90		 npad	 1

; 133  :     {

  0003f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  0004d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 134  :     }

  00050	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00023	90		 npad	 1
  00024	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  0002a	83 e0 01	 and	 eax, 1
  0002d	85 c0		 test	 eax, eax
  0002f	74 12		 je	 SHORT $LN2@scalar
  00031	ba 18 00 00 00	 mov	 edx, 24
  00036	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003d	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00042	90		 npad	 1
$LN2@scalar:
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 192
this$ = 240
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 95   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EC297378_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00020	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0002c	74 14		 je	 SHORT $LN3@what
  0002e	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00039	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  00040	eb 0e		 jmp	 SHORT $LN4@what
$LN3@what:
  00042	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  00049	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
$LN4@what:
  00050	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 97   :     }

  00057	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005e	5f		 pop	 rdi
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 90   :     {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EC297378_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1
  00020	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0002e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 91   :         __std_exception_destroy(&_Data);

  00031	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	48 8b c8	 mov	 rcx, rax
  0003f	e8 00 00 00 00	 call	 __std_exception_destroy
  00044	90		 npad	 1

; 92   :     }

  00045	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
_Other$ = 232
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 73   :     {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EC297378_vcruntime_exception@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00033	48 89 08	 mov	 QWORD PTR [rax], rcx

; 72   :         : _Data()

  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 83 c0 08	 add	 rax, 8
  00041	48 8b f8	 mov	 rdi, rax
  00044	33 c0		 xor	 eax, eax
  00046	b9 10 00 00 00	 mov	 ecx, 16
  0004b	f3 aa		 rep stosb

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0004d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00054	48 83 c0 08	 add	 rax, 8
  00058	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Other$[rbp]
  0005f	48 83 c1 08	 add	 rcx, 8
  00063	48 8b d0	 mov	 rdx, rax
  00066	e8 00 00 00 00	 call	 __std_exception_copy
  0006b	90		 npad	 1

; 75   :     }

  0006c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00073	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 224
_Message$ = 232
__formal$ = 240
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 67   :     {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__EC297378_vcruntime_exception@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00038	48 89 08	 mov	 QWORD PTR [rax], rcx

; 66   :         : _Data()

  0003b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 83 c0 08	 add	 rax, 8
  00046	48 8b f8	 mov	 rdi, rax
  00049	33 c0		 xor	 eax, eax
  0004b	b9 10 00 00 00	 mov	 ecx, 16
  00050	f3 aa		 rep stosb

; 68   :         _Data._What = _Message;

  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00059	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Message$[rbp]
  00060	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 69   :     }

  00064	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\wchar.h
;	COMDAT wmemcpy
_TEXT	SEGMENT
_S1$ = 224
_S2$ = 232
_N$ = 240
wmemcpy	PROC						; COMDAT

; 234  :     {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3FCAD62E_wchar@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1

; 235  :         #pragma warning(suppress: 6386) // Buffer overrun
; 236  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0002a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _N$[rbp]
  00031	48 d1 e0	 shl	 rax, 1
  00034	4c 8b c0	 mov	 r8, rax
  00037	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _S2$[rbp]
  0003e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _S1$[rbp]
  00045	e8 00 00 00 00	 call	 memcpy

; 237  :     }

  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
wmemcpy	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 224
_Where$ = 232
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 164  :     {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__064C7562_vcruntime_new@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1

; 165  :         (void)_Size;
; 166  :         return _Where;

  00025	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Where$[rbp]

; 167  :     }

  0002c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00033	5f		 pop	 rdi
  00034	5d		 pop	 rbp
  00035	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\C2simd\Ch02_01\Ch02_01.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__28109234_Ch02_01@cpp
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002c	5f		 pop	 rdi
  0002d	5d		 pop	 rbp
  0002e	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\C2simd\Ch02_01\Ch02_01.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__28109234_Ch02_01@cpp
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1
  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
