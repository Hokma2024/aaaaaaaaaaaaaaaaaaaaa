; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34120.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__F8ED840C_mmintrin@h DB 01H
__F3C15AE8_concurrencysal@h DB 01H
__C2C5E543_sal@h DB 01H
__CF4DA6E0_vadefs@h DB 01H
__0BD3CFF9_vcruntime@h DB 01H
__1B0272D9_corecrt@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__FA77ED4C_malloc@h DB 01H
__8B06A3AD_xmmintrin@h DB 01H
__EE642A61_emmintrin@h DB 01H
__31C542E8_pmmintrin@h DB 01H
__811C316A_tmmintrin@h DB 01H
__A82724E9_smmintrin@h DB 01H
__CD45AD25_nmmintrin@h DB 01H
__18FE576B_wmmintrin@h DB 01H
__D36A1A6C_zmmintrin@h DB 01H
__E47EB8A6_immintrin@h DB 01H
__EF0E8AE4_xkeycheck@h DB 01H
__00B1953A_yvals_core@h DB 01H
__7BAE8CB3___msvc_sanitizer_annotate_container@hpp DB 01H
__064C7562_vcruntime_new@h DB 01H
__E4C7762A_vcruntime_new_debug@h DB 01H
__935DC21B_crtdbg@h DB 01H
__B96DB034_crtdefs@h DB 01H
__3DCD2F8F_use_ansi@h DB 01H
__20075D49_yvals@h DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__DA572958_cstdio DB 01H
__61CC25A1_errno@h DB 01H
__DAE55B15_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__DAD54316_cstring DB 01H
__EF1F6BBA_corecrt_wconio@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__3D1D430C_corecrt_wdirect@h DB 01H
__8ECB7138_corecrt_share@h DB 01H
__DB7FEBA6_corecrt_wio@h DB 01H
__9A9F0068_corecrt_wprocess@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__369A9BC3_corecrt_wtime@h DB 01H
__CE789B9D_types@h DB 01H
__9901C817_stat@h DB 01H
__3FCAD62E_wchar@h DB 01H
__40DCFF0B_cwchar DB 01H
__C6C31DC6_xtr1common DB 01H
__031C7A3D_iosfwd DB 01H
__13F5961F_stddef@h DB 01H
__338C315B_cstddef DB 01H
__E9072CDB_initializer_list DB 01H
__B740C886_stdint@h DB 01H
__2B190A8B_cstdint DB 01H
__A1A74C2F_type_traits DB 01H
__A14A6E7D_utility DB 01H
__4A6017ED___msvc_iter_core@hpp DB 01H
__0936E6B9_limits@h DB 01H
__12A8C904_climits DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__9647EBF6_cstdlib DB 01H
__DB98B07B_xutility DB 01H
__B3B6A1BA___msvc_string_view@hpp DB 01H
__B9985323_float@h DB 01H
__A913E2DF_cfloat DB 01H
__6E0C4417_intrin0@inl@h DB 01H
__A040093F_intrin0@h DB 01H
__CFF5AFBB_limits DB 01H
__89766DA4_corecrt_terminate@h DB 01H
__35491E3A_eh@h DB 01H
__EC297378_vcruntime_exception@h DB 01H
__7132DEA2_exception DB 01H
__57FAB8BC_new DB 01H
__7B3E5274_xatomic@h DB 01H
__CBDF0DBE_xmemory DB 01H
__BF0C8B22_xstring DB 01H
__1EC467ED_ctype@h DB 01H
__D59CCEFF_cctype DB 01H
__078825A9_string DB 01H
__A07FEBF4_cmath DB 01H
__CA34073B_iterator DB 01H
__F7972D0B_share@h DB 01H
__FFC24B2B___msvc_system_error_abi@hpp DB 01H
__47765DA3_cerrno DB 01H
__F87CE4FF_stdexcept DB 01H
__43294B6A_xcall_once@h DB 01H
__88924846_xerrc@h DB 01H
__6B878AB8___msvc_threads_core@hpp DB 01H
__0A9237D2_time@h DB 01H
__66CC77FC_ctime DB 01H
__6D5C533A_xtimec@h DB 01H
__5C83183C_xthreads@h DB 01H
__A4C0F379_atomic DB 01H
__FC74594A_system_error DB 01H
__5E8EF172_vcruntime_typeinfo@h DB 01H
__AB474362_typeinfo DB 01H
__735BA335_memory DB 01H
__5F1EF43A_xfacet DB 01H
__3664B593___msvc_xlocinfo_types@hpp DB 01H
__791C33B7_locale@h DB 01H
__05EB3727_clocale DB 01H
__B4CEA0AA_xlocinfo DB 01H
__6032FF13_xlocale DB 01H
__8D2BD7B9_xiosbase DB 01H
__FADC5C43_streambuf DB 01H
__FEB59904_xlocnum DB 01H
__AF3782AA_ios DB 01H
__732225D7_ostream DB 01H
__10F210ED_istream DB 01H
__D35CD36D_sstream DB 01H
__D5D78C3C_xlocmon DB 01H
__10D309B8_xloctime DB 01H
__EC30D6BF_iomanip DB 01H
__0A91C1A1_Ch02_01@h DB 01H
__77092063_Ch02_01_fcpp@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	wmemcpy
PUBLIC	??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPEA_WPEB_W@Z			; std::_Maklocwcs
PUBLIC	??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	?AddI16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z		; AddI16_Iavx
PUBLIC	?AddU16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z		; AddU16_Iavx
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0DE@LHAKIDGO@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@ ; `string'
PUBLIC	?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA ; `std::_Maklocwcs'::`1'::__LINE__Var
PUBLIC	??_C@_0DE@DEEHIBMP@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@ ; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
EXTRN	__imp__calloc_dbg:PROC
EXTRN	memcpy:PROC
EXTRN	__imp_wcslen:PROC
EXTRN	strlen:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	_Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QEBAPEBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QEBAPEBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wmemcpy DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$wmemcpy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z DD imagerel $LN12
	DD	imagerel $LN12+588
	DD	imagerel $unwind$??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Maklocwcs@std@@YAPEA_WPEB_W@Z DD imagerel $LN4
	DD	imagerel $LN4+145
	DD	imagerel $unwind$?_Maklocwcs@std@@YAPEA_WPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z DD imagerel $LN7
	DD	imagerel $LN7+202
	DD	imagerel $unwind$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+357
	DD	imagerel $unwind$??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+357
	DD	imagerel $unwind$??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddI16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z DD imagerel $LN3
	DD	imagerel $LN3+221
	DD	imagerel $unwind$?AddI16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddU16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z DD imagerel $LN3
	DD	imagerel $LN3+221
	DD	imagerel $unwind$?AddU16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@DEEHIBMP@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@
CONST	SEGMENT
??_C@_0DE@DEEHIBMP@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@ DB 'D:\visual'
	DB	'\VC\Tools\MSVC\14.41.34120\include\xlocnum', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA DD 049H ; `std::_Maklocwcs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DE@LHAKIDGO@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@
CONST	SEGMENT
??_C@_0DE@LHAKIDGO@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@ DB 'D:\visual'
	DB	'\VC\Tools\MSVC\14.41.34120\include\xlocale', 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddU16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z DD 025052201H
	DD	011d2322H
	DD	07016004dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddI16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z DD 025052201H
	DD	011d2322H
	DD	07016004dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD 025061e01H
	DD	0119231eH
	DD	070120026H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD 025061e01H
	DD	0119231eH
	DD	070120026H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z DD 035051d01H
	DD	0118331dH
	DD	07011002bH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Maklocwcs@std@@YAPEA_WPEB_W@Z DD 035051301H
	DD	010e3313H
	DD	070070027H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0233H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z DD 035054719H
	DD	0118331dH
	DD	070110047H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0228H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$0 DB 05fH ; std::_Maklocstr<wchar_t>
	DB	057H
	DB	063H
	DB	00H
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$1 DB 05fH ; std::_Maklocstr<wchar_t>
	DB	04dH
	DB	062H
	DB	073H
	DB	074H
	DB	031H
	DB	00H
	ORG $+1
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$2 DB 05fH ; std::_Maklocstr<wchar_t>
	DB	04dH
	DB	062H
	DB	073H
	DB	074H
	DB	032H
	DB	00H
	ORG $+13
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcVarDesc DD 0158H ; std::_Maklocstr<wchar_t>
	DD	08H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$2
	DD	0f8H
	DD	08H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$1
	DD	0d4H
	DD	02H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$0
	ORG $+144
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcFrameData DD 03H ; std::_Maklocstr<wchar_t>
	DD	00H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wmemcpy DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\C2simd\Ch02_01\Ch02_01_fcpp.cpp
;	COMDAT ?AddU16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z
_TEXT	SEGMENT
a_vals$ = 16
b_vals$ = 64
c1_vals$ = 112
c2_vals$ = 160
$T1 = 400
$T2 = 448
$T3 = 496
$T4 = 544
c1$ = 608
c2$ = 616
a$ = 624
b$ = 632
?AddU16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z PROC		; AddU16_Iavx, COMDAT

; 21   : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 02
	00 00		 sub	 rsp, 616		; 00000268H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__77092063_Ch02_01_fcpp@cpp
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002e	90		 npad	 1

; 22   :     __m128i a_vals = _mm_load_si128((__m128i*)a);

  0002f	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  00036	c5 fa 6f 00	 vmovdqu xmm0, XMMWORD PTR [rax]
  0003a	c5 fa 7f 85 90
	01 00 00	 vmovdqu XMMWORD PTR $T1[rbp], xmm0
  00042	c5 fa 6f 85 90
	01 00 00	 vmovdqu xmm0, XMMWORD PTR $T1[rbp]
  0004a	c5 fa 7f 45 10	 vmovdqu XMMWORD PTR a_vals$[rbp], xmm0

; 23   :     __m128i b_vals = _mm_load_si128((__m128i*)b);

  0004f	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00056	c5 fa 6f 00	 vmovdqu xmm0, XMMWORD PTR [rax]
  0005a	c5 fa 7f 85 c0
	01 00 00	 vmovdqu XMMWORD PTR $T2[rbp], xmm0
  00062	c5 fa 6f 85 c0
	01 00 00	 vmovdqu xmm0, XMMWORD PTR $T2[rbp]
  0006a	c5 fa 7f 45 40	 vmovdqu XMMWORD PTR b_vals$[rbp], xmm0

; 24   : 
; 25   :     __m128i c1_vals = _mm_add_epi16(a_vals, b_vals);

  0006f	c5 fa 6f 45 10	 vmovdqu xmm0, XMMWORD PTR a_vals$[rbp]
  00074	c5 f9 fd 45 40	 vpaddw	 xmm0, xmm0, XMMWORD PTR b_vals$[rbp]
  00079	c5 fa 7f 85 f0
	01 00 00	 vmovdqu XMMWORD PTR $T3[rbp], xmm0
  00081	c5 fa 6f 85 f0
	01 00 00	 vmovdqu xmm0, XMMWORD PTR $T3[rbp]
  00089	c5 fa 7f 45 70	 vmovdqu XMMWORD PTR c1_vals$[rbp], xmm0

; 26   :     __m128i c2_vals = _mm_adds_epu16(a_vals, b_vals);

  0008e	c5 fa 6f 45 10	 vmovdqu xmm0, XMMWORD PTR a_vals$[rbp]
  00093	c5 f9 dd 45 40	 vpaddusw xmm0, xmm0, XMMWORD PTR b_vals$[rbp]
  00098	c5 fa 7f 85 20
	02 00 00	 vmovdqu XMMWORD PTR $T4[rbp], xmm0
  000a0	c5 fa 6f 85 20
	02 00 00	 vmovdqu xmm0, XMMWORD PTR $T4[rbp]
  000a8	c5 fa 7f 85 a0
	00 00 00	 vmovdqu XMMWORD PTR c2_vals$[rbp], xmm0

; 27   : 
; 28   :     _mm_store_si128((__m128i*)c1, c1_vals);

  000b0	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR c1$[rbp]
  000b7	c5 fa 6f 45 70	 vmovdqu xmm0, XMMWORD PTR c1_vals$[rbp]
  000bc	c5 fa 7f 00	 vmovdqu XMMWORD PTR [rax], xmm0

; 29   :     _mm_store_si128((__m128i*)c2, c2_vals);

  000c0	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR c2$[rbp]
  000c7	c5 fa 6f 85 a0
	00 00 00	 vmovdqu xmm0, XMMWORD PTR c2_vals$[rbp]
  000cf	c5 fa 7f 00	 vmovdqu XMMWORD PTR [rax], xmm0

; 30   : }

  000d3	48 8d a5 48 02
	00 00		 lea	 rsp, QWORD PTR [rbp+584]
  000da	5f		 pop	 rdi
  000db	5d		 pop	 rbp
  000dc	c3		 ret	 0
?AddU16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z ENDP		; AddU16_Iavx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\C2simd\Ch02_01\Ch02_01_fcpp.cpp
;	COMDAT ?AddI16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z
_TEXT	SEGMENT
a_vals$ = 16
b_vals$ = 64
c1_vals$ = 112
c2_vals$ = 160
$T1 = 400
$T2 = 448
$T3 = 496
$T4 = 544
c1$ = 608
c2$ = 616
a$ = 624
b$ = 632
?AddI16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z PROC		; AddI16_Iavx, COMDAT

; 9    : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 02
	00 00		 sub	 rsp, 616		; 00000268H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__77092063_Ch02_01_fcpp@cpp
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002e	90		 npad	 1

; 10   :     __m128i a_vals = _mm_load_si128((__m128i*)a);

  0002f	48 8b 85 70 02
	00 00		 mov	 rax, QWORD PTR a$[rbp]
  00036	c5 fa 6f 00	 vmovdqu xmm0, XMMWORD PTR [rax]
  0003a	c5 fa 7f 85 90
	01 00 00	 vmovdqu XMMWORD PTR $T1[rbp], xmm0
  00042	c5 fa 6f 85 90
	01 00 00	 vmovdqu xmm0, XMMWORD PTR $T1[rbp]
  0004a	c5 fa 7f 45 10	 vmovdqu XMMWORD PTR a_vals$[rbp], xmm0

; 11   :     __m128i b_vals = _mm_load_si128((__m128i*)b);

  0004f	48 8b 85 78 02
	00 00		 mov	 rax, QWORD PTR b$[rbp]
  00056	c5 fa 6f 00	 vmovdqu xmm0, XMMWORD PTR [rax]
  0005a	c5 fa 7f 85 c0
	01 00 00	 vmovdqu XMMWORD PTR $T2[rbp], xmm0
  00062	c5 fa 6f 85 c0
	01 00 00	 vmovdqu xmm0, XMMWORD PTR $T2[rbp]
  0006a	c5 fa 7f 45 40	 vmovdqu XMMWORD PTR b_vals$[rbp], xmm0

; 12   : 
; 13   :     __m128i c1_vals = _mm_add_epi16(a_vals, b_vals);

  0006f	c5 fa 6f 45 10	 vmovdqu xmm0, XMMWORD PTR a_vals$[rbp]
  00074	c5 f9 fd 45 40	 vpaddw	 xmm0, xmm0, XMMWORD PTR b_vals$[rbp]
  00079	c5 fa 7f 85 f0
	01 00 00	 vmovdqu XMMWORD PTR $T3[rbp], xmm0
  00081	c5 fa 6f 85 f0
	01 00 00	 vmovdqu xmm0, XMMWORD PTR $T3[rbp]
  00089	c5 fa 7f 45 70	 vmovdqu XMMWORD PTR c1_vals$[rbp], xmm0

; 14   :     __m128i c2_vals = _mm_adds_epi16(a_vals, b_vals);

  0008e	c5 fa 6f 45 10	 vmovdqu xmm0, XMMWORD PTR a_vals$[rbp]
  00093	c5 f9 ed 45 40	 vpaddsw xmm0, xmm0, XMMWORD PTR b_vals$[rbp]
  00098	c5 fa 7f 85 20
	02 00 00	 vmovdqu XMMWORD PTR $T4[rbp], xmm0
  000a0	c5 fa 6f 85 20
	02 00 00	 vmovdqu xmm0, XMMWORD PTR $T4[rbp]
  000a8	c5 fa 7f 85 a0
	00 00 00	 vmovdqu XMMWORD PTR c2_vals$[rbp], xmm0

; 15   : 
; 16   :     _mm_store_si128((__m128i*)c1, c1_vals);

  000b0	48 8b 85 60 02
	00 00		 mov	 rax, QWORD PTR c1$[rbp]
  000b7	c5 fa 6f 45 70	 vmovdqu xmm0, XMMWORD PTR c1_vals$[rbp]
  000bc	c5 fa 7f 00	 vmovdqu XMMWORD PTR [rax], xmm0

; 17   :     _mm_store_si128((__m128i*)c2, c2_vals);

  000c0	48 8b 85 68 02
	00 00		 mov	 rax, QWORD PTR c2$[rbp]
  000c7	c5 fa 6f 85 a0
	00 00 00	 vmovdqu xmm0, XMMWORD PTR c2_vals$[rbp]
  000cf	c5 fa 7f 00	 vmovdqu XMMWORD PTR [rax], xmm0

; 18   : }

  000d3	48 8d a5 48 02
	00 00		 lea	 rsp, QWORD PTR [rbp+584]
  000da	5f		 pop	 rdi
  000db	5d		 pop	 rbp
  000dc	c3		 ret	 0
?AddI16_Iavx@@YAXPEAUXmmVal@@0PEBU1@1@Z ENDP		; AddI16_Iavx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = 200
tv85 = 264
tv93 = 264
this$ = 304
__formal$ = 312
_Lobj$ = 320
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT

; 238  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__10D309B8_xloctime
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002a	90		 npad	 1

; 239  :         _Cvt = _Lobj._Getcvt();

  0002b	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00032	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ
  0003f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00046	48 8d 79 2c	 lea	 rdi, QWORD PTR [rcx+44]
  0004a	48 8b f0	 mov	 rsi, rax
  0004d	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00052	f3 a4		 rep movsb

; 240  : 
; 241  :         if (is_same_v<_Elem2, wchar_t>) {

  00054	33 c0		 xor	 eax, eax
  00056	83 f8 01	 cmp	 eax, 1
  00059	74 5c		 je	 SHORT $LN2@Getvals

; 242  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  0005b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ
  00068	48 8b c8	 mov	 rcx, rax
  0006b	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  00070	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00077	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 243  :             _Months =

  0007b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ
  00088	48 8b c8	 mov	 rcx, rax
  0008b	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  00090	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00097	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 244  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 245  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  000a2	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  000a7	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ae	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 246  :         } else {

  000b2	e9 a3 00 00 00	 jmp	 $LN3@Getvals
$LN2@Getvals:

; 247  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000b7	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000be	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  000c2	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  000c9	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getdays@_Locinfo@std@@QEBAPEBDXZ
  000d6	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv85[rbp]
  000dd	4c 8b c1	 mov	 r8, rcx
  000e0	33 d2		 xor	 edx, edx
  000e2	48 8b c8	 mov	 rcx, rax
  000e5	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000ea	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 248  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000f5	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fc	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  00100	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  00107	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  0010e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getmonths@_Locinfo@std@@QEBAPEBDXZ
  00114	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  0011b	4c 8b c1	 mov	 r8, rcx
  0011e	33 d2		 xor	 edx, edx
  00120	48 8b c8	 mov	 rcx, rax
  00123	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00128	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012f	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 249  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  00133	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0013a	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  0013e	4c 8b c0	 mov	 r8, rax
  00141	33 d2		 xor	 edx, edx
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  0014a	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  0014f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00156	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN3@Getvals:

; 250  :         }
; 251  :     }

  0015a	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  00161	5f		 pop	 rdi
  00162	5e		 pop	 rsi
  00163	5d		 pop	 rbp
  00164	c3		 ret	 0
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = 200
tv85 = 264
tv93 = 264
this$ = 304
__formal$ = 312
_Lobj$ = 320
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT

; 238  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__10D309B8_xloctime
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002a	90		 npad	 1

; 239  :         _Cvt = _Lobj._Getcvt();

  0002b	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00032	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ
  0003f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00046	48 8d 79 2c	 lea	 rdi, QWORD PTR [rcx+44]
  0004a	48 8b f0	 mov	 rsi, rax
  0004d	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00052	f3 a4		 rep movsb

; 240  : 
; 241  :         if (is_same_v<_Elem2, wchar_t>) {

  00054	33 c0		 xor	 eax, eax
  00056	83 f8 01	 cmp	 eax, 1
  00059	74 5c		 je	 SHORT $LN2@Getvals

; 242  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  0005b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ
  00068	48 8b c8	 mov	 rcx, rax
  0006b	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  00070	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00077	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 243  :             _Months =

  0007b	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ
  00088	48 8b c8	 mov	 rcx, rax
  0008b	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  00090	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00097	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 244  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 245  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  000a2	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  000a7	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ae	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 246  :         } else {

  000b2	e9 a3 00 00 00	 jmp	 $LN3@Getvals
$LN2@Getvals:

; 247  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000b7	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000be	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  000c2	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  000c9	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getdays@_Locinfo@std@@QEBAPEBDXZ
  000d6	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv85[rbp]
  000dd	4c 8b c1	 mov	 r8, rcx
  000e0	33 d2		 xor	 edx, edx
  000e2	48 8b c8	 mov	 rcx, rax
  000e5	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000ea	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 248  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000f5	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fc	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  00100	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  00107	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  0010e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getmonths@_Locinfo@std@@QEBAPEBDXZ
  00114	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  0011b	4c 8b c1	 mov	 r8, rcx
  0011e	33 d2		 xor	 edx, edx
  00120	48 8b c8	 mov	 rcx, rax
  00123	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00128	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012f	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 249  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  00133	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0013a	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  0013e	4c 8b c0	 mov	 r8, rax
  00141	33 d2		 xor	 edx, edx
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  0014a	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  0014f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00156	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN3@Getvals:

; 250  :         }
; 251  :     }

  0015a	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  00161	5f		 pop	 rdi
  00162	5e		 pop	 rsi
  00163	5d		 pop	 rbp
  00164	c3		 ret	 0
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z
_TEXT	SEGMENT
_Count$ = 8
_Ptrdest$ = 40
_Ptrnext$1 = 72
_Ptr$ = 320
__formal$ = 328
__formal$ = 336
??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 511  : _Elem* __CRTDECL _Maklocstr(const char* _Ptr, _Elem*, const _Locinfo::_Cvtvec&) {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6032FF13_xlocale
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1

; 512  :     // convert C string to _Elem sequence using _Cvtvec
; 513  :     size_t _Count = _CSTD strlen(_Ptr) + 1;

  0002a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00031	e8 00 00 00 00	 call	 strlen
  00036	48 ff c0	 inc	 rax
  00039	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax

; 514  : 
; 515  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  0003d	c7 44 24 20 03
	02 00 00	 mov	 DWORD PTR [rsp+32], 515	; 00000203H
  00045	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0DE@LHAKIDGO@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@
  0004c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00052	ba 01 00 00 00	 mov	 edx, 1
  00057	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__calloc_dbg
  00061	48 89 45 28	 mov	 QWORD PTR _Ptrdest$[rbp], rax

; 516  : 
; 517  :     if (!_Ptrdest) {

  00065	48 83 7d 28 00	 cmp	 QWORD PTR _Ptrdest$[rbp], 0
  0006a	75 06		 jne	 SHORT $LN5@Maklocstr

; 518  :         _Xbad_alloc();

  0006c	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00071	90		 npad	 1
$LN5@Maklocstr:

; 519  :     }
; 520  : 
; 521  :     for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {

  00072	48 8b 45 28	 mov	 rax, QWORD PTR _Ptrdest$[rbp]
  00076	48 89 45 48	 mov	 QWORD PTR _Ptrnext$1[rbp], rax
  0007a	eb 27		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0007c	48 8b 45 08	 mov	 rax, QWORD PTR _Count$[rbp]
  00080	48 ff c8	 dec	 rax
  00083	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  00087	48 8b 45 48	 mov	 rax, QWORD PTR _Ptrnext$1[rbp]
  0008b	48 ff c0	 inc	 rax
  0008e	48 89 45 48	 mov	 QWORD PTR _Ptrnext$1[rbp], rax
  00092	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00099	48 ff c0	 inc	 rax
  0009c	48 89 85 40 01
	00 00		 mov	 QWORD PTR _Ptr$[rbp], rax
$LN4@Maklocstr:
  000a3	48 83 7d 08 00	 cmp	 QWORD PTR _Count$[rbp], 0
  000a8	76 12		 jbe	 SHORT $LN3@Maklocstr

; 522  :         *_Ptrnext = static_cast<_Elem>(static_cast<unsigned char>(*_Ptr));

  000aa	48 8b 45 48	 mov	 rax, QWORD PTR _Ptrnext$1[rbp]
  000ae	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000b5	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  000b8	88 08		 mov	 BYTE PTR [rax], cl

; 523  :     }

  000ba	eb c0		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 524  : 
; 525  :     return _Ptrdest;

  000bc	48 8b 45 28	 mov	 rax, QWORD PTR _Ptrdest$[rbp]
$LN6@Maklocstr:

; 526  : }

  000c0	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000c7	5f		 pop	 rdi
  000c8	5d		 pop	 rbp
  000c9	c3		 ret	 0
??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPEA_WPEB_W@Z
_TEXT	SEGMENT
_Count$ = 8
_Ptrdest$ = 40
_Ptr$ = 288
?_Maklocwcs@std@@YAPEA_WPEB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 73   : inline wchar_t* _Maklocwcs(const wchar_t* _Ptr) { // copy NTWCS to allocated storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FEB59904_xlocnum
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1

; 74   :     const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  00020	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcslen
  0002d	48 ff c0	 inc	 rax
  00030	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax

; 75   : 
; 76   :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Count, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  00034	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA
  0003a	83 c0 03	 add	 eax, 3
  0003d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00041	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0DE@DEEHIBMP@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@
  00048	41 b8 02 00 00
	00		 mov	 r8d, 2
  0004e	ba 02 00 00 00	 mov	 edx, 2
  00053	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__calloc_dbg
  0005d	48 89 45 28	 mov	 QWORD PTR _Ptrdest$[rbp], rax

; 77   : 
; 78   :     if (!_Ptrdest) {

  00061	48 83 7d 28 00	 cmp	 QWORD PTR _Ptrdest$[rbp], 0
  00066	75 06		 jne	 SHORT $LN2@Maklocwcs

; 79   :         _Xbad_alloc();

  00068	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  0006d	90		 npad	 1
$LN2@Maklocwcs:

; 80   :     }
; 81   : 
; 82   :     _CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

  0006e	4c 8b 45 08	 mov	 r8, QWORD PTR _Count$[rbp]
  00072	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00079	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptrdest$[rbp]
  0007d	e8 00 00 00 00	 call	 wmemcpy
  00082	90		 npad	 1

; 83   :     return _Ptrdest;

  00083	48 8b 45 28	 mov	 rax, QWORD PTR _Ptrdest$[rbp]
$LN3@Maklocwcs:

; 84   : }

  00087	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0008e	5f		 pop	 rdi
  0008f	5d		 pop	 rbp
  00090	c3		 ret	 0
?_Maklocwcs@std@@YAPEA_WPEB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\visual\VC\Tools\MSVC\14.41.34120\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z
_TEXT	SEGMENT
_Count$ = 8
_Count1$ = 40
_Wchars$ = 72
_Ptr1$ = 104
_Bytes$ = 132
_Wc$ = 164
_Mbst1$ = 200
_Ptrdest$ = 232
_Ptrnext$ = 264
_Mbst2$ = 296
__$ArrayPad$ = 504
_Ptr$ = 544
__formal$ = 552
_Cvt$ = 560
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z PROC ; std::_Maklocstr<wchar_t>, COMDAT

; 529  : inline wchar_t* __CRTDECL _Maklocstr(const char* _Ptr, wchar_t*, const _Locinfo::_Cvtvec& _Cvt) {

$LN12:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00022	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR [rsp+600]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 f8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6032FF13_xlocale
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00053	90		 npad	 1

; 530  :     // convert C string to wchar_t sequence using _Cvtvec
; 531  :     size_t _Count;
; 532  :     size_t _Count1;
; 533  :     size_t _Wchars;
; 534  :     const char* _Ptr1;
; 535  :     int _Bytes;
; 536  :     wchar_t _Wc;
; 537  :     mbstate_t _Mbst1 = {};

  00054	48 8d 85 c8 00
	00 00		 lea	 rax, QWORD PTR _Mbst1$[rbp]
  0005b	48 8b f8	 mov	 rdi, rax
  0005e	33 c0		 xor	 eax, eax
  00060	b9 08 00 00 00	 mov	 ecx, 8
  00065	f3 aa		 rep stosb

; 538  : 
; 539  :     _Count1 = _CSTD strlen(_Ptr) + 1;

  00067	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  0006e	e8 00 00 00 00	 call	 strlen
  00073	48 ff c0	 inc	 rax
  00076	48 89 45 28	 mov	 QWORD PTR _Count1$[rbp], rax

; 540  :     for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count; _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars) {

  0007a	48 8b 45 28	 mov	 rax, QWORD PTR _Count1$[rbp]
  0007e	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  00082	48 c7 45 48 00
	00 00 00	 mov	 QWORD PTR _Wchars$[rbp], 0
  0008a	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00091	48 89 45 68	 mov	 QWORD PTR _Ptr1$[rbp], rax
  00095	eb 35		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  00097	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  0009e	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  000a2	48 2b c8	 sub	 rcx, rax
  000a5	48 8b c1	 mov	 rax, rcx
  000a8	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  000ac	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  000b3	48 8b 4d 68	 mov	 rcx, QWORD PTR _Ptr1$[rbp]
  000b7	48 03 c8	 add	 rcx, rax
  000ba	48 8b c1	 mov	 rax, rcx
  000bd	48 89 45 68	 mov	 QWORD PTR _Ptr1$[rbp], rax
  000c1	48 8b 45 48	 mov	 rax, QWORD PTR _Wchars$[rbp]
  000c5	48 ff c0	 inc	 rax
  000c8	48 89 45 48	 mov	 QWORD PTR _Wchars$[rbp], rax
$LN4@Maklocstr:
  000cc	48 83 7d 08 00	 cmp	 QWORD PTR _Count$[rbp], 0
  000d1	76 3a		 jbe	 SHORT $LN3@Maklocstr

; 541  :         if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) {

  000d3	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Cvt$[rbp]
  000da	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000df	4c 8d 8d c8 00
	00 00		 lea	 r9, QWORD PTR _Mbst1$[rbp]
  000e6	4c 8b 45 08	 mov	 r8, QWORD PTR _Count$[rbp]
  000ea	48 8b 55 68	 mov	 rdx, QWORD PTR _Ptr1$[rbp]
  000ee	48 8d 8d a4 00
	00 00		 lea	 rcx, QWORD PTR _Wc$[rbp]
  000f5	e8 00 00 00 00	 call	 _Mbrtowc
  000fa	89 85 84 00 00
	00		 mov	 DWORD PTR _Bytes$[rbp], eax
  00100	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR _Bytes$[rbp], 0
  00107	7f 02		 jg	 SHORT $LN8@Maklocstr

; 542  :             break;

  00109	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 543  :         }
; 544  :     }

  0010b	eb 8a		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 545  : 
; 546  :     ++_Wchars; // count terminating nul

  0010d	48 8b 45 48	 mov	 rax, QWORD PTR _Wchars$[rbp]
  00111	48 ff c0	 inc	 rax
  00114	48 89 45 48	 mov	 QWORD PTR _Wchars$[rbp], rax

; 547  : 
; 548  :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Wchars, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  00118	c7 44 24 20 24
	02 00 00	 mov	 DWORD PTR [rsp+32], 548	; 00000224H
  00120	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0DE@LHAKIDGO@D?3?2visual?2VC?2Tools?2MSVC?214?441?43@
  00127	41 b8 02 00 00
	00		 mov	 r8d, 2
  0012d	ba 02 00 00 00	 mov	 edx, 2
  00132	48 8b 4d 48	 mov	 rcx, QWORD PTR _Wchars$[rbp]
  00136	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__calloc_dbg
  0013c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR _Ptrdest$[rbp], rax

; 549  : 
; 550  :     if (!_Ptrdest) {

  00143	48 83 bd e8 00
	00 00 00	 cmp	 QWORD PTR _Ptrdest$[rbp], 0
  0014b	75 06		 jne	 SHORT $LN9@Maklocstr

; 551  :         _Xbad_alloc();

  0014d	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00152	90		 npad	 1
$LN9@Maklocstr:

; 552  :     }
; 553  : 
; 554  :     wchar_t* _Ptrnext = _Ptrdest;

  00153	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Ptrdest$[rbp]
  0015a	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Ptrnext$[rbp], rax

; 555  :     mbstate_t _Mbst2  = {};

  00161	48 8d 85 28 01
	00 00		 lea	 rax, QWORD PTR _Mbst2$[rbp]
  00168	48 8b f8	 mov	 rdi, rax
  0016b	33 c0		 xor	 eax, eax
  0016d	b9 08 00 00 00	 mov	 ecx, 8
  00172	f3 aa		 rep stosb

; 556  : 
; 557  :     for (; 0 < _Wchars; _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext) {

  00174	eb 4d		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:
  00176	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  0017d	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  00181	48 2b c8	 sub	 rcx, rax
  00184	48 8b c1	 mov	 rax, rcx
  00187	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  0018b	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  00192	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00199	48 03 c8	 add	 rcx, rax
  0019c	48 8b c1	 mov	 rax, rcx
  0019f	48 89 85 20 02
	00 00		 mov	 QWORD PTR _Ptr$[rbp], rax
  001a6	48 8b 45 48	 mov	 rax, QWORD PTR _Wchars$[rbp]
  001aa	48 ff c8	 dec	 rax
  001ad	48 89 45 48	 mov	 QWORD PTR _Wchars$[rbp], rax
  001b1	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ptrnext$[rbp]
  001b8	48 83 c0 02	 add	 rax, 2
  001bc	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Ptrnext$[rbp], rax
$LN7@Maklocstr:
  001c3	48 83 7d 48 00	 cmp	 QWORD PTR _Wchars$[rbp], 0
  001c8	76 40		 jbe	 SHORT $LN6@Maklocstr

; 558  :         if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) {

  001ca	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Cvt$[rbp]
  001d1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d6	4c 8d 8d 28 01
	00 00		 lea	 r9, QWORD PTR _Mbst2$[rbp]
  001dd	4c 8b 45 28	 mov	 r8, QWORD PTR _Count1$[rbp]
  001e1	48 8b 95 20 02
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  001e8	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ptrnext$[rbp]
  001ef	e8 00 00 00 00	 call	 _Mbrtowc
  001f4	89 85 84 00 00
	00		 mov	 DWORD PTR _Bytes$[rbp], eax
  001fa	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR _Bytes$[rbp], 0
  00201	7f 02		 jg	 SHORT $LN10@Maklocstr

; 559  :             break;

  00203	eb 05		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 560  :         }
; 561  :     }

  00205	e9 6c ff ff ff	 jmp	 $LN5@Maklocstr
$LN6@Maklocstr:

; 562  : 
; 563  :     *_Ptrnext = L'\0';

  0020a	33 c0		 xor	 eax, eax
  0020c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ptrnext$[rbp]
  00213	66 89 01	 mov	 WORD PTR [rcx], ax

; 564  : 
; 565  :     return _Ptrdest;

  00216	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Ptrdest$[rbp]
$LN11@Maklocstr:

; 566  : }

  0021d	48 8b f8	 mov	 rdi, rax
  00220	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00224	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcFrameData
  0022b	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00230	48 8b c7	 mov	 rax, rdi
  00233	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0023a	48 33 cd	 xor	 rcx, rbp
  0023d	e8 00 00 00 00	 call	 __security_check_cookie
  00242	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00249	5f		 pop	 rdi
  0024a	5d		 pop	 rbp
  0024b	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ENDP ; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\wchar.h
;	COMDAT wmemcpy
_TEXT	SEGMENT
_S1$ = 224
_S2$ = 232
_N$ = 240
wmemcpy	PROC						; COMDAT

; 234  :     {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3FCAD62E_wchar@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	90		 npad	 1

; 235  :         #pragma warning(suppress: 6386) // Buffer overrun
; 236  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0002a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _N$[rbp]
  00031	48 d1 e0	 shl	 rax, 1
  00034	4c 8b c0	 mov	 r8, rax
  00037	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _S2$[rbp]
  0003e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _S1$[rbp]
  00045	e8 00 00 00 00	 call	 memcpy

; 237  :     }

  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
wmemcpy	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\C2simd\Ch02_01\Ch02_01_fcpp.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__77092063_Ch02_01_fcpp@cpp
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	90		 npad	 1
  00025	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002c	5f		 pop	 rdi
  0002d	5d		 pop	 rbp
  0002e	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\C2simd\Ch02_01\Ch02_01_fcpp.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__77092063_Ch02_01_fcpp@cpp
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	90		 npad	 1
  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
